
<!DOCTYPE html><html><head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- DEFAULT_META_TAGS -->

    <meta name="codecrafters-frontend/config/environment" content="%7B%22modulePrefix%22%3A%22codecrafters-frontend%22%2C%22environment%22%3A%22production%22%2C%22rootURL%22%3A%22%2F%22%2C%22locationType%22%3A%22history%22%2C%22EmberENV%22%3A%7B%22EXTEND_PROTOTYPES%22%3Atrue%2C%22FEATURES%22%3A%7B%7D%2C%22_APPLICATION_TEMPLATE_WRAPPER%22%3Afalse%2C%22_DEFAULT_ASYNC_OBSERVERS%22%3Atrue%2C%22_JQUERY_INTEGRATION%22%3Afalse%2C%22_NO_IMPLICIT_ROUTE_MODEL%22%3Atrue%2C%22_TEMPLATE_ONLY_GLIMMER_COMPONENTS%22%3Atrue%7D%2C%22APP%22%3A%7B%22name%22%3A%22codecrafters-frontend%22%2C%22version%22%3A%220.0.3%2B8ff1e384%22%7D%2C%22%40sentry%2Fember%22%3A%7B%22disablePerformance%22%3Atrue%2C%22disableInstrumentComponents%22%3Atrue%7D%2C%22x%22%3A%7B%22backendUrl%22%3A%22https%3A%2F%2Fbackend.codecrafters.io%22%2C%22defaultMetaTags%22%3A%7B%22type%22%3A%22website%22%2C%22siteName%22%3A%22CodeCrafters%22%2C%22title%22%3A%22The%20Software%20Pro's%20Best%20Kept%20Secret.%22%2C%22description%22%3A%22Real-world%20proficiency%20projects%20designed%20for%20experienced%20engineers.%20Develop%20software%20craftsmanship%20by%20recreating%20popular%20devtools%20from%20scratch.%22%2C%22imageUrl%22%3A%22https%3A%2F%2Fcodecrafters.io%2Fimages%2Fog-index.jpg%22%2C%22twitterCard%22%3A%22summary_large_image%22%2C%22twitterSite%22%3A%22%40codecraftersio%22%7D%2C%22helpscoutBeaconId%22%3A%22bb089ae9-a4ae-4114-8f7a-b660f6310158%22%2C%22isCI%22%3Afalse%2C%22metaTagImagesBaseURL%22%3A%22https%3A%2F%2Fcodecrafters.io%2Fimages%2Fapp_og%2F%22%2C%22stripePublishableKey%22%3A%22pk_live_51L1aPXJtewx3LJ9VdPeyPB6tb3498n8Z5JVkKWwsBhwmO0LGcWXfEW5N1IRKpxtX8402PUq242T54vNN5pvHkx1K00itifTLUo%22%2C%22vercelAnalyticsId%22%3A%22ehX1OJPdpDnKuVh8DcafZnNfEDz%22%2C%22version%22%3A%2230.0.8ff1e38%22%7D%2C%22fastboot%22%3A%7B%22hostWhitelist%22%3A%5B%7B%7D%5D%7D%2C%22ember-cli-mirage%22%3A%7B%22usingProxy%22%3Afalse%2C%22useDefaultPassthroughs%22%3Atrue%7D%7D">
<!-- EMBER_CLI_FASTBOOT_TITLE -->  <meta name="ember-cli-head-start" content>
  


<meta name="description" content="Real-world proficiency projects designed for experienced engineers. Develop software craftsmanship by recreating popular devtools from scratch.">

<meta property="og:type" content="website">
<meta property="og:site_name" content="CodeCrafters">
<meta property="og:title" content="The Software Pro's Best Kept Secret.">
<meta property="og:description" content="Real-world proficiency projects designed for experienced engineers. Develop software craftsmanship by recreating popular devtools from scratch.">
<meta property="og:image" content="https://codecrafters.io/images/app_og/language-php.jpg">

<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@codecraftersio">
<meta name="twitter:title" content="The Software Pro's Best Kept Secret.">
<meta name="twitter:description" content="Real-world proficiency projects designed for experienced engineers. Develop software craftsmanship by recreating popular devtools from scratch.">
<meta name="twitter:image" content="https://codecrafters.io/images/app_og/language-php.jpg">
  <meta name="ember-cli-head-end" content>
<title>PHP | CodeCrafters</title>

    

<link integrity="" rel="stylesheet" href="/assets/vendor.40282115ccc53a25dda7bcbced0d1cec.css">
    

<link integrity="" rel="stylesheet" href="/assets/codecrafters-frontend.e63d5091146385c6a7d73c231e07eeb4.css">
    <link rel="icon" href="/assets/favicon.ico">

    

    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700;800&amp;display=swap" rel="stylesheet">
    <link href="https://fonts.cdnfonts.com/css/monaco" rel="stylesheet">

    <script type="text/javascript">!function(e,t,n){function a(){var e=t.getElementsByTagName("script")[0],n=t.createElement("script");n.type="text/javascript",n.async=!0,n.src="https://beacon-v2.helpscout.net",e.parentNode.insertBefore(n,e)}if(e.Beacon=n=function(t,n,a){e.Beacon.readyQueue.push({method:t,options:n,data:a})},n.readyQueue=[],"complete"===t.readyState)return a();e.attachEvent?e.attachEvent("onload",a):e.addEventListener("load",a,!1)}(window,document,window.Beacon||function(){});
    </script>
    <script async="" src="https://metabase.codecrafters.io/app/iframeResizer.js"></script>

    <!-- Facebook Pixel Code -->
    <script>
      !function(f,b,e,v,n,t,s)
      {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
      n.callMethod.apply(n,arguments):n.queue.push(arguments)};
      if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
      n.queue=[];t=b.createElement(e);t.async=!0;
      t.src=v;s=b.getElementsByTagName(e)[0];
      s.parentNode.insertBefore(t,s)}(window, document,'script',
      'https://connect.facebook.net/en_US/fbevents.js');
      fbq('init', '1218366289258395');
      fbq('track', 'PageView');
    </script>
    <!-- End Facebook Pixel Code -->

    <!-- Don't think we need this anymore? -->
    <!-- <script async src="https://www.googletagmanager.com/gtag/js?id=G-N8D6K4M2HE"></script> -->
    <!-- <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'G-N8D6K4M2HE');
    </script> -->
  
<link href="/assets/chunk.288e69909b30728eb866.css" rel="stylesheet"></head>
  <body style="margin: 0; background-color: rgb(248 250 252)">
    <div class="ember-load-indicator">
      <div class="indicator-container">
        <svg class="indicator-icon" width="100" height="100" viewBox="0 0 500 500" fill="none" xmlns="http://www.w3.org/2000/svg">
          <g clip-path="url(#clip0)">
            <g filter="url(#filter0_d)">
              <path d="M494.841 237.638L379.155 115.073C372.276 107.569 360.395 106.944 352.891 114.448C345.387 121.326 344.761 133.208 352.265 140.712L455.445 250.77L351.64 360.203C344.761 367.707 344.761 379.588 352.265 386.467C356.017 389.594 360.395 391.47 365.397 391.47C370.4 391.47 375.403 389.594 379.155 385.842L494.841 263.277C501.72 256.398 501.72 245.142 494.841 237.638Z" fill="url(#paint0_linear)"></path>
            </g>
            <g filter="url(#filter1_d)">
              <path d="M147.157 114.448C139.653 107.569 127.771 107.569 120.893 115.073L4.58107 237.638C-2.29758 245.142 -2.29758 256.398 4.58107 263.277L120.267 385.842C124.019 389.594 129.022 391.47 134.025 391.47C138.402 391.47 143.405 389.594 147.157 386.467C154.661 379.588 155.286 367.707 147.782 360.203L43.977 250.77L147.782 141.337C154.661 133.833 154.661 121.952 147.157 114.448Z" fill="url(#paint1_linear)"></path>
            </g>
            <g filter="url(#filter2_d)">
              <path d="M280.352 51.9145C270.347 50.6638 260.342 57.5424 259.091 67.5478L204.062 427.739C202.811 437.744 209.69 447.749 219.695 449C220.946 449 221.571 449 222.822 449C232.202 449 239.706 442.121 241.582 433.367L296.611 73.1757C297.236 63.1704 290.358 53.7905 280.352 51.9145Z" fill="url(#paint2_linear)"></path>
            </g>
          </g>
          <defs>
            <filter id="filter0_d" x="346.557" y="109.123" width="173.443" height="302.347" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
              <feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood>
              <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"></feColorMatrix>
              <feOffset dx="10" dy="10"></feOffset>
              <feGaussianBlur stdDeviation="5"></feGaussianBlur>
              <feComposite in2="hardAlpha" operator="out"></feComposite>
              <feColorMatrix type="matrix" values="0 0 0 0 0.101961 0 0 0 0 0.12549 0 0 0 0 0.172549 0 0 0 0.1 0"></feColorMatrix>
              <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow"></feBlend>
              <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape"></feBlend>
            </filter>
            <filter id="filter1_d" x="-0.577919" y="109.364" width="173.685" height="302.105" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
              <feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood>
              <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"></feColorMatrix>
              <feOffset dx="10" dy="10"></feOffset>
              <feGaussianBlur stdDeviation="5"></feGaussianBlur>
              <feComposite in2="hardAlpha" operator="out"></feComposite>
              <feColorMatrix type="matrix" values="0 0 0 0 0.101961 0 0 0 0 0.12549 0 0 0 0 0.172549 0 0 0 0.1 0"></feColorMatrix>
              <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow"></feBlend>
              <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape"></feBlend>
            </filter>
            <filter id="filter2_d" x="203.915" y="51.7678" width="112.735" height="417.232" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
              <feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood>
              <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"></feColorMatrix>
              <feOffset dx="10" dy="10"></feOffset>
              <feGaussianBlur stdDeviation="5"></feGaussianBlur>
              <feComposite in2="hardAlpha" operator="out"></feComposite>
              <feColorMatrix type="matrix" values="0 0 0 0 0.101961 0 0 0 0 0.12549 0 0 0 0 0.172549 0 0 0 0.1 0"></feColorMatrix>
              <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow"></feBlend>
              <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape"></feBlend>
            </filter>
            <linearGradient id="paint0_linear" x1="423.279" y1="2.72149" x2="423.279" y2="445.507" gradientUnits="userSpaceOnUse">
              <stop stop-color="#00EFD1"></stop>
              <stop offset="1" stop-color="#00ACEA"></stop>
            </linearGradient>
            <linearGradient id="paint1_linear" x1="76.2647" y1="2.72148" x2="76.2647" y2="445.507" gradientUnits="userSpaceOnUse">
              <stop stop-color="#00EFD1"></stop>
              <stop offset="1" stop-color="#00ACEA"></stop>
            </linearGradient>
            <linearGradient id="paint2_linear" x1="250.283" y1="2.7215" x2="250.283" y2="445.507" gradientUnits="userSpaceOnUse">
              <stop stop-color="#00EFD1"></stop>
              <stop offset="1" stop-color="#00ACEA"></stop>
            </linearGradient>
            <clipPath id="clip0">
              <rect width="500" height="500" fill="white"></rect>
            </clipPath>
          </defs>
        </svg>
        <div class="indicator-spinner-container">
          <div class="sk-circle">
            <div class="sk-circle1 sk-child"></div>
            <div class="sk-circle2 sk-child"></div>
            <div class="sk-circle3 sk-child"></div>
            <div class="sk-circle4 sk-child"></div>
            <div class="sk-circle5 sk-child"></div>
            <div class="sk-circle6 sk-child"></div>
            <div class="sk-circle7 sk-child"></div>
            <div class="sk-circle8 sk-child"></div>
            <div class="sk-circle9 sk-child"></div>
            <div class="sk-circle10 sk-child"></div>
            <div class="sk-circle11 sk-child"></div>
            <div class="sk-circle12 sk-child"></div>
          </div>
          <span class="indicator-loading-text">
            Loading...
          </span>
        </div>
      </div>
    </div>

    <style>
      .ember-load-indicator {
        height: 100vh;
        align-items: center;
        justify-content: center;
        margin-top: 52px;
        display:none;
        opacity: 0;
        transition: opacity 0.3s;
      }
      .ember-load-indicator .indicator-container {
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      .ember-load-indicator .indicator-spinner-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 30px;
      }
      .ember-load-indicator .indicator-loading-text {
        font-family: Montserrat, sans-serif;
        color: #64748B;
        margin-top: 1.5em;
      }

      .ember-load-indicator[is-fastboot=true] {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        height: 0;
        margin-top: 0;
        z-index: 1000;
      }
      .ember-load-indicator[is-fastboot=true] .indicator-container {
        margin-top: 56px;
      }
      .ember-load-indicator[is-fastboot=true] .indicator-spinner-container {
        margin-top: 0;
        padding: 8px 0;
      }
      .ember-load-indicator[is-fastboot=true] .indicator-icon {
        display: none;
      }
      .ember-load-indicator[is-fastboot=true] .indicator-loading-text {
        display: none;
      }

      .sk-circle {
        width: 40px;
        height: 40px;
        position: relative;
      }
      .sk-circle .sk-child {
        width: 100%;
        height: 100%;
        position: absolute;
        left: 0;
        top: 0;
      }
      .sk-circle .sk-child:before {
        content: '';
        display: block;
        margin: 0 auto;
        width: 15%;
        height: 15%;
        background-color: #64748B;
        border-radius: 100%;
        -webkit-animation: sk-circleBounceDelay 1.2s infinite ease-in-out both;
        animation: sk-circleBounceDelay 1.2s infinite ease-in-out both;
      }
      .sk-circle .sk-circle2 {
        -webkit-transform: rotate(30deg);
        -ms-transform: rotate(30deg);
        transform: rotate(30deg); }
      .sk-circle .sk-circle3 {
        -webkit-transform: rotate(60deg);
        -ms-transform: rotate(60deg);
        transform: rotate(60deg); }
      .sk-circle .sk-circle4 {
        -webkit-transform: rotate(90deg);
        -ms-transform: rotate(90deg);
        transform: rotate(90deg); }
      .sk-circle .sk-circle5 {
        -webkit-transform: rotate(120deg);
        -ms-transform: rotate(120deg);
        transform: rotate(120deg); }
      .sk-circle .sk-circle6 {
        -webkit-transform: rotate(150deg);
        -ms-transform: rotate(150deg);
        transform: rotate(150deg); }
      .sk-circle .sk-circle7 {
        -webkit-transform: rotate(180deg);
        -ms-transform: rotate(180deg);
        transform: rotate(180deg); }
      .sk-circle .sk-circle8 {
        -webkit-transform: rotate(210deg);
        -ms-transform: rotate(210deg);
        transform: rotate(210deg); }
      .sk-circle .sk-circle9 {
        -webkit-transform: rotate(240deg);
        -ms-transform: rotate(240deg);
        transform: rotate(240deg); }
      .sk-circle .sk-circle10 {
        -webkit-transform: rotate(270deg);
        -ms-transform: rotate(270deg);
        transform: rotate(270deg); }
      .sk-circle .sk-circle11 {
        -webkit-transform: rotate(300deg);
        -ms-transform: rotate(300deg);
        transform: rotate(300deg); }
      .sk-circle .sk-circle12 {
        -webkit-transform: rotate(330deg);
        -ms-transform: rotate(330deg);
        transform: rotate(330deg); }
      .sk-circle .sk-circle2:before {
        -webkit-animation-delay: -1.1s;
        animation-delay: -1.1s; }
      .sk-circle .sk-circle3:before {
        -webkit-animation-delay: -1s;
        animation-delay: -1s; }
      .sk-circle .sk-circle4:before {
        -webkit-animation-delay: -0.9s;
        animation-delay: -0.9s; }
      .sk-circle .sk-circle5:before {
        -webkit-animation-delay: -0.8s;
        animation-delay: -0.8s; }
      .sk-circle .sk-circle6:before {
        -webkit-animation-delay: -0.7s;
        animation-delay: -0.7s; }
      .sk-circle .sk-circle7:before {
        -webkit-animation-delay: -0.6s;
        animation-delay: -0.6s; }
      .sk-circle .sk-circle8:before {
        -webkit-animation-delay: -0.5s;
        animation-delay: -0.5s; }
      .sk-circle .sk-circle9:before {
        -webkit-animation-delay: -0.4s;
        animation-delay: -0.4s; }
      .sk-circle .sk-circle10:before {
        -webkit-animation-delay: -0.3s;
        animation-delay: -0.3s; }
      .sk-circle .sk-circle11:before {
        -webkit-animation-delay: -0.2s;
        animation-delay: -0.2s; }
      .sk-circle .sk-circle12:before {
        -webkit-animation-delay: -0.1s;
        animation-delay: -0.1s; }

      @-webkit-keyframes sk-circleBounceDelay {
        0%, 80%, 100% {
          -webkit-transform: scale(0);
          transform: scale(0);
        } 40% {
            -webkit-transform: scale(1);
            transform: scale(1);
          }
      }

      @keyframes sk-circleBounceDelay {
        0%, 80%, 100% {
          -webkit-transform: scale(0);
          transform: scale(0);
        } 40% {
            -webkit-transform: scale(1);
            transform: scale(1);
          }
      }
    </style>

    <script>
      // Wait for the DOM to render fully
      setTimeout(() => {
        const shoeBoxes = document.querySelectorAll('script[type="fastboot/shoebox"]'); // Find all FastBoot Shoeboxes
        const isFastBootPage = shoeBoxes.length > 0; // If Shoeboxes exist, assume this is a FastBoot page
        // Delay the appearence of the loading indicator
        setTimeout(() => {
          const elems = document.querySelectorAll('.ember-load-indicator');
          // Iterate over the NodeList this way to maintain ie11 compatibility
          for (let i = 0; i < elems.length; i++) {
            elems[i].style.display = 'flex';
            elems[i].style.opacity = '1';
            elems[i].setAttribute('is-fastboot', isFastBootPage); // CSS uses this to show FastBoot-specific indicator
          }
        }, isFastBootPage ? 3000 : 3000); // Different delay for FastBoot and regular indicator
      }, 0); // Postpone to the next run-loop
    </script>

    <script type="x/boundary" id="fastboot-body-start"></script><!---->



<div class="min-h-screen bg-gray-50" id="application-container" data-test-application-container>
  <div id="ember-basic-dropdown-wormhole"></div>

    <div class="shadow relative bg-white dark:bg-gray-900 dark:border-b dark:border-white/5" data-test-header>
  <div class="container lg:max-w-screen-lg mx-auto flex items-stretch flex-col md:flex-row px-3 md:px-6">
    <div class="flex items-center justify-between">
      <div class="flex">
        <div class="text-gray-700 dark:text-gray-300 pr-5 text-sm flex-grow">
          <a id="ember2629" class="ember-view flex items-center" href="/catalog">
            <img class="h-8 w-8 my-3 mr-2" src="/assets/7408d202b2bb110054fc.svg" alt="CodeCrafters">
            CodeCrafters
          </a>
        </div>
      </div>

      <button class="md:hidden text-gray-600 dark:text-gray-400 pl-10 py-3 focus:outline-none" type="button">
        <svg class="fill-current" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24" width="24" height="24">
          <path class="heroicon-ui" d="M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z"></path>
        </svg>
      </button>
    </div>

    <div class="hidden md:flex items-center justify-between flex-grow">
      <div class="flex items-center">
        <div class="bg-gray-200 dark:bg-white/5 w-px h-5 mr-3"></div>

            <a id="ember2630" class="ember-view text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 px-2" data-test-header-link href="/catalog">
    Catalog
  </a>

            <a id="ember2631" class="ember-view text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 px-2" data-test-header-link href="/pay">
    Pricing
  </a>

      </div>

      <div class="invisible  flex items-center ml-6">
<!---->
            <div class="ember-basic-dropdown">
    <div id="ember2633" class="ember-view ember-basic-dropdown-trigger
       ember-basic-dropdown-trigger--in-place
      
      
      " tabindex="0">
    
    <div class="mr-4">
      
          <div role="button" class="rounded border
              border-gray-200 dark:border-white/10
              text-gray-600 dark:text-gray-400 hover:border-gray-500 dark:hover:border-gray-500 px-2 py-1 text-xs" data-test-feedback-button>
            Feedback
          </div>
        
    </div>
  
  </div>

    <div id="ember-basic-dropdown-content-ember2632" class="ember-basic-dropdown-content-placeholder"></div>

</div>


          <div class="flex items-center">
            <button class="text-gray-600 dark:text-gray-300 flex items-center py-3 outline-none group" data-test-sign-in-with-github-button type="button">
  <span class="mr-2 text-sm md:text-xs group-hover:text-teal-500 transition-all">
    Sign in with GitHub
  </span>

  <svg viewBox="0 0 1024 1024" fill="currentColor" xmlns="http://www.w3.org/2000/svg" class="fill-current w-4 transform transition-all group-hover:text-teal-500"><path fill-rule="evenodd" clip-rule="evenodd" d="M512 0C229.12 0 0 229.12 0 512c0 226.56 146.56 417.92 350.08 485.76 25.6 4.48 35.2-10.88 35.2-24.32 0-12.16-.64-52.48-.64-95.36-128.64 23.68-161.92-31.36-172.16-60.16-5.76-14.72-30.72-60.16-52.48-72.32-17.92-9.6-43.52-33.28-.64-33.92 40.32-.64 69.12 37.12 78.72 52.48 46.08 77.44 119.68 55.68 149.12 42.24 4.48-33.28 17.92-55.68 32.64-68.48-113.92-12.8-232.96-56.96-232.96-252.8 0-55.68 19.84-101.76 52.48-137.6-5.12-12.8-23.04-65.28 5.12-135.68 0 0 42.88-13.44 140.8 52.48 40.96-11.52 84.48-17.28 128-17.28 43.52 0 87.04 5.76 128 17.28 97.92-66.56 140.8-52.48 140.8-52.48 28.16 70.4 10.24 122.88 5.12 135.68 32.64 35.84 52.48 81.28 52.48 137.6 0 196.48-119.68 240-233.6 252.8 18.56 16 34.56 46.72 34.56 94.72 0 68.48-.64 123.52-.64 140.8 0 13.44 9.6 29.44 35.2 24.32C877.44 929.92 1024 737.92 1024 512 1024 229.12 794.88 0 512 0z"/></svg>
</button>
          </div>
      </div>
    </div>

<!---->  </div>
</div>

  

<div class="container mx-auto lg:max-w-screen-lg px-3 md:px-6 py-6 md:py-10">
  <div class="flex items-center justify-between" data-test-track-header>
  <div class="flex-grow">
    <div class="flex items-center justify-between mb-1 md:mb-3">
      <h1 class="text-3xl md:text-5xl text-gray-800 dark:text-gray-50 font-bold tracking-tighter">
        Master
        PHP.
      </h1>
      <div class="flex md:hidden h-12 w-12 flex-shrink-0">
          <img alt="PHP" src="/assets/a5c58613732f41f3b906.svg" class="dark:opacity-90">

      </div>
    </div>

    <p class="text-gray-600 dark:text-gray-400 mb-3 max-w-2xl text-base md:text-lg" data-test-track-header-description>
      <p>PHP mastery exercises. Become your team's resident PHP expert.</p>
    </p>

    <div class="flex items-center gap-3 flex-wrap">
<!---->
      <div class="flex items-center gap-x-1.5 flex-shrink-0">
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 fill-current text-gray-400 dark:text-gray-500"><path fill-rule="evenodd" d="M2 5a2 2 0 012-2h12a2 2 0 012 2v10a2 2 0 01-2 2H4a2 2 0 01-2-2V5zm3.293 1.293a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 01-1.414-1.414L7.586 10 5.293 7.707a1 1 0 010-1.414zM11 12a1 1 0 100 2h3a1 1 0 100-2h-3z" clip-rule="evenodd"/></svg>
  <span class="text-sm text-gray-500 dark:text-gray-400">170 exercises</span>
</div>
    </div>

        <div class="flex items-center flex-wrap gap-x-2 gap-y-4 mt-5">
          <button class="inline-block border
    
    
    
    px-4 py-3
    rounded shadow-sm font-semibold
    
    
    
    text-lg
     bg-teal-500 dark:bg-teal-600 hover:bg-teal-600 dark:hover:bg-teal-500 dark:border-teal-600 dark:hover:border-teal-500 border-teal-500 hover:border-teal-600 text-white dark:text-gray-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-teal-500 mr-2 flex items-center" data-test-primary-start-track-button type="button">
  
  
    <svg viewBox="0 0 1024 1024" fill="currentColor" xmlns="http://www.w3.org/2000/svg" class="fill-current w-5 transform transition-all mr-2"><path fill-rule="evenodd" clip-rule="evenodd" d="M512 0C229.12 0 0 229.12 0 512c0 226.56 146.56 417.92 350.08 485.76 25.6 4.48 35.2-10.88 35.2-24.32 0-12.16-.64-52.48-.64-95.36-128.64 23.68-161.92-31.36-172.16-60.16-5.76-14.72-30.72-60.16-52.48-72.32-17.92-9.6-43.52-33.28-.64-33.92 40.32-.64 69.12 37.12 78.72 52.48 46.08 77.44 119.68 55.68 149.12 42.24 4.48-33.28 17.92-55.68 32.64-68.48-113.92-12.8-232.96-56.96-232.96-252.8 0-55.68 19.84-101.76 52.48-137.6-5.12-12.8-23.04-65.28 5.12-135.68 0 0 42.88-13.44 140.8 52.48 40.96-11.52 84.48-17.28 128-17.28 43.52 0 87.04 5.76 128 17.28 97.92-66.56 140.8-52.48 140.8-52.48 28.16 70.4 10.24 122.88 5.12 135.68 32.64 35.84 52.48 81.28 52.48 137.6 0 196.48-119.68 240-233.6 252.8 18.56 16 34.56 46.72 34.56 94.72 0 68.48-.64 123.52-.64 140.8 0 13.44 9.6 29.44 35.2 24.32C877.44 929.92 1024 737.92 1024 512 1024 229.12 794.88 0 512 0z"/></svg>

  Start Learning

  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 ml-2 fill-current"><path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"/></svg>


</button>
        </div>
  </div>
  <div class="ml-4 hidden md:flex h-36 w-36 flex-shrink-0">
      <img alt="PHP" src="/assets/a5c58613732f41f3b906.svg" class="dark:opacity-90">

  </div>
</div>
</div>

<div class="h-px bg-gray-200 dark:bg-white/5 w-full"></div>

<div class="bg-white dark:bg-gray-850">
  <div class="container mx-auto lg:max-w-screen-lg px-3 md:px-6 py-6 md:py-10">
    <div class="flex items-start">
      <div class="flex-grow">
<!---->
        <div class="border-b pb-1 mb-4 flex">
          <div class="text-2xl font-semibold text-gray-800 dark:text-gray-200">
            PHP
            Challenges
          </div>
        </div>

        <div class="prose dark:prose-invert mb-4">
          <p>
            Put your
            PHP
            skills to the test. Practice by building popular open-source tools from scratch.
          </p>
        </div>

            <div class="bg-white dark:bg-gray-850 rounded-md shadow-sm border border-gray-200 dark:border-white/5 relative w-full group mb-4" data-test-track-page-card>
  <div class="p-4 md:p-6">
    <div class="flex items-center justify-between gap-3 mb-4">
      <div class="flex items-center flex-wrap gap-3">
        <div class="text-xl font-semibold text-gray-800 dark:text-gray-200 flex items-center
            " data-test-track-page-card-title>
          Build your own Shell
        </div>

<!---->
          
<!---->    
      </div>
      <div class="pl-4 flex-shrink-0">
          <img src="/assets/03333dfa4291958aaf17.svg" alt="Build your own Shell" class="w-8 transform scale-100 group-hover:scale-105 transition-all">
              </div>
    </div>

    
      <div class="leading-6 prose dark:prose-invert mb-4 pr-8">
        <p>A shell is a command-line interface that executes commands and manages processes. In this challenge, you'll build your own
<a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html">POSIX compliant</a> shell that's capable of interpreting
shell commands, running external programs and builtin commands like <code>cd</code>, <code>pwd</code>, <code>echo</code> and more.</p>
<p>Along the way, you'll learn about shell command parsing, REPLs, builtin commands, and more.</p>
      </div>

      <div class="h-60 overflow-hidden">
        <div>
    <a id="ember2635" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/oo8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Print a prompt
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Very easy</span>
  <div class="flex items-end">
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2636" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take &lt; 5 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2637" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2638" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/cz2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Handle invalid commands
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2639" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2640" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2641" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/ff0">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        REPL
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2642" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2643" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2644" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/pn5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The exit builtin
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2645" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2646" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2647" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/iz3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The echo builtin
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2648" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2649" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2650" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/ez5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The type builtin: builtins
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2651" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2652" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2653" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/mg5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The type builtin: executable files
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2654" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2655" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2656" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/ip1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Run a program
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2657" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2658" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>

    <h3 class="font-semibold text-gray-600 dark:text-gray-400 text-center text-sm relative my-3">
      <span class="block h-px w-full bg-gray-200 dark:bg-white/5 absolute top-50-percent -mt-px"></span>
      <span class="relative px-6 bg-white dark:bg-gray-850">Navigation</span>
    </h3>

      <a id="ember2659" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/ei0">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The pwd builtin
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2660" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2661" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2662" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/ra6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The cd builtin: Absolute paths
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2663" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2664" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2665" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/gq9">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The cd builtin: Relative paths
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2666" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2667" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2668" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/gp4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The cd builtin: Home directory
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2669" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2670" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <h3 class="font-semibold text-gray-600 dark:text-gray-400 text-center text-sm relative my-3">
      <span class="block h-px w-full bg-gray-200 dark:bg-white/5 absolute top-50-percent -mt-px"></span>
      <span class="relative px-6 bg-white dark:bg-gray-850">Quoting</span>
    </h3>

      <a id="ember2671" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/ni6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Single quotes
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2672" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2673" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2674" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/tg6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Double quotes
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2675" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2676" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2677" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/yt5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Backslash outside quotes
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2678" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2679" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2680" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/le5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Backslash within single quotes
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2681" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2682" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2683" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/gu3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Backslash within double quotes
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2684" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2685" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2686" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/qj0">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Executing a quoted executable
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2687" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2688" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <h3 class="font-semibold text-gray-600 dark:text-gray-400 text-center text-sm relative my-3">
      <span class="block h-px w-full bg-gray-200 dark:bg-white/5 absolute top-50-percent -mt-px"></span>
      <span class="relative px-6 bg-white dark:bg-gray-850">Redirection</span>
    </h3>

      <a id="ember2689" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/jv1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Redirect stdout
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2690" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2691" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2692" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/vz4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Redirect stderr
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2693" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2694" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2695" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/el9">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Append stdout
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2696" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2697" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2698" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/un3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Append stderr
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2699" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2700" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <h3 class="font-semibold text-gray-600 dark:text-gray-400 text-center text-sm relative my-3">
      <span class="block h-px w-full bg-gray-200 dark:bg-white/5 absolute top-50-percent -mt-px"></span>
      <span class="relative px-6 bg-white dark:bg-gray-850">Autocompletion</span>
    </h3>

      <a id="ember2701" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/qp2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Builtin completion
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2702" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2703" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2704" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/gm9">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Completion with arguments
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2705" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2706" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2707" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/qm8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Missing completions
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2708" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2709" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2710" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/gy5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Executable completion
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2711" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2712" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2713" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/wh6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Multiple completions
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2714" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2715" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2716" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/shell/stages/wt6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Partial completions
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2717" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2718" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
</div>

        <div class="absolute top-20 bottom-0 left-0 right-0 vertical-mask dark:vertical-mask-gray-850 rounded-b-md p-4 flex items-end justify-center">
          <button class="bg-gray-200 dark:bg-gray-800 hover:bg-gray-300 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 transition-colors px-4 py-5 text-sm rounded flex flex-col items-center w-full group" data-test-start-track-button type="button">
  <div class="font-bold flex items-center sm:mb-0">
    Signup to preview full module
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 ml-2 fill-current"><path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"/></svg>
  </div>
</button>
        </div>
      </div>
    
  </div>
</div>

    <div class="bg-white dark:bg-gray-850 rounded-md shadow-sm border border-gray-200 dark:border-white/5 relative w-full group mb-4" data-test-track-page-card>
  <div class="p-4 md:p-6">
    <div class="flex items-center justify-between gap-3 mb-4">
      <div class="flex items-center flex-wrap gap-3">
        <div class="text-xl font-semibold text-gray-800 dark:text-gray-200 flex items-center
            " data-test-track-page-card-title>
          Build your own grep
        </div>

<!---->
          
<!---->    
      </div>
      <div class="pl-4 flex-shrink-0">
          <img src="/assets/109ec0e55ebb85412952.svg" alt="Build your own grep" class="w-8 transform scale-100 group-hover:scale-105 transition-all">
              </div>
    </div>

    
      <div class="leading-6 prose dark:prose-invert mb-4 pr-8">
        <p>Learn about regular expressions and how they're evaluated. Implement your own version of <code>grep</code> in PHP.</p>
      </div>

      <div class="h-60 overflow-hidden">
        <div>
    <a id="ember2719" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/cq2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Match a literal character
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Very easy</span>
  <div class="flex items-end">
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2720" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take &lt; 5 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2721" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2722" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/oq2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Match digits
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Very easy</span>
  <div class="flex items-end">
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2723" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take &lt; 5 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2724" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2725" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/mr9">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Match alphanumeric characters
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Very easy</span>
  <div class="flex items-end">
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2726" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take &lt; 5 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2727" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2728" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/tl6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Positive Character Groups
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2729" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2730" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2731" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/rk3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Negative Character Groups
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2732" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2733" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2734" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/sh9">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Combining Character Classes
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2735" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2736" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2737" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/rr8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Start of string anchor
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2738" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2739" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2740" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/ao7">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        End of string anchor
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2741" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2742" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2743" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/fz7">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Match one or more times
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2744" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2745" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2746" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/ny8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Match zero or one times
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2747" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2748" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2749" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/zb3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Wildcard
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2750" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2751" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2752" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/zm7">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Alternation
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2753" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2754" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>

    <h3 class="font-semibold text-gray-600 dark:text-gray-400 text-center text-sm relative my-3">
      <span class="block h-px w-full bg-gray-200 dark:bg-white/5 absolute top-50-percent -mt-px"></span>
      <span class="relative px-6 bg-white dark:bg-gray-850">Backreferences</span>
    </h3>

      <a id="ember2755" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/sb5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Single Backreference
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2756" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2757" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2758" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/tg1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Multiple Backreferences
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2759" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2760" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2761" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/grep/stages/xe5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Nested Backreferences
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2762" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2763" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
</div>

        <div class="absolute top-20 bottom-0 left-0 right-0 vertical-mask dark:vertical-mask-gray-850 rounded-b-md p-4 flex items-end justify-center">
          <button class="bg-gray-200 dark:bg-gray-800 hover:bg-gray-300 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 transition-colors px-4 py-5 text-sm rounded flex flex-col items-center w-full group" data-test-start-track-button type="button">
  <div class="font-bold flex items-center sm:mb-0">
    Signup to preview full module
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 ml-2 fill-current"><path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"/></svg>
  </div>
</button>
        </div>
      </div>
    
  </div>
</div>

    <div class="bg-white dark:bg-gray-850 rounded-md shadow-sm border border-gray-200 dark:border-white/5 relative w-full group mb-4" data-test-track-page-card>
  <div class="p-4 md:p-6">
    <div class="flex items-center justify-between gap-3 mb-4">
      <div class="flex items-center flex-wrap gap-3">
        <div class="text-xl font-semibold text-gray-800 dark:text-gray-200 flex items-center
            " data-test-track-page-card-title>
          Build your own Interpreter
        </div>

<!---->
          
<!---->    
      </div>
      <div class="pl-4 flex-shrink-0">
          <img src="/assets/c3c1cae0bd79e202e835.svg" alt="Build your own Interpreter" class="w-8 transform scale-100 group-hover:scale-105 transition-all">
              </div>
    </div>

    
      <div class="leading-6 prose dark:prose-invert mb-4 pr-8">
        <p>This challenge follows the book <a href="https://craftinginterpreters.com/">Crafting Interpreters</a> by Robert Nystrom.</p>
<p>In this challenge you'll build an interpreter for <a href="https://craftinginterpreters.com/the-lox-language.html">Lox</a>, a simple scripting
language. Along the way, you'll learn about tokenization, ASTs, tree-walk interpreters and more.</p>
<p>Before starting this challenge, make sure you've read the "Welcome" part of the book that contains these chapters:</p>
<ul>
<li><a href="https://craftinginterpreters.com/introduction.html">Introduction</a> (chapter 1)</li>
<li><a href="https://craftinginterpreters.com/a-map-of-the-territory.html">A Map of the Territory</a> (chapter 2)</li>
<li><a href="https://craftinginterpreters.com/the-lox-language.html">The Lox Language</a> (chapter 3)</li>
</ul>
<p>These chapters don't involve writing code, so they won't be covered in this challenge. This challenge will start
from chapter 4, <a href="https://craftinginterpreters.com/scanning.html">Scanning</a>.</p>
      </div>

      <div class="h-60 overflow-hidden">
        <div>
    <a id="ember2764" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/ry8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: Empty file
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Very easy</span>
  <div class="flex items-end">
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2765" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take &lt; 5 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2766" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2767" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/ol4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: Parentheses
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2768" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2769" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2770" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/oe8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: Braces
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2771" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2772" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2773" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/xc5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: Other single-character tokens
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2774" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2775" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2776" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/ea6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: Lexical errors
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2777" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2778" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2779" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/mp7">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: Assignment &amp; equality Operators
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2780" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2781" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2782" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/bu3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: Negation &amp; inequality operators
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2783" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2784" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2785" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/et2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: Relational operators
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2786" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2787" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2788" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/ml2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: Division operator &amp; comments
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2789" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2790" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2791" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/er2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: Whitespace
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2792" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2793" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2794" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/tz7">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: Multi-line errors
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2795" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2796" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2797" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/ue7">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: String literals
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2798" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2799" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2800" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/kj0">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: Number literals
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2801" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2802" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2803" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/ey7">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: Identifiers
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2804" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2805" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2806" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/pq5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scanning: Reserved words
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2807" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2808" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>

    <h3 class="font-semibold text-gray-600 dark:text-gray-400 text-center text-sm relative my-3">
      <span class="block h-px w-full bg-gray-200 dark:bg-white/5 absolute top-50-percent -mt-px"></span>
      <span class="relative px-6 bg-white dark:bg-gray-850">Parsing Expressions</span>
    </h3>

      <a id="ember2809" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/sc2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Booleans &amp; Nil
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2810" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2811" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2812" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/ra8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Number literals
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2813" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2814" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2815" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/th5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        String literals
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2816" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2817" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2818" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/xe6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Parentheses
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2819" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2820" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2821" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/mq1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Unary Operators
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2822" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2823" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2824" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/wa9">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Arithmetic operators (1/2)
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2825" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2826" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2827" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/yf2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Arithmetic operators (2/2)
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2828" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2829" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2830" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/uh4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Comparison operators
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2831" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2832" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2833" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/ht8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Equality operators
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2834" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2835" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2836" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/wz8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Syntactic errors
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2837" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2838" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <h3 class="font-semibold text-gray-600 dark:text-gray-400 text-center text-sm relative my-3">
      <span class="block h-px w-full bg-gray-200 dark:bg-white/5 absolute top-50-percent -mt-px"></span>
      <span class="relative px-6 bg-white dark:bg-gray-850">Evaluating Expressions</span>
    </h3>

      <a id="ember2839" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/iz6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Literals: Booleans &amp; Nil
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2840" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2841" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2842" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/lv1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Literals: Strings &amp; Numbers
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2843" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2844" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2845" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/oq9">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Parentheses
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2846" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2847" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2848" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/dc1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Unary Operators: Negation &amp; Not
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2849" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2850" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2851" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/bp3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Arithmetic Operators (1/2)
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2852" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2853" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2854" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/jy2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Arithmetic Operators (2/2)
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2855" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2856" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2857" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/jx8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        String Concatenation
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2858" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2859" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2860" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/et4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Relational Operators
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2861" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2862" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2863" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/hw7">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Equality Operators
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2864" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2865" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2866" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/gj9">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Runtime Errors: Unary Operators
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2867" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2868" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2869" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/yu6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Runtime Errors: Binary Operators (1/2)
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2870" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2871" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2872" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/cq1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Runtime Errors: Binary Operators (2/2)
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2873" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2874" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2875" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/ib5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Runtime Errors: Relational Operators
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2876" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2877" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <h3 class="font-semibold text-gray-600 dark:text-gray-400 text-center text-sm relative my-3">
      <span class="block h-px w-full bg-gray-200 dark:bg-white/5 absolute top-50-percent -mt-px"></span>
      <span class="relative px-6 bg-white dark:bg-gray-850">Statements &amp; State</span>
    </h3>

      <a id="ember2878" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/xy1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Print: Generate output
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2879" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2880" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2881" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/oe4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Print: Multiple statements
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2882" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2883" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2884" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/fi3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Expression statements
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2885" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2886" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2887" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/yg2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Variables: Declare variables
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2888" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2889" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2890" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/sv7">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Variables: Runtime Errors
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2891" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2892" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2893" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/bc1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Variables: Initialize variables
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2894" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2895" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2896" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/dw9">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Variables: Redeclare variables
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2897" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2898" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2899" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/pl3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Assignment operation
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2900" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2901" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2902" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/vr5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Block syntax
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2903" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2904" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2905" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/fb4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Scopes
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2906" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2907" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <h3 class="font-semibold text-gray-600 dark:text-gray-400 text-center text-sm relative my-3">
      <span class="block h-px w-full bg-gray-200 dark:bg-white/5 absolute top-50-percent -mt-px"></span>
      <span class="relative px-6 bg-white dark:bg-gray-850">Control Flow</span>
    </h3>

      <a id="ember2908" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/ne3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        If statements
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2909" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2910" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2911" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/st5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Else statements
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2912" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2913" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2914" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/fh8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Else-if statements
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2915" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2916" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2917" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/xj4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Nested if statements
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2918" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2919" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2920" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/wk8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Logical OR operator
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2921" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2922" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2923" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/jx4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Logical AND operator
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2924" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2925" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2926" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/qy3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        While statements
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2927" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2928" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2929" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/bw6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        For statements
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2930" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2931" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2932" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/vt1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Syntactic errors
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2933" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2934" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <h3 class="font-semibold text-gray-600 dark:text-gray-400 text-center text-sm relative my-3">
      <span class="block h-px w-full bg-gray-200 dark:bg-white/5 absolute top-50-percent -mt-px"></span>
      <span class="relative px-6 bg-white dark:bg-gray-850">Functions</span>
    </h3>

      <a id="ember2935" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/av4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Native functions
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2936" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2937" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2938" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/pg8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Functions without arguments
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2939" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2940" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2941" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/lb6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Functions with arguments
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2942" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2943" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2944" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/px4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Syntax errors
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2945" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2946" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2947" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/rd2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Return statements
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2948" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2949" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2950" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/ey3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Higher order functions
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2951" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2952" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2953" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/fj7">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Runtime errors
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2954" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2955" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2956" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/bz4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Function scope
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2957" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2958" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2959" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/interpreter/stages/gg6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Closures
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2960" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2961" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
</div>

        <div class="absolute top-20 bottom-0 left-0 right-0 vertical-mask dark:vertical-mask-gray-850 rounded-b-md p-4 flex items-end justify-center">
          <button class="bg-gray-200 dark:bg-gray-800 hover:bg-gray-300 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 transition-colors px-4 py-5 text-sm rounded flex flex-col items-center w-full group" data-test-start-track-button type="button">
  <div class="font-bold flex items-center sm:mb-0">
    Signup to preview full module
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 ml-2 fill-current"><path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"/></svg>
  </div>
</button>
        </div>
      </div>
    
  </div>
</div>

    <div class="bg-white dark:bg-gray-850 rounded-md shadow-sm border border-gray-200 dark:border-white/5 relative w-full group mb-4" data-test-track-page-card>
  <div class="p-4 md:p-6">
    <div class="flex items-center justify-between gap-3 mb-4">
      <div class="flex items-center flex-wrap gap-3">
        <div class="text-xl font-semibold text-gray-800 dark:text-gray-200 flex items-center
            " data-test-track-page-card-title>
          Build your own Redis
        </div>

<!---->
          
<!---->    
      </div>
      <div class="pl-4 flex-shrink-0">
          <img src="/assets/bb2e492a834d9f374909.svg" alt="Build your own Redis" class="w-8 transform scale-100 group-hover:scale-105 transition-all">
              </div>
    </div>

    
      <div class="leading-6 prose dark:prose-invert mb-4 pr-8">
        <p>Discover concurrent programming in PHP while also learning about TCP servers,
network programming, and the Redis Protocol.</p>
      </div>

      <div class="h-60 overflow-hidden">
        <div>
    <a id="ember2962" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/jm1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Bind to a port
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Very easy</span>
  <div class="flex items-end">
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2963" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take &lt; 5 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2964" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2965" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/rg2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Respond to PING
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2966" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2967" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2968" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/wy1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Respond to multiple PINGs
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2969" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2970" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2971" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/zu2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Handle concurrent clients
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2972" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2973" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2974" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/qq0">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Implement the ECHO command
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2975" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2976" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2977" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/la7">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Implement the SET &amp; GET commands
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2978" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2979" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <a id="ember2980" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/yz1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Expiry
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2981" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2982" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>

    <h3 class="font-semibold text-gray-600 dark:text-gray-400 text-center text-sm relative my-3">
      <span class="block h-px w-full bg-gray-200 dark:bg-white/5 absolute top-50-percent -mt-px"></span>
      <span class="relative px-6 bg-white dark:bg-gray-850">RDB Persistence</span>
    </h3>

      <a id="ember2983" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/zg5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        RDB file config
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2984" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2985" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2986" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/jz6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Read a key
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2987" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2988" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2989" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/gc6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Read a string value
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2990" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2991" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2992" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/jw4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Read multiple keys
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2993" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2994" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2995" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/dq3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Read multiple string values
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2996" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember2997" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember2998" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/sm4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Read value with expiry
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember2999" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3000" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <h3 class="font-semibold text-gray-600 dark:text-gray-400 text-center text-sm relative my-3">
      <span class="block h-px w-full bg-gray-200 dark:bg-white/5 absolute top-50-percent -mt-px"></span>
      <span class="relative px-6 bg-white dark:bg-gray-850">Replication</span>
    </h3>

      <a id="ember3001" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/bw1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Configure listening port
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3002" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3003" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3004" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/ye5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The INFO command
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3005" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3006" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3007" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/hc6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The INFO command on a replica
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3008" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3009" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3010" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/xc1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Initial Replication ID and Offset
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3011" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3012" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3013" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/gl7">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Send handshake (1/3)
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3014" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3015" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3016" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/eh4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Send handshake (2/3)
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3017" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3018" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3019" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/ju6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Send handshake (3/3)
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3020" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3021" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3022" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/fj0">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Receive handshake (1/2)
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3023" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3024" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3025" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/vm3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Receive handshake (2/2)
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3026" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3027" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3028" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/cf8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Empty RDB Transfer
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3029" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3030" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3031" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/zn8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Single-replica propagation
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3032" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3033" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3034" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/hd5">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Multi Replica Command Propagation
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3035" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3036" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3037" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/yg4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Command Processing
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3038" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3039" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3040" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/xv6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        ACKs with no commands
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3041" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3042" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3043" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/yd3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        ACKs with commands
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3044" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3045" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3046" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/my8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        WAIT with no replicas
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3047" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3048" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3049" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/tu8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        WAIT with no commands
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3050" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3051" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3052" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/na2">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        WAIT with multiple commands
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3053" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3054" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <h3 class="font-semibold text-gray-600 dark:text-gray-400 text-center text-sm relative my-3">
      <span class="block h-px w-full bg-gray-200 dark:bg-white/5 absolute top-50-percent -mt-px"></span>
      <span class="relative px-6 bg-white dark:bg-gray-850">Streams</span>
    </h3>

      <a id="ember3055" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/cc3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The TYPE command
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3056" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3057" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3058" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/cf6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Create a stream
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3059" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3060" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3061" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/hq8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Validating entry IDs
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3062" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3063" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3064" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/yh3">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Partially auto-generated IDs
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3065" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3066" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3067" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/xu6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Fully auto-generated IDs
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3068" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3069" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3070" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/zx1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Query entries from stream
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3071" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3072" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3073" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/yp1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Query with -
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3074" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3075" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3076" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/fs1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Query with +
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3077" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3078" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3079" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/um0">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Query single stream using XREAD
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3080" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3081" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3082" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/ru9">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Query multiple streams using XREAD
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3083" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3084" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3085" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/bs1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Blocking reads
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3086" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3087" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3088" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/hw1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Blocking reads without timeout
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3089" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3090" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3091" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/xu1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Blocking reads using $
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3092" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3093" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
    <h3 class="font-semibold text-gray-600 dark:text-gray-400 text-center text-sm relative my-3">
      <span class="block h-px w-full bg-gray-200 dark:bg-white/5 absolute top-50-percent -mt-px"></span>
      <span class="relative px-6 bg-white dark:bg-gray-850">Transactions</span>
    </h3>

      <a id="ember3094" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/si4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The INCR command (1/3)
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3095" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3096" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3097" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/lz8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The INCR command (2/3)
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3098" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3099" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3100" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/mk1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The INCR command (3/3)
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3101" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3102" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3103" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/pn0">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The MULTI command
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3104" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3105" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3106" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/lo4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The EXEC command
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3107" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3108" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3109" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/we1">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Empty transaction
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3110" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3111" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3112" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/rs9">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Queueing commands
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3113" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3114" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3115" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/fy6">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Executing a transaction
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-yellow-500">Hard</span>
  <div class="flex items-end">
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-yellow-500 dark:bg-yellow-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3116" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take more than 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3117" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3118" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/rl9">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        The DISCARD command
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Easy</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3119" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 5-10 minutes to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3120" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3121" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/sg9">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Failures within transactions
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3122" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3123" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
      <a id="ember3124" class="ember-view block hover:bg-gray-50 dark:hover:bg-gray-700/50 py-1.5 -mx-1.5 px-1.5 rounded" data-test-stage-list-item href="/courses/redis/stages/jf8">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <div class="w-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mr-2"></div>

      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 mr-2 text-gray-400 dark:text-gray-600"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>

      <div class="prose dark:prose-invert prose-sm">
        Multiple transactions
      </div>
    </div>

      <div class="pl-4 hidden sm:flex flex-shrink-0">
        <div class="text-gray-500 text-xs flex items-baseline gap-2" data-test-course-difficulty-label>
  <span class="leading-none uppercase font-semibold text-teal-500">Medium</span>
  <div class="flex items-end">
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.7em;"></div>
      <div class="bg-teal-500 dark:bg-teal-600" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 0.9em;"></div>
      <div class="bg-gray-300 dark:bg-gray-700/80" style="width: 4px; margin-right: 2px; border-radius: 1px; height: 1.1em;"></div>
  </div>
  <div id="ember3125" class="ember-tooltip-base ember-view">  <div>
        We'd expect a proficient developer to take 30 minutes to 1 hour to complete this stage.
  </div>
</div>
</div>
      </div>
  </div>

    <div id="ember3126" class="ember-tooltip-base ember-view">  <div>
        Login via GitHub to view this stage
  </div>
</div>
</a>
</div>

        <div class="absolute top-20 bottom-0 left-0 right-0 vertical-mask dark:vertical-mask-gray-850 rounded-b-md p-4 flex items-end justify-center">
          <button class="bg-gray-200 dark:bg-gray-800 hover:bg-gray-300 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 transition-colors px-4 py-5 text-sm rounded flex flex-col items-center w-full group" data-test-start-track-button type="button">
  <div class="font-bold flex items-center sm:mb-0">
    Signup to preview full module
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 ml-2 fill-current"><path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"/></svg>
  </div>
</button>
        </div>
      </div>
    
  </div>
</div>


<div class="bg-white dark:bg-gray-850 rounded-md shadow-sm border border-gray-200 dark:border-white/5 relative w-full group" data-test-track-page-card>
  <div class="p-4 md:p-6">
    <div class="flex items-center justify-between gap-3 mb-4">
      <div class="flex items-center flex-wrap gap-3">
        <div class="text-xl font-semibold text-gray-800 dark:text-gray-200 flex items-center
            " data-test-track-page-card-title>
          Many more to come...
        </div>

<!---->
<!---->      </div>
      <div class="pl-4 flex-shrink-0">
          <img src="/assets/a507484f6abd1a054666.png" alt="coming soon" class="w-8 transform scale-100 group-hover:scale-105 transition-all">
              </div>
    </div>

    
  <div class="leading-6 prose dark:prose-invert pb-4">
    We release new challenges based on user votes. Let us know what you'd like to see next!
  </div>

  <a id="ember3127" class="ember-view" href="/vote">
    <img src="/assets/6383fbe45ea3b6241662.png" alt="challenge voting" class="w-full mb-4 border">
  </a>

  <a id="ember3128" class="ember-view bg-gray-200 dark:bg-gray-800 hover:bg-gray-300 dark:hover:bg-gray-700 transition-colors px-4 py-5 text-gray-700 dark:text-gray-200 text-sm rounded mr-2 flex flex-col items-center w-full group" rel="noopener noreferrer" data-test-vote-on-upcoming-challenges-button href="/vote">
    <div class="font-bold flex items-center sm:mb-0">
      Vote on upcoming challenges
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 ml-2 fill-current"><path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"/></svg>
    </div>
  </a>

  </div>
</div>
      </div>

      <div class="hidden lg:block w-80 flex-shrink-0 sticky top-4 ml-2">
        <div data-test-track-leaderboard class="mb-6">
  <div class="flex items-center justify-between mb-2 pl-4">
    <div class="flex items-center">
      <span class="uppercase text-teal-500 dark:text-teal-600 text-xs font-bold">RECENT ACTIVITY</span>

      <span class="text-white dark:text-teal-400 bg-teal-500 dark:bg-teal-900 border border-teal-500 dark:border-teal-700 text-xs font-bold rounded px-1.5 py-0.5 ml-2
          opacity-0
          transition-all">
        0
      </span>
    </div>
    <div>
    </div>
  </div>

    <div>
        <a id="ember3129" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
        <a id="ember3130" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
        <a id="ember3131" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
        <a id="ember3132" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
        <a id="ember3133" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
        <a id="ember3134" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
        <a id="ember3135" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
        <a id="ember3136" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
        <a id="ember3137" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
        <a id="ember3138" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
        <a id="ember3139" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
        <a id="ember3140" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
        <a id="ember3141" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
        <a id="ember3142" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
        <a id="ember3143" class="ember-view flex items-center justify-between py-1.5 group/leaderboard-entry cursor-pointer pl-4 border-l-2
    border-transparent" data-test-leaderboard-entry href="/users/dummy">
  <div class="flex items-center min-w-0">
    <div class="mr-2 flex-shrink-0">
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-800 rounded"></div>
    </div>

        <span class="text-xs inline-block rounded bg-gray-200 dark:bg-gray-800 mr-2">                              </span>

      
  </div>
    <div class="flex items-center flex-shrink-0">
      <span class="mr-2 text-xs font-bold
          text-teal-500 dark:text-teal-600
          opacity-0
          group-hover/leaderboard-entry:opacity-100 transition-opacity" data-test-progress-text>
          <span class="inline-block bg-gray-200 dark:bg-gray-800">      </span>
      </span>
        <div class="w-12 h-3.5 rounded bg-gray-200 dark:bg-gray-800"></div>
    </div>
</a>
    </div>
</div>

        <div class="mx-4">
            <a href="https://github.com/anu294" class="block py-4 group" target="_blank" rel="noopener noreferrer">
  <span class="flex">
    <span class="flex flex-col items-center mr-3 px-1">
      <span class="w-px bg-gray-200 dark:bg-white/5 group-hover:bg-gray-300 dark:group-hover:bg-gray-700/60 flex-grow mb-2 transition-colors">
      </span>
      <span class="text-4xl text-indigo-400 dark:text-indigo-600 leading-none font-bold h-5">
        “
      </span>
      <span class="w-px bg-gray-200 dark:bg-white/5 group-hover:bg-gray-300 dark:group-hover:bg-gray-700/60 flex-grow mb-2 transition-colors">
      </span>
    </span>
    <span class="flex-grow flex flex-col">
      <span class="prose prose-sm dark:prose-invert mb-2 leading-relaxed flex-grow">
        There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!
      </span>
    </span>
  </span>
  <span class="flex items-start">
    <img alt="avatar" src="https://codecrafters.io/images/external/testimonials/oxta.jpeg" class="w-6 h-6 filter drop-shadow-sm ring-1 ring-white rounded-full shadow mr-3">
    <span class="block mt-0.5">
      <span class="block text-gray-700 dark:text-gray-300 group-hover:underline text-sm transition-colors font-bold mb-0.5">
        Ananthalakshmi Sankar
      </span>
      <span class="block text-gray-600 dark:text-gray-400 text-xs">
        Automation Engineer at Apple
      </span>
    </span>
  </span>
</a>
            <a href="https://github.com/Jumballaya" class="block py-4 group" target="_blank" rel="noopener noreferrer">
  <span class="flex">
    <span class="flex flex-col items-center mr-3 px-1">
      <span class="w-px bg-gray-200 dark:bg-white/5 group-hover:bg-gray-300 dark:group-hover:bg-gray-700/60 flex-grow mb-2 transition-colors">
      </span>
      <span class="text-4xl text-indigo-400 dark:text-indigo-600 leading-none font-bold h-5">
        “
      </span>
      <span class="w-px bg-gray-200 dark:bg-white/5 group-hover:bg-gray-300 dark:group-hover:bg-gray-700/60 flex-grow mb-2 transition-colors">
      </span>
    </span>
    <span class="flex-grow flex flex-col">
      <span class="prose prose-sm dark:prose-invert mb-2 leading-relaxed flex-grow">
        I think the instant feedback right there in the git push is really cool.
Didn't even know that was possible!
      </span>
    </span>
  </span>
  <span class="flex items-start">
    <img alt="avatar" src="https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg" class="w-6 h-6 filter drop-shadow-sm ring-1 ring-white rounded-full shadow mr-3">
    <span class="block mt-0.5">
      <span class="block text-gray-700 dark:text-gray-300 group-hover:underline text-sm transition-colors font-bold mb-0.5">
        Patrick Burris
      </span>
      <span class="block text-gray-600 dark:text-gray-400 text-xs">
        Senior Software Developer, CenturyLink
      </span>
    </span>
  </span>
</a>
        </div>
      </div>
    </div>
  </div>
</div>

  <div id="modal-backdrop-container">
  </div>

    <div class="bg-gray-900 border-t border-white/5">
  <footer aria-labelledby="footer-heading" class="container lg:max-w-screen-lg mx-auto">
    <h2 id="footer-heading" class="sr-only">Footer</h2>
    <div class="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:py-16 lg:px-8">
      <div class="xl:grid xl:grid-cols-3 xl:gap-8">
        <div class="space-y-8 xl:col-span-1">
          <a href="https://codecrafters.io" class="inline-flex" target="_blank" rel="noopener noreferrer">
            <img class="h-12" src="/assets/7408d202b2bb110054fc.svg" alt="CodeCrafters">
          </a>
          <p class="text-gray-300 text-base">
            Programming challenges for seasoned developers.
          </p>
          <div class="flex space-x-6">
            <a href="https://twitter.com/codecraftersio" class="text-gray-400 hover:text-gray-300">
              <span class="sr-only">Twitter</span>
              <svg class="h-6 w-6" fill="currentColor" viewbox="0 0 24 24" aria-hidden="true">
                <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path>
              </svg>
            </a>

            <a href="http://github.com/codecrafters-io" class="text-gray-400 hover:text-gray-300">
              <span class="sr-only">GitHub</span>
              <svg class="h-6 w-6" fill="currentColor" viewbox="0 0 24 24" aria-hidden="true">
                <path fill-rule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clip-rule="evenodd"></path>
              </svg>
            </a>
          </div>
        </div>
        <div class="mt-12 grid grid-cols-2
            md:grid-cols-4
            gap-x-8 gap-y-12 xl:mt-0 xl:col-span-2">
            <div>
              <h3 class="text-sm font-semibold text-gray-300 tracking-wider uppercase border-b-2 border-gray-600 inline-flex pb-1">
                Challenges
              </h3>
              <ul class="mt-4 space-y-4">
                  <li>
                    <a href="https://app.codecrafters.io/courses/git/overview" class="text-base text-gray-400 hover:text-gray-300" target="_blank" rel="noopener noreferrer">
                      Git
                    </a>
                  </li>
                  <li>
                    <a href="https://app.codecrafters.io/courses/redis/overview" class="text-base text-gray-400 hover:text-gray-300" target="_blank" rel="noopener noreferrer">
                      Redis
                    </a>
                  </li>
                  <li>
                    <a href="https://app.codecrafters.io/courses/shell/overview" class="text-base text-gray-400 hover:text-gray-300" target="_blank" rel="noopener noreferrer">
                      Shell
                    </a>
                  </li>
                  <li>
                    <a href="https://app.codecrafters.io/courses/sqlite/overview" class="text-base text-gray-400 hover:text-gray-300" target="_blank" rel="noopener noreferrer">
                      SQLite
                    </a>
                  </li>
                  <li>
                    <a href="https://app.codecrafters.io/courses/grep/overview" class="text-base text-gray-400 hover:text-gray-300" target="_blank" rel="noopener noreferrer">
                      Grep
                    </a>
                  </li>
                  <li>
                    <a href="https://app.codecrafters.io/courses/bittorrent/overview" class="text-base text-gray-400 hover:text-gray-300" target="_blank" rel="noopener noreferrer">
                      BitTorrent
                    </a>
                  </li>
                  <li>
                    <a href="https://app.codecrafters.io/courses/http-server/overview" class="text-base text-gray-400 hover:text-gray-300" target="_blank" rel="noopener noreferrer">
                      HTTP Server
                    </a>
                  </li>
                  <li>
                    <a href="https://app.codecrafters.io/courses/dns-server/overview" class="text-base text-gray-400 hover:text-gray-300" target="_blank" rel="noopener noreferrer">
                      DNS Server
                    </a>
                  </li>
              </ul>
            </div>
            <div>
              <h3 class="text-sm font-semibold text-gray-300 tracking-wider uppercase border-b-2 border-gray-600 inline-flex pb-1">
                Support
              </h3>
              <ul class="mt-4 space-y-4">
                  <li>
                    <a href="https://docs.codecrafters.io/" class="text-base text-gray-400 hover:text-gray-300" target="_blank" rel="noopener noreferrer">
                      Docs
                    </a>
                  </li>
                  <li>
                    <a href="https://status.codecrafters.io/" class="text-base text-gray-400 hover:text-gray-300" target="_blank" rel="noopener noreferrer">
                      Status
                    </a>
                  </li>
              </ul>
            </div>
            <div>
              <h3 class="text-sm font-semibold text-gray-300 tracking-wider uppercase border-b-2 border-gray-600 inline-flex pb-1">
                Company
              </h3>
              <ul class="mt-4 space-y-4">
                  <li>
                    <a href="https://codecrafters.io/about" class="text-base text-gray-400 hover:text-gray-300" target="_blank" rel="noopener noreferrer">
                      About
                    </a>
                  </li>
                  <li>
                    <a href="https://twitter.com/codecraftersio" class="text-base text-gray-400 hover:text-gray-300" target="_blank" rel="noopener noreferrer">
                      Changelog
                    </a>
                  </li>
              </ul>
            </div>
            <div>
              <h3 class="text-sm font-semibold text-gray-300 tracking-wider uppercase border-b-2 border-gray-600 inline-flex pb-1">
                Legal
              </h3>
              <ul class="mt-4 space-y-4">
                  <li>
                    <a href="https://codecrafters.io/terms" class="text-base text-gray-400 hover:text-gray-300" target="_blank" rel="noopener noreferrer">
                      Terms
                    </a>
                  </li>
                  <li>
                    <a href="https://codecrafters.io/privacy" class="text-base text-gray-400 hover:text-gray-300" target="_blank" rel="noopener noreferrer">
                      Privacy
                    </a>
                  </li>
              </ul>
            </div>
        </div>
      </div>
      <div class="mt-12 border-t border-white/5 pt-8">
        <p class="text-base text-gray-600 xl:text-center">
          © 2025 CodeCrafters, Inc. All rights reserved.
        </p>
      </div>
    </div>
  </footer>
</div>

    <div data-test-helpscout-beacon>
</div>
</div>

<div></div><script type="fastboot/shoebox" id="shoebox-application-serializer-data">[{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"courses","attributes":{"completion-percentage":30,"concept-slugs":[],"definition-repository-full-name":"codecrafters-io/build-your-own-docker","buildpacks-last-synced-at":"2025-03-01T20:28:06.968Z","description-markdown":"Docker is a tool used to build \u0026 run applications in containers. In this challenge, you'll build\nyour own Docker implementation that can pull an image from Docker Hub and execute commands in it.\n\nAlong the way, you'll learn about chroot, kernel namespaces, the Docker registry API and much more.","difficulty":"medium","forum-url":"https://forum.codecrafters.io/session/sso?return_path=/tag/challenge:docker","is-free-until":null,"name":"Build your own Docker","release-status":"deprecated","sample-extension-idea-description":"A Docker implementation that can build images from a Dockerfile","sample-extension-idea-title":"Build from Dockerfile","short-description":"Learn about kernel namespaces, chroot, the registry API and more","short-name":"Docker","tester-repository-full-name":"codecrafters-io/docker-tester","slug":"docker","testimonials":[{"link":"https://github.com/duaraghav8","text":"I spent a full day on your Docker building course and ended up building the whole thing myself. As a SRE (and\nmostly a user of docker), digging into the internals blew me away.","author_name":"Raghav Dua","author_avatar":"https://codecrafters.io/images/external/testimonials/raghav-dua.jpeg","author_description":"SRE, Coinbase"},{"link":"https://twitter.com/beyang","text":"CodeCrafters has you build your own version of things like Git and Docker from scratch. A cool way to build a stronger mental model of how those tools work.","author_name":"Beyang Liu","author_avatar":"https://codecrafters.io/images/external/testimonials/beyang-liu.jpeg","author_description":"CTO at SourceGraph"}]},"relationships":{"buildpacks":{},"extensions":{"data":[]},"language-configurations":{},"stages":{"data":[{"type":"course-stage","id":"4f167014-de09-4e22-b8b1-5c2939b9fe00","lid":"@lid:course-stage-4f167014-de09-4e22-b8b1-5c2939b9fe00"},{"type":"course-stage","id":"d1cb1e63-953b-49ba-a55a-bdebdd306ed1","lid":"@lid:course-stage-d1cb1e63-953b-49ba-a55a-bdebdd306ed1"},{"type":"course-stage","id":"4cd6af74-f3b7-4c28-acc4-36c2374ef327","lid":"@lid:course-stage-4cd6af74-f3b7-4c28-acc4-36c2374ef327"},{"type":"course-stage","id":"9bccfadb-dc95-4d48-967b-3716194034fc","lid":"@lid:course-stage-9bccfadb-dc95-4d48-967b-3716194034fc"},{"type":"course-stage","id":"b426ec06-703b-40a2-9162-3a7d6b774e29","lid":"@lid:course-stage-b426ec06-703b-40a2-9162-3a7d6b774e29"},{"type":"course-stage","id":"a6b6d762-e774-4927-b898-9935143c1c12","lid":"@lid:course-stage-a6b6d762-e774-4927-b898-9935143c1c12"}]}}},{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"courses","attributes":{"completion-percentage":15,"concept-slugs":[],"definition-repository-full-name":"codecrafters-io/build-your-own-kafka","buildpacks-last-synced-at":"2025-03-01T20:28:07.567Z","description-markdown":"Apache Kafka is a distributed event streaming platform often used for high-performance data pipelines. In this challenge, you'll build your own Kafka broker\nthat's capable of serving basic requests.\n\nAlong the way you'll learn about TCP servers, the Kafka wire protocol and more.","difficulty":"medium","forum-url":"https://forum.codecrafters.io/session/sso?return_path=/tag/challenge:kafka","is-free-until":null,"name":"Build your own Kafka","release-status":"beta","sample-extension-idea-description":"A Kafka broker that can read and write to disk","sample-extension-idea-title":"On Disk Storage","short-description":"Learn about TCP servers, the Kafka wire protocol and more.","short-name":"Kafka","tester-repository-full-name":"codecrafters-io/kafka-tester","slug":"kafka","testimonials":[{"link":"https://github.com/anu294","text":"There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!","author_name":"Ananthalakshmi Sankar","author_avatar":"https://codecrafters.io/images/external/testimonials/oxta.jpeg","author_description":"Automation Engineer at Apple"},{"link":"https://github.com/Jumballaya","text":"I think the instant feedback right there in the git push is really cool.\nDidn't even know that was possible!","author_name":"Patrick Burris","author_avatar":"https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg","author_description":"Senior Software Developer, CenturyLink"}]},"relationships":{"buildpacks":{},"extensions":{"data":[{"type":"course-extension","id":"6aca4b42-a35f-4de0-9b64-a0ea14e1ed3f","lid":"@lid:course-extension-6aca4b42-a35f-4de0-9b64-a0ea14e1ed3f"},{"type":"course-extension","id":"6c6adf94-6eb3-4b56-8ece-8373da2f79ff","lid":"@lid:course-extension-6c6adf94-6eb3-4b56-8ece-8373da2f79ff"},{"type":"course-extension","id":"9e679640-fee0-4cc9-92eb-db920fc58cb2","lid":"@lid:course-extension-9e679640-fee0-4cc9-92eb-db920fc58cb2"}]},"language-configurations":{},"stages":{"data":[{"type":"course-stage","id":"7a53a591-e78e-482a-8407-7b88642d177f","lid":"@lid:course-stage-7a53a591-e78e-482a-8407-7b88642d177f"},{"type":"course-stage","id":"74092537-aca9-4874-bb41-c794f5a34ba9","lid":"@lid:course-stage-74092537-aca9-4874-bb41-c794f5a34ba9"},{"type":"course-stage","id":"3d73e845-8740-4e1f-b472-8382f90ac5d6","lid":"@lid:course-stage-3d73e845-8740-4e1f-b472-8382f90ac5d6"},{"type":"course-stage","id":"ecddc9cd-f5e8-4dac-9311-e656e9ea253b","lid":"@lid:course-stage-ecddc9cd-f5e8-4dac-9311-e656e9ea253b"},{"type":"course-stage","id":"db0eb022-290f-4ddf-a2a9-1ee608a8b4c1","lid":"@lid:course-stage-db0eb022-290f-4ddf-a2a9-1ee608a8b4c1"},{"type":"course-stage","id":"dd9943cb-9488-4ebd-99e1-01497a3a392e","lid":"@lid:course-stage-dd9943cb-9488-4ebd-99e1-01497a3a392e"},{"type":"course-stage","id":"8d6a139d-737f-4d39-982d-5572cc640d72","lid":"@lid:course-stage-8d6a139d-737f-4d39-982d-5572cc640d72"},{"type":"course-stage","id":"b9d73488-25ab-4185-b91b-3b44f306a020","lid":"@lid:course-stage-b9d73488-25ab-4185-b91b-3b44f306a020"},{"type":"course-stage","id":"bc8e393f-7ebb-493f-a1e7-322025b85418","lid":"@lid:course-stage-bc8e393f-7ebb-493f-a1e7-322025b85418"},{"type":"course-stage","id":"ebdefcd8-9ce1-4cb2-8feb-afc36ef17141","lid":"@lid:course-stage-ebdefcd8-9ce1-4cb2-8feb-afc36ef17141"},{"type":"course-stage","id":"8d0966a7-2787-4991-9f0b-e3855ef0f1d6","lid":"@lid:course-stage-8d0966a7-2787-4991-9f0b-e3855ef0f1d6"},{"type":"course-stage","id":"671d79d4-06ca-41c2-8ab7-bd0008dece23","lid":"@lid:course-stage-671d79d4-06ca-41c2-8ab7-bd0008dece23"},{"type":"course-stage","id":"a842bdbb-b56f-4e65-8982-2430a29b9ad6","lid":"@lid:course-stage-a842bdbb-b56f-4e65-8982-2430a29b9ad6"},{"type":"course-stage","id":"1e9c0999-9e7d-46f0-9666-723f19ffeab1","lid":"@lid:course-stage-1e9c0999-9e7d-46f0-9666-723f19ffeab1"},{"type":"course-stage","id":"2085a8a3-76a5-44f0-a8ad-64ec725293eb","lid":"@lid:course-stage-2085a8a3-76a5-44f0-a8ad-64ec725293eb"},{"type":"course-stage","id":"5645f865-db07-4b4a-a762-ad52fc926eca","lid":"@lid:course-stage-5645f865-db07-4b4a-a762-ad52fc926eca"},{"type":"course-stage","id":"ceb912d9-0020-4feb-8c00-334bec44cd07","lid":"@lid:course-stage-ceb912d9-0020-4feb-8c00-334bec44cd07"},{"type":"course-stage","id":"687f106a-097b-4282-9b4f-67e446e86ed8","lid":"@lid:course-stage-687f106a-097b-4282-9b4f-67e446e86ed8"}]}}},{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"courses","attributes":{"completion-percentage":10,"concept-slugs":[],"definition-repository-full-name":"codecrafters-io/build-your-own-git","buildpacks-last-synced-at":"2025-03-01T20:28:08.222Z","description-markdown":"Git is a version control system used to track changes in source code. In this challenge, you'll build your own Git implementation that\nis capable of cloning a public repository from GitHub.\n\nAlong the way, you'll learn about the .git directory, Git objects, plumbing commands and more.","difficulty":"hard","forum-url":"https://forum.codecrafters.io/session/sso?return_path=/tag/challenge:git","is-free-until":null,"name":"Build your own Git","release-status":"live","sample-extension-idea-description":"A Git implementation that can push changes to a remote repository","sample-extension-idea-title":"Push to remote repository","short-description":"Learn about git objects, plumbing commands and more","short-name":"Git","tester-repository-full-name":"codecrafters-io/git-tester","slug":"git","testimonials":[{"link":"https://twitter.com/beyang/status/1271225214886506496","text":"Found out about CodeCrafters from a colleague. It's a tutorial site that has you build your own version of things\nlike Git and Docker from scratch. A cool way to build a stronger mental model of how those tools work.","author_name":"Beyang Liu","author_avatar":"https://codecrafters.io/images/external/testimonials/beyang-liu.jpeg","author_description":"CTO, Sourcegraph"},{"link":"https://www.reddit.com/r/programming/comments/fefrka/advanced_programming_challenges/fjoxu7n/","text":"Never in my life have I needed something so much and not known until I received it.","author_name":"Lacronicus","author_avatar":"https://codecrafters.io/images/external/testimonials/reddit-user.png","author_description":"Reddit user"}]},"relationships":{"buildpacks":{},"extensions":{"data":[]},"language-configurations":{},"stages":{"data":[{"type":"course-stage","id":"9a85afbe-73e1-420f-bacc-47486f9d04a9","lid":"@lid:course-stage-9a85afbe-73e1-420f-bacc-47486f9d04a9"},{"type":"course-stage","id":"918f829e-c076-4f9d-850c-478cad96965d","lid":"@lid:course-stage-918f829e-c076-4f9d-850c-478cad96965d"},{"type":"course-stage","id":"ae8a7540-0589-4ebd-8e23-926cf8e8be23","lid":"@lid:course-stage-ae8a7540-0589-4ebd-8e23-926cf8e8be23"},{"type":"course-stage","id":"61a5e563-76f4-4648-9733-a4d65b572d07","lid":"@lid:course-stage-61a5e563-76f4-4648-9733-a4d65b572d07"},{"type":"course-stage","id":"b593915f-656f-4892-ad3a-87c088b08968","lid":"@lid:course-stage-b593915f-656f-4892-ad3a-87c088b08968"},{"type":"course-stage","id":"b69e0f63-0786-475c-acd7-7c5a494b97ad","lid":"@lid:course-stage-b69e0f63-0786-475c-acd7-7c5a494b97ad"},{"type":"course-stage","id":"0fb86749-99ac-4d05-9a4d-628811d14a98","lid":"@lid:course-stage-0fb86749-99ac-4d05-9a4d-628811d14a98"}]}}},{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"courses","attributes":{"completion-percentage":15,"concept-slugs":["bencode"],"definition-repository-full-name":"codecrafters-io/build-your-own-bittorrent","buildpacks-last-synced-at":"2025-03-01T20:28:09.012Z","description-markdown":"BitTorrent is a peer-to-peer file sharing protocol used for distributing large amounts of data. In this challenge, you'll\nbuild a BitTorrent client that's capable of downloading a publicly available file using the BitTorrent protocol.\n\nAlong the way, you'll learn about the BitTorrent protocol, .torrent files more.","difficulty":"medium","forum-url":"https://forum.codecrafters.io/session/sso?return_path=/tag/challenge:bittorrent","is-free-until":null,"name":"Build your own BitTorrent","release-status":"live","sample-extension-idea-description":"A bittorrent client that can download a file by combining pieces from multiple peers","sample-extension-idea-title":"Multiple Peers","short-description":"Learn about .torrent files, the BitTorrent Peer Protocol and more","short-name":"BitTorrent","tester-repository-full-name":"codecrafters-io/bittorrent-tester","slug":"bittorrent","testimonials":[{"link":"https://github.com/anu294","text":"There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!","author_name":"Ananthalakshmi Sankar","author_avatar":"https://codecrafters.io/images/external/testimonials/oxta.jpeg","author_description":"Automation Engineer at Apple"},{"link":"https://github.com/Jumballaya","text":"I think the instant feedback right there in the git push is really cool.\nDidn't even know that was possible!","author_name":"Patrick Burris","author_avatar":"https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg","author_description":"Senior Software Developer, CenturyLink"}]},"relationships":{"buildpacks":{},"extensions":{"data":[{"type":"course-extension","id":"10113866-6af4-4e9c-b498-84217eb14864","lid":"@lid:course-extension-10113866-6af4-4e9c-b498-84217eb14864"}]},"language-configurations":{},"stages":{"data":[{"type":"course-stage","id":"44575f40-7c51-4af5-a008-92a83d73bd6a","lid":"@lid:course-stage-44575f40-7c51-4af5-a008-92a83d73bd6a"},{"type":"course-stage","id":"1ad5c4c0-d865-4858-835b-b0d781f2cb40","lid":"@lid:course-stage-1ad5c4c0-d865-4858-835b-b0d781f2cb40"},{"type":"course-stage","id":"8cd1efd2-bd2a-4080-af49-9c46c3b8a095","lid":"@lid:course-stage-8cd1efd2-bd2a-4080-af49-9c46c3b8a095"},{"type":"course-stage","id":"ec276239-df14-4b6d-9fcb-f69fa920bd05","lid":"@lid:course-stage-ec276239-df14-4b6d-9fcb-f69fa920bd05"},{"type":"course-stage","id":"8e8caf93-2ad9-4c4a-bbfb-ff04fcd782a6","lid":"@lid:course-stage-8e8caf93-2ad9-4c4a-bbfb-ff04fcd782a6"},{"type":"course-stage","id":"896bbd1c-9833-45f3-9879-c1d7bfb6d7da","lid":"@lid:course-stage-896bbd1c-9833-45f3-9879-c1d7bfb6d7da"},{"type":"course-stage","id":"b1e2f4f6-be98-4b0f-9f49-064ddefacb6f","lid":"@lid:course-stage-b1e2f4f6-be98-4b0f-9f49-064ddefacb6f"},{"type":"course-stage","id":"1b03efea-68e3-4157-819b-7c0ce59870c4","lid":"@lid:course-stage-1b03efea-68e3-4157-819b-7c0ce59870c4"},{"type":"course-stage","id":"4110e0c6-3bf2-4d2b-b2c1-0c5d5e4900eb","lid":"@lid:course-stage-4110e0c6-3bf2-4d2b-b2c1-0c5d5e4900eb"},{"type":"course-stage","id":"431daa27-68a9-4852-9a39-7833b1f465bb","lid":"@lid:course-stage-431daa27-68a9-4852-9a39-7833b1f465bb"},{"type":"course-stage","id":"e79deec9-971f-424f-8581-5c8aaf170e80","lid":"@lid:course-stage-e79deec9-971f-424f-8581-5c8aaf170e80"},{"type":"course-stage","id":"4ee2eb6b-8402-4344-996b-fb73f1c24afb","lid":"@lid:course-stage-4ee2eb6b-8402-4344-996b-fb73f1c24afb"},{"type":"course-stage","id":"6d8bdfa9-c757-4340-8f25-83da05d95e72","lid":"@lid:course-stage-6d8bdfa9-c757-4340-8f25-83da05d95e72"},{"type":"course-stage","id":"f3bd7a23-f379-493e-8b11-62916b5cbdb7","lid":"@lid:course-stage-f3bd7a23-f379-493e-8b11-62916b5cbdb7"},{"type":"course-stage","id":"87390e2c-2dfa-4128-ac1a-8f2265f9ce9e","lid":"@lid:course-stage-87390e2c-2dfa-4128-ac1a-8f2265f9ce9e"},{"type":"course-stage","id":"2237fd98-cf05-4d66-b0ba-5f66d8808a09","lid":"@lid:course-stage-2237fd98-cf05-4d66-b0ba-5f66d8808a09"},{"type":"course-stage","id":"033192e2-47a9-41fa-a4d4-a2a96aa0d36a","lid":"@lid:course-stage-033192e2-47a9-41fa-a4d4-a2a96aa0d36a"},{"type":"course-stage","id":"ed9b114e-6bf8-4bf0-bcc9-9fd70db0e90f","lid":"@lid:course-stage-ed9b114e-6bf8-4bf0-bcc9-9fd70db0e90f"},{"type":"course-stage","id":"ae525d04-d1b6-4920-b762-581db14179f1","lid":"@lid:course-stage-ae525d04-d1b6-4920-b762-581db14179f1"}]}}},{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"courses","attributes":{"completion-percentage":15,"concept-slugs":[],"definition-repository-full-name":"codecrafters-io/build-your-own-dns-server","buildpacks-last-synced-at":"2025-03-01T20:28:09.629Z","description-markdown":"DNS is a protocol used to resolve domain names to IP addresses. In this challenge, you'll build a DNS server that's capable of responding to\nbasic DNS queries.\n\nAlong the way you'll learn about the DNS protocol, DNS packet format, DNS record types, UDP servers and more.","difficulty":"medium","forum-url":"https://forum.codecrafters.io/session/sso?return_path=/tag/challenge:dns-server","is-free-until":null,"name":"Build your own DNS server","release-status":"live","sample-extension-idea-description":"Extend the DNS protocol with different abilities","sample-extension-idea-title":"EDNS","short-description":"Learn about the DNS protocol, DNS record types and more.","short-name":"DNS Server","tester-repository-full-name":"codecrafters-io/dns-server-tester","slug":"dns-server","testimonials":[{"link":"https://github.com/anu294","text":"There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!","author_name":"Ananthalakshmi Sankar","author_avatar":"https://codecrafters.io/images/external/testimonials/oxta.jpeg","author_description":"Automation Engineer at Apple"},{"link":"https://github.com/Jumballaya","text":"I think the instant feedback right there in the git push is really cool.\nDidn't even know that was possible!","author_name":"Patrick Burris","author_avatar":"https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg","author_description":"Senior Software Developer, CenturyLink"}]},"relationships":{"buildpacks":{},"extensions":{"data":[]},"language-configurations":{},"stages":{"data":[{"type":"course-stage","id":"27186738-8845-4869-adcf-88f0f0af212c","lid":"@lid:course-stage-27186738-8845-4869-adcf-88f0f0af212c"},{"type":"course-stage","id":"4eef2c89-f29d-43f1-a520-34d937de2d65","lid":"@lid:course-stage-4eef2c89-f29d-43f1-a520-34d937de2d65"},{"type":"course-stage","id":"6d20f01e-0e4b-40d6-89cf-038f8c554ab6","lid":"@lid:course-stage-6d20f01e-0e4b-40d6-89cf-038f8c554ab6"},{"type":"course-stage","id":"1645fba8-5452-485b-a3a4-24d7053121c7","lid":"@lid:course-stage-1645fba8-5452-485b-a3a4-24d7053121c7"},{"type":"course-stage","id":"2a27a2ec-11e9-4353-b94e-5c2078d51d47","lid":"@lid:course-stage-2a27a2ec-11e9-4353-b94e-5c2078d51d47"},{"type":"course-stage","id":"bf60895b-40a9-4ff7-8f05-35d3db38866a","lid":"@lid:course-stage-bf60895b-40a9-4ff7-8f05-35d3db38866a"},{"type":"course-stage","id":"a3757d22-863c-4d52-9562-13a7f8234493","lid":"@lid:course-stage-a3757d22-863c-4d52-9562-13a7f8234493"},{"type":"course-stage","id":"00782ef5-fd3c-48ae-85ce-4eff2f61e144","lid":"@lid:course-stage-00782ef5-fd3c-48ae-85ce-4eff2f61e144"}]}}},{"id":"8e67269c-662e-4b7a-8148-8de9a380a6c1","type":"courses","attributes":{"completion-percentage":15,"concept-slugs":[],"definition-repository-full-name":"codecrafters-io/build-your-own-dummy","buildpacks-last-synced-at":"2025-03-01T20:28:09.987Z","description-markdown":"Add a description for your course here.","difficulty":"medium","forum-url":"https://forum.codecrafters.io/session/sso?return_path=/tag/challenge:dummy","is-free-until":null,"name":"Build your own Dummy","release-status":"alpha","sample-extension-idea-description":"A description for my course extension idea","sample-extension-idea-title":"My course extension idea","short-description":"Add a short description for your course here.","short-name":"dummy","tester-repository-full-name":"codecrafters-io/dummy-tester","slug":"dummy","testimonials":[{"link":"https://github.com/anu294","text":"There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!","author_name":"Ananthalakshmi Sankar","author_avatar":"https://codecrafters.io/images/external/testimonials/oxta.jpeg","author_description":"Automation Engineer at Apple"},{"link":"https://github.com/Jumballaya","text":"I think the instant feedback right there in the git push is really cool.\nDidn't even know that was possible!","author_name":"Patrick Burris","author_avatar":"https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg","author_description":"Senior Software Developer, CenturyLink"}]},"relationships":{"buildpacks":{},"extensions":{"data":[{"type":"course-extension","id":"8cde99f9-1434-4fc5-9dbb-66a94cd3fe7a","lid":"@lid:course-extension-8cde99f9-1434-4fc5-9dbb-66a94cd3fe7a"},{"type":"course-extension","id":"a52cac22-b58b-42fb-83f5-7b448218f3d5","lid":"@lid:course-extension-a52cac22-b58b-42fb-83f5-7b448218f3d5"}]},"language-configurations":{},"stages":{"data":[{"type":"course-stage","id":"37d0c197-a4b2-4301-83fb-61e1d0eb74f5","lid":"@lid:course-stage-37d0c197-a4b2-4301-83fb-61e1d0eb74f5"},{"type":"course-stage","id":"43ae77cf-a1d2-4b85-b6fe-03b3ea8f6356","lid":"@lid:course-stage-43ae77cf-a1d2-4b85-b6fe-03b3ea8f6356"},{"type":"course-stage","id":"4796f5d6-8ed0-4d70-bb98-350f59351756","lid":"@lid:course-stage-4796f5d6-8ed0-4d70-bb98-350f59351756"},{"type":"course-stage","id":"80cd8df0-7fe5-4eba-b347-5ae3697da297","lid":"@lid:course-stage-80cd8df0-7fe5-4eba-b347-5ae3697da297"},{"type":"course-stage","id":"8a6c9f93-64ce-4776-8f5a-0ddc51b1dfef","lid":"@lid:course-stage-8a6c9f93-64ce-4776-8f5a-0ddc51b1dfef"},{"type":"course-stage","id":"d13ac62b-6484-49d5-ae8d-cfe2b7a48b31","lid":"@lid:course-stage-d13ac62b-6484-49d5-ae8d-cfe2b7a48b31"}]}}},{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"courses","attributes":{"completion-percentage":10,"concept-slugs":["network-protocols","tcp-overview"],"definition-repository-full-name":"codecrafters-io/build-your-own-http-server","buildpacks-last-synced-at":"2025-03-01T20:28:10.315Z","description-markdown":"HTTP is the protocol that powers the web. In this challenge, you'll build a HTTP server that's\ncapable of handling simple GET/POST requests, serving files and handling multiple concurrent connections.\n\nAlong the way, we'll learn about TCP connections, HTTP headers, HTTP verbs, handling multiple connections and more.","difficulty":"easy","forum-url":"https://forum.codecrafters.io/session/sso?return_path=/tag/challenge:http-server","is-free-until":null,"name":"Build your own HTTP server","release-status":"live","sample-extension-idea-description":"A HTTP server that supports HTTP/1.1 pipelining","sample-extension-idea-title":"Pipelining","short-description":"Learn about TCP servers, the HTTP protocol and more","short-name":"HTTP server","tester-repository-full-name":"codecrafters-io/http-server-tester","slug":"http-server","testimonials":[{"link":"https://github.com/anu294","text":"There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!","author_name":"Ananthalakshmi Sankar","author_avatar":"https://codecrafters.io/images/external/testimonials/oxta.jpeg","author_description":"Automation Engineer at Apple"},{"link":"https://github.com/Jumballaya","text":"I think the instant feedback right there in the git push is really cool.\nDidn't even know that was possible!","author_name":"Patrick Burris","author_avatar":"https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg","author_description":"Senior Software Developer, CenturyLink"}]},"relationships":{"buildpacks":{},"extensions":{"data":[{"type":"course-extension","id":"1b473653-1c1a-4527-b463-f7d12506324b","lid":"@lid:course-extension-1b473653-1c1a-4527-b463-f7d12506324b"}]},"language-configurations":{},"stages":{"data":[{"type":"course-stage","id":"93227e42-c01a-4f76-b695-e08ed1766098","lid":"@lid:course-stage-93227e42-c01a-4f76-b695-e08ed1766098"},{"type":"course-stage","id":"0bed6e74-a5c4-4a9c-865e-05b9727aa26b","lid":"@lid:course-stage-0bed6e74-a5c4-4a9c-865e-05b9727aa26b"},{"type":"course-stage","id":"08a4cbe3-ade9-432b-81ca-86d8100c1112","lid":"@lid:course-stage-08a4cbe3-ade9-432b-81ca-86d8100c1112"},{"type":"course-stage","id":"12101161-f98f-4a29-9d3c-e69ddfa2592f","lid":"@lid:course-stage-12101161-f98f-4a29-9d3c-e69ddfa2592f"},{"type":"course-stage","id":"633db1ac-f403-4e67-a652-e517c93d8cb4","lid":"@lid:course-stage-633db1ac-f403-4e67-a652-e517c93d8cb4"},{"type":"course-stage","id":"c35d310b-7528-4b81-ac3c-733961862f97","lid":"@lid:course-stage-c35d310b-7528-4b81-ac3c-733961862f97"},{"type":"course-stage","id":"9bfa62f1-e8d2-4cfa-a2a5-6f6e2a382c4b","lid":"@lid:course-stage-9bfa62f1-e8d2-4cfa-a2a5-6f6e2a382c4b"},{"type":"course-stage","id":"5e680a24-f897-4ec3-b54c-cdeee60bd6c8","lid":"@lid:course-stage-5e680a24-f897-4ec3-b54c-cdeee60bd6c8"},{"type":"course-stage","id":"dfdb295f-740c-4b47-b003-5eaa5ea67f9a","lid":"@lid:course-stage-dfdb295f-740c-4b47-b003-5eaa5ea67f9a"},{"type":"course-stage","id":"cf1fd68a-413c-4cde-be00-23b7b830eabf","lid":"@lid:course-stage-cf1fd68a-413c-4cde-be00-23b7b830eabf"},{"type":"course-stage","id":"f4cd9aa0-97d7-4755-86d0-a0d8d40ba1f4","lid":"@lid:course-stage-f4cd9aa0-97d7-4755-86d0-a0d8d40ba1f4"}]}}},{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"courses","attributes":{"completion-percentage":5,"concept-slugs":[],"definition-repository-full-name":"codecrafters-io/build-your-own-sqlite","buildpacks-last-synced-at":"2025-03-01T20:28:10.823Z","description-markdown":"SQLite is a popular SQL database engine. In this challenge, you'll build your own version of SQLite\nthat is capable of reading a SQLite database file and answering basic SQL queries like SELECT and using indexes.\n\nAlong the way, you'll learn about the SQLite file format, SQL syntax and more.","difficulty":"hard","forum-url":"https://forum.codecrafters.io/session/sso?return_path=/tag/challenge:sqlite","is-free-until":null,"name":"Build your own SQLite","release-status":"live","sample-extension-idea-description":"A SQLite implementation that can handle atomic transactions using a write-ahead log (WAL) file","sample-extension-idea-title":"Transactions","short-description":"Learn about SQL syntax, SQLite's file format, B-trees and more","short-name":"SQLite","tester-repository-full-name":"codecrafters-io/sqlite-tester","slug":"sqlite","testimonials":[{"link":"https://github.com/anu294","text":"There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!","author_name":"Ananthalakshmi Sankar","author_avatar":"https://codecrafters.io/images/external/testimonials/oxta.jpeg","author_description":"Automation Team, Apple"},{"link":"https://github.com/betterclever","text":"Enjoying programming all over again. It's been a while since I wrote Rust, but getting a good hang of it.","author_name":"Pranjal Paliwal","author_avatar":"https://codecrafters.io/images/external/testimonials/pranjal-paliwal.jpeg","author_description":"Software Engineer, Headout"}]},"relationships":{"buildpacks":{},"extensions":{"data":[]},"language-configurations":{},"stages":{"data":[{"type":"course-stage","id":"9c892c0d-a453-4c67-91ba-0467bf599386","lid":"@lid:course-stage-9c892c0d-a453-4c67-91ba-0467bf599386"},{"type":"course-stage","id":"6004e582-58db-4b5b-8420-39e656513fdf","lid":"@lid:course-stage-6004e582-58db-4b5b-8420-39e656513fdf"},{"type":"course-stage","id":"51f1fbee-25d8-461a-8f83-5ea473582afa","lid":"@lid:course-stage-51f1fbee-25d8-461a-8f83-5ea473582afa"},{"type":"course-stage","id":"483df487-5941-42e3-818e-8929cf597ed3","lid":"@lid:course-stage-483df487-5941-42e3-818e-8929cf597ed3"},{"type":"course-stage","id":"65fb746e-bda3-486a-b7cf-1423f65e8f68","lid":"@lid:course-stage-65fb746e-bda3-486a-b7cf-1423f65e8f68"},{"type":"course-stage","id":"5cf1c981-6d20-4a6f-bce8-170c79098e40","lid":"@lid:course-stage-5cf1c981-6d20-4a6f-bce8-170c79098e40"},{"type":"course-stage","id":"e4514b6d-1ca4-42e1-b109-5ca3ebfe7de9","lid":"@lid:course-stage-e4514b6d-1ca4-42e1-b109-5ca3ebfe7de9"},{"type":"course-stage","id":"025c9f76-29f2-4a58-94e7-1e9f0438b8c8","lid":"@lid:course-stage-025c9f76-29f2-4a58-94e7-1e9f0438b8c8"},{"type":"course-stage","id":"232916bf-3e8e-4255-8941-5131389576dc","lid":"@lid:course-stage-232916bf-3e8e-4255-8941-5131389576dc"}]}}},{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"courses","attributes":{"completion-percentage":30,"concept-slugs":[],"definition-repository-full-name":"codecrafters-io/build-your-own-grep","buildpacks-last-synced-at":"2025-03-01T20:28:11.576Z","description-markdown":"Regular expressions (Regexes, for short) are patterns used to match character combinations in strings. In this\nchallenge you'll build your own implementation of grep, a CLI tool for searching using Regexes.\n\nAlong the way you'll learn about Regex syntax, character classes, quantifiers and more.","difficulty":"medium","forum-url":"https://forum.codecrafters.io/session/sso?return_path=/tag/challenge:grep","is-free-until":"2024-10-01T00:00:00.000Z","name":"Build your own grep","release-status":"live","sample-extension-idea-description":"A grep implementation that can handle lookahead assertions like x(?=y)","sample-extension-idea-title":"Lookahead assertions","short-description":"Learn about regex syntax: character classes, quantifiers and more","short-name":"grep","tester-repository-full-name":"codecrafters-io/grep-tester","slug":"grep","testimonials":[{"link":"https://github.com/anu294","text":"There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!","author_name":"Ananthalakshmi Sankar","author_avatar":"https://codecrafters.io/images/external/testimonials/oxta.jpeg","author_description":"Automation Engineer at Apple"},{"link":"https://github.com/Jumballaya","text":"I think the instant feedback right there in the git push is really cool.\nDidn't even know that was possible!","author_name":"Patrick Burris","author_avatar":"https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg","author_description":"Senior Software Developer, CenturyLink"}]},"relationships":{"buildpacks":{},"extensions":{"data":[{"type":"course-extension","id":"4f0a654e-9049-4370-a59f-59fad8723119","lid":"@lid:course-extension-4f0a654e-9049-4370-a59f-59fad8723119"}]},"language-configurations":{},"stages":{"data":[{"type":"course-stage","id":"aef8cfc2-3b69-4465-838d-ed35c77899e4","lid":"@lid:course-stage-aef8cfc2-3b69-4465-838d-ed35c77899e4"},{"type":"course-stage","id":"a731c89b-fd0e-441b-bfbd-b53ceebf2257","lid":"@lid:course-stage-a731c89b-fd0e-441b-bfbd-b53ceebf2257"},{"type":"course-stage","id":"bf84258c-f1f2-411a-8a98-0024cb24c76f","lid":"@lid:course-stage-bf84258c-f1f2-411a-8a98-0024cb24c76f"},{"type":"course-stage","id":"09580fee-1e2b-400e-840b-15bb9ed790eb","lid":"@lid:course-stage-09580fee-1e2b-400e-840b-15bb9ed790eb"},{"type":"course-stage","id":"15492e21-e35b-405d-a5b0-c4c029f00b14","lid":"@lid:course-stage-15492e21-e35b-405d-a5b0-c4c029f00b14"},{"type":"course-stage","id":"58c7438c-0409-4fe0-9427-78f95a07a999","lid":"@lid:course-stage-58c7438c-0409-4fe0-9427-78f95a07a999"},{"type":"course-stage","id":"cd5368fb-eadc-4647-a5c6-f6ca4a619054","lid":"@lid:course-stage-cd5368fb-eadc-4647-a5c6-f6ca4a619054"},{"type":"course-stage","id":"6dfccff1-2900-4c5f-8d36-ccd37326646a","lid":"@lid:course-stage-6dfccff1-2900-4c5f-8d36-ccd37326646a"},{"type":"course-stage","id":"7febb4fb-355a-4062-a633-6bc83aafb4f8","lid":"@lid:course-stage-7febb4fb-355a-4062-a633-6bc83aafb4f8"},{"type":"course-stage","id":"70c81bbf-9755-4ba5-84d5-2bbc334b2169","lid":"@lid:course-stage-70c81bbf-9755-4ba5-84d5-2bbc334b2169"},{"type":"course-stage","id":"7b9d6359-956b-4c58-ae92-357cc89af38a","lid":"@lid:course-stage-7b9d6359-956b-4c58-ae92-357cc89af38a"},{"type":"course-stage","id":"1231115b-c640-4926-8f37-55ace724e9aa","lid":"@lid:course-stage-1231115b-c640-4926-8f37-55ace724e9aa"},{"type":"course-stage","id":"d22153ba-934f-4887-ac31-a0063462128c","lid":"@lid:course-stage-d22153ba-934f-4887-ac31-a0063462128c"},{"type":"course-stage","id":"f2343fe1-384a-42f1-832e-98478002c327","lid":"@lid:course-stage-f2343fe1-384a-42f1-832e-98478002c327"},{"type":"course-stage","id":"fde512cd-02b1-4017-bf9a-cd7cfacb8802","lid":"@lid:course-stage-fde512cd-02b1-4017-bf9a-cd7cfacb8802"}]}}},{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"courses","attributes":{"completion-percentage":15,"concept-slugs":[],"definition-repository-full-name":"codecrafters-io/build-your-own-interpreter","buildpacks-last-synced-at":"2025-03-01T20:28:10.982Z","description-markdown":"This challenge follows the book [Crafting Interpreters](https://craftinginterpreters.com/) by Robert Nystrom.\n\nIn this challenge you'll build an interpreter for [Lox](https://craftinginterpreters.com/the-lox-language.html), a simple scripting\nlanguage. Along the way, you'll learn about tokenization, ASTs, tree-walk interpreters and more.\n\nBefore starting this challenge, make sure you've read the \"Welcome\" part of the book that contains these chapters:\n\n- [Introduction](https://craftinginterpreters.com/introduction.html) (chapter 1)\n- [A Map of the Territory](https://craftinginterpreters.com/a-map-of-the-territory.html) (chapter 2)\n- [The Lox Language](https://craftinginterpreters.com/the-lox-language.html) (chapter 3)\n\nThese chapters don't involve writing code, so they won't be covered in this challenge. This challenge will start\nfrom chapter 4, [Scanning](https://craftinginterpreters.com/scanning.html).","difficulty":"hard","forum-url":"https://forum.codecrafters.io/session/sso?return_path=/tag/challenge:interpreter","is-free-until":null,"name":"Build your own Interpreter","release-status":"beta","sample-extension-idea-description":"An interpreter that can handle control flow statements like if/else","sample-extension-idea-title":"Control flow","short-description":"Learn about tokenization, ASTs, tree-walk interpreters and more.","short-name":"Interpreter","tester-repository-full-name":"codecrafters-io/interpreter-tester","slug":"interpreter","testimonials":[{"link":"https://github.com/anu294","text":"There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!","author_name":"Ananthalakshmi Sankar","author_avatar":"https://codecrafters.io/images/external/testimonials/oxta.jpeg","author_description":"Automation Engineer at Apple"},{"link":"https://github.com/Jumballaya","text":"I think the instant feedback right there in the git push is really cool.\nDidn't even know that was possible!","author_name":"Patrick Burris","author_avatar":"https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg","author_description":"Senior Software Developer, CenturyLink"}]},"relationships":{"buildpacks":{},"extensions":{"data":[{"type":"course-extension","id":"3c3729ed-3dd7-45c9-ac5f-c225241761be","lid":"@lid:course-extension-3c3729ed-3dd7-45c9-ac5f-c225241761be"},{"type":"course-extension","id":"4cbdbae6-fa3c-42dd-a7a2-abd5e3d770cd","lid":"@lid:course-extension-4cbdbae6-fa3c-42dd-a7a2-abd5e3d770cd"},{"type":"course-extension","id":"1e3b5860-d940-436f-9201-d306ec0085b3","lid":"@lid:course-extension-1e3b5860-d940-436f-9201-d306ec0085b3"},{"type":"course-extension","id":"bac5b515-da6d-4173-a650-794b1421fbe7","lid":"@lid:course-extension-bac5b515-da6d-4173-a650-794b1421fbe7"},{"type":"course-extension","id":"be3ed61b-b800-4615-9408-91d6cf60bb85","lid":"@lid:course-extension-be3ed61b-b800-4615-9408-91d6cf60bb85"}]},"language-configurations":{},"stages":{"data":[{"type":"course-stage","id":"35aed5f1-4cf6-48dc-921b-3ac4bfec4b67","lid":"@lid:course-stage-35aed5f1-4cf6-48dc-921b-3ac4bfec4b67"},{"type":"course-stage","id":"c7ed737c-ca5d-4219-acfe-673f7cf209a5","lid":"@lid:course-stage-c7ed737c-ca5d-4219-acfe-673f7cf209a5"},{"type":"course-stage","id":"b2f3b4c8-4b1e-4bfe-b468-92eeb33fac4f","lid":"@lid:course-stage-b2f3b4c8-4b1e-4bfe-b468-92eeb33fac4f"},{"type":"course-stage","id":"744d6391-37fa-465d-82d9-54b45995aa97","lid":"@lid:course-stage-744d6391-37fa-465d-82d9-54b45995aa97"},{"type":"course-stage","id":"40762972-17ae-4998-baaf-d253b45acf51","lid":"@lid:course-stage-40762972-17ae-4998-baaf-d253b45acf51"},{"type":"course-stage","id":"6a821bc0-e0d7-46ac-8845-aff582c16a05","lid":"@lid:course-stage-6a821bc0-e0d7-46ac-8845-aff582c16a05"},{"type":"course-stage","id":"4b1a33f4-0b34-43a5-8d7d-1ad632513729","lid":"@lid:course-stage-4b1a33f4-0b34-43a5-8d7d-1ad632513729"},{"type":"course-stage","id":"e1502ca2-784f-4804-9478-3b2c293cd2ca","lid":"@lid:course-stage-e1502ca2-784f-4804-9478-3b2c293cd2ca"},{"type":"course-stage","id":"6cab1a7d-77e4-4039-b320-e55407e00bc8","lid":"@lid:course-stage-6cab1a7d-77e4-4039-b320-e55407e00bc8"},{"type":"course-stage","id":"01a7704c-6368-459c-be9a-54cf31d82078","lid":"@lid:course-stage-01a7704c-6368-459c-be9a-54cf31d82078"},{"type":"course-stage","id":"c8348349-015e-4e3c-99b2-f266dee9bd6c","lid":"@lid:course-stage-c8348349-015e-4e3c-99b2-f266dee9bd6c"},{"type":"course-stage","id":"850181f4-2fd3-4edb-a733-660aee0689b1","lid":"@lid:course-stage-850181f4-2fd3-4edb-a733-660aee0689b1"},{"type":"course-stage","id":"681d5083-83e8-4141-9821-61d0515e879b","lid":"@lid:course-stage-681d5083-83e8-4141-9821-61d0515e879b"},{"type":"course-stage","id":"af56e9bc-7173-448b-a938-a8e6adc3cbc5","lid":"@lid:course-stage-af56e9bc-7173-448b-a938-a8e6adc3cbc5"},{"type":"course-stage","id":"73add769-2749-4329-8600-56ded13fa581","lid":"@lid:course-stage-73add769-2749-4329-8600-56ded13fa581"},{"type":"course-stage","id":"7ec79f14-dc3c-49ca-a7c1-5b70a03bbd5e","lid":"@lid:course-stage-7ec79f14-dc3c-49ca-a7c1-5b70a03bbd5e"},{"type":"course-stage","id":"120074d6-1fd8-4275-9f3a-4d08bf53d275","lid":"@lid:course-stage-120074d6-1fd8-4275-9f3a-4d08bf53d275"},{"type":"course-stage","id":"d26b12ba-11d1-477a-b2f1-d6653ace7b0c","lid":"@lid:course-stage-d26b12ba-11d1-477a-b2f1-d6653ace7b0c"},{"type":"course-stage","id":"757aafff-f07e-4c6c-979f-ad08db25c41f","lid":"@lid:course-stage-757aafff-f07e-4c6c-979f-ad08db25c41f"},{"type":"course-stage","id":"06d082f2-3f57-4887-9ac7-2e789984ed8d","lid":"@lid:course-stage-06d082f2-3f57-4887-9ac7-2e789984ed8d"},{"type":"course-stage","id":"54fb7e27-0480-42e0-8466-8d3a86e0381b","lid":"@lid:course-stage-54fb7e27-0480-42e0-8466-8d3a86e0381b"},{"type":"course-stage","id":"7384c95d-a1af-4908-a5c1-63dc0084c5cd","lid":"@lid:course-stage-7384c95d-a1af-4908-a5c1-63dc0084c5cd"},{"type":"course-stage","id":"93cab264-dbe3-449c-9be7-d366d58987f7","lid":"@lid:course-stage-93cab264-dbe3-449c-9be7-d366d58987f7"},{"type":"course-stage","id":"817629a6-3345-46bc-be8b-cbb014e5a2f8","lid":"@lid:course-stage-817629a6-3345-46bc-be8b-cbb014e5a2f8"},{"type":"course-stage","id":"9368ef25-0c1b-4a30-baec-61a6d36541a1","lid":"@lid:course-stage-9368ef25-0c1b-4a30-baec-61a6d36541a1"},{"type":"course-stage","id":"b6a920d1-fcb2-4e3d-8035-6c134dccb11d","lid":"@lid:course-stage-b6a920d1-fcb2-4e3d-8035-6c134dccb11d"},{"type":"course-stage","id":"d8d415fc-1fdd-4498-a6c8-9b931946fc96","lid":"@lid:course-stage-d8d415fc-1fdd-4498-a6c8-9b931946fc96"},{"type":"course-stage","id":"63846b5b-ac4a-4931-ba8d-748e4f7e99ac","lid":"@lid:course-stage-63846b5b-ac4a-4931-ba8d-748e4f7e99ac"},{"type":"course-stage","id":"8bebcfa3-5e1f-400b-a138-aa1d20d52900","lid":"@lid:course-stage-8bebcfa3-5e1f-400b-a138-aa1d20d52900"},{"type":"course-stage","id":"e306ad8c-eadf-4d11-9d6f-97881933b1ec","lid":"@lid:course-stage-e306ad8c-eadf-4d11-9d6f-97881933b1ec"},{"type":"course-stage","id":"91c62821-f965-4aa7-832c-dcb5bbac4f76","lid":"@lid:course-stage-91c62821-f965-4aa7-832c-dcb5bbac4f76"},{"type":"course-stage","id":"efce16f5-e004-41b2-9495-654ad01b5683","lid":"@lid:course-stage-efce16f5-e004-41b2-9495-654ad01b5683"},{"type":"course-stage","id":"13f81ffa-4aaa-4e16-96fe-c628b86ea98f","lid":"@lid:course-stage-13f81ffa-4aaa-4e16-96fe-c628b86ea98f"},{"type":"course-stage","id":"3693ac86-15d4-4220-8241-5ddc4ce025d0","lid":"@lid:course-stage-3693ac86-15d4-4220-8241-5ddc4ce025d0"},{"type":"course-stage","id":"78168317-6741-41f5-8b5c-ed35067f4c12","lid":"@lid:course-stage-78168317-6741-41f5-8b5c-ed35067f4c12"},{"type":"course-stage","id":"af25667e-a0c8-4010-b0db-d7117309d229","lid":"@lid:course-stage-af25667e-a0c8-4010-b0db-d7117309d229"},{"type":"course-stage","id":"7e136175-3456-400f-bba0-dca0e5d282b3","lid":"@lid:course-stage-7e136175-3456-400f-bba0-dca0e5d282b3"},{"type":"course-stage","id":"4ed9256c-96b4-4592-a852-e455b9345964","lid":"@lid:course-stage-4ed9256c-96b4-4592-a852-e455b9345964"},{"type":"course-stage","id":"44ae45b2-6396-4d5f-bc5b-a59624975e3f","lid":"@lid:course-stage-44ae45b2-6396-4d5f-bc5b-a59624975e3f"},{"type":"course-stage","id":"ff3d6363-0f8c-4464-aca2-9f520222f2b4","lid":"@lid:course-stage-ff3d6363-0f8c-4464-aca2-9f520222f2b4"},{"type":"course-stage","id":"32d005ce-2c9a-4e09-b1cc-f6a8923c89e3","lid":"@lid:course-stage-32d005ce-2c9a-4e09-b1cc-f6a8923c89e3"},{"type":"course-stage","id":"3d42afdc-e1e1-4085-b357-ee003faf22b5","lid":"@lid:course-stage-3d42afdc-e1e1-4085-b357-ee003faf22b5"},{"type":"course-stage","id":"02d11292-6464-4bc8-a62a-33e9aa34d021","lid":"@lid:course-stage-02d11292-6464-4bc8-a62a-33e9aa34d021"},{"type":"course-stage","id":"6fd2b856-1c43-4db9-958f-81c8ef7f4c9b","lid":"@lid:course-stage-6fd2b856-1c43-4db9-958f-81c8ef7f4c9b"},{"type":"course-stage","id":"0eb2bc5e-ec70-43bd-bdd9-43964bfa4134","lid":"@lid:course-stage-0eb2bc5e-ec70-43bd-bdd9-43964bfa4134"},{"type":"course-stage","id":"db75f7ae-340b-43a9-8976-051d7fa9d51f","lid":"@lid:course-stage-db75f7ae-340b-43a9-8976-051d7fa9d51f"},{"type":"course-stage","id":"f4ca754e-590a-4164-9def-acf4c472942d","lid":"@lid:course-stage-f4ca754e-590a-4164-9def-acf4c472942d"},{"type":"course-stage","id":"8fd30229-a668-48a4-8bf1-994ba3b6fa07","lid":"@lid:course-stage-8fd30229-a668-48a4-8bf1-994ba3b6fa07"},{"type":"course-stage","id":"fb60b12f-628e-45f0-9d65-8ecfaff2ebd3","lid":"@lid:course-stage-fb60b12f-628e-45f0-9d65-8ecfaff2ebd3"},{"type":"course-stage","id":"9a4b4e7e-58a4-43e2-bff6-5b10dfc1b99e","lid":"@lid:course-stage-9a4b4e7e-58a4-43e2-bff6-5b10dfc1b99e"},{"type":"course-stage","id":"d0f12aaf-c56f-4aa6-8783-784ee5131f3b","lid":"@lid:course-stage-d0f12aaf-c56f-4aa6-8783-784ee5131f3b"},{"type":"course-stage","id":"53d9b650-90c0-4e73-a269-f5f07c2d5bdd","lid":"@lid:course-stage-53d9b650-90c0-4e73-a269-f5f07c2d5bdd"},{"type":"course-stage","id":"7a71f3a9-e1b7-4d81-b34b-e3ead361486e","lid":"@lid:course-stage-7a71f3a9-e1b7-4d81-b34b-e3ead361486e"},{"type":"course-stage","id":"95e36860-64a7-40dc-8e04-f38662009006","lid":"@lid:course-stage-95e36860-64a7-40dc-8e04-f38662009006"},{"type":"course-stage","id":"ab944750-28b0-4f90-a011-54787c46fc1e","lid":"@lid:course-stage-ab944750-28b0-4f90-a011-54787c46fc1e"},{"type":"course-stage","id":"8c5c4f27-e6bf-4d87-b526-de84f6f3c67e","lid":"@lid:course-stage-8c5c4f27-e6bf-4d87-b526-de84f6f3c67e"},{"type":"course-stage","id":"269d597c-f260-49da-8295-23bb3d98458c","lid":"@lid:course-stage-269d597c-f260-49da-8295-23bb3d98458c"},{"type":"course-stage","id":"23ab6377-9d89-45fd-9451-8ec260f08a08","lid":"@lid:course-stage-23ab6377-9d89-45fd-9451-8ec260f08a08"},{"type":"course-stage","id":"5e36ee17-f2f3-4554-889f-38836e7db89c","lid":"@lid:course-stage-5e36ee17-f2f3-4554-889f-38836e7db89c"},{"type":"course-stage","id":"e9ab63ba-57ce-4cf2-b0f8-9a40e419942e","lid":"@lid:course-stage-e9ab63ba-57ce-4cf2-b0f8-9a40e419942e"},{"type":"course-stage","id":"11738472-e50d-4420-b2e9-52d02838430a","lid":"@lid:course-stage-11738472-e50d-4420-b2e9-52d02838430a"},{"type":"course-stage","id":"936153e1-58cb-4fd8-9f9c-cd1f27b01cc9","lid":"@lid:course-stage-936153e1-58cb-4fd8-9f9c-cd1f27b01cc9"},{"type":"course-stage","id":"abe1b058-5651-467a-a3d3-e4af22573f6d","lid":"@lid:course-stage-abe1b058-5651-467a-a3d3-e4af22573f6d"},{"type":"course-stage","id":"689c9a0b-0130-4878-9d05-68aa0e0df161","lid":"@lid:course-stage-689c9a0b-0130-4878-9d05-68aa0e0df161"},{"type":"course-stage","id":"0fcaec2e-ca62-4f1a-a9b9-5ce9b89922f6","lid":"@lid:course-stage-0fcaec2e-ca62-4f1a-a9b9-5ce9b89922f6"},{"type":"course-stage","id":"137e7e9e-daea-4848-9941-c4779d07b252","lid":"@lid:course-stage-137e7e9e-daea-4848-9941-c4779d07b252"}]}}},{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"courses","attributes":{"completion-percentage":30,"concept-slugs":["network-protocols","tcp-overview"],"definition-repository-full-name":"codecrafters-io/build-your-own-redis","buildpacks-last-synced-at":"2025-03-01T20:28:12.447Z","description-markdown":"Redis is an in-memory data structure store often used as a database, cache, message broker and streaming engine. In this challenge\nyou'll build your own Redis server that is capable of serving basic commands, reading RDB files and more.\n\nAlong the way, you'll learn about TCP servers, the Redis Protocol and more.","difficulty":"medium","forum-url":"https://forum.codecrafters.io/session/sso?return_path=/tag/challenge:redis","is-free-until":"2024-12-01T00:00:00.000Z","name":"Build your own Redis","release-status":"live","sample-extension-idea-description":"A Redis server that can read and write .rdb files","sample-extension-idea-title":"Persistence","short-description":"Learn about TCP servers, the Redis protocol and more","short-name":"Redis","tester-repository-full-name":"codecrafters-io/redis-tester","slug":"redis","testimonials":[{"link":"https://github.com/shaldengeki","text":"The Redis challenge was extremely fun. I ended up having to read the\nRedis Protocol specification doc pretty carefully in its entirety! The result\nfelt like lightly-guided independent study, if that makes sense. (Which, again, was lots of fun)","author_name":"Charles Guo","author_avatar":"https://codecrafters.io/images/external/testimonials/charles-guo.png","author_description":"Software Engineer, Stripe"},{"link":"https://github.com/Jumballaya","text":"I think the instant feedback right there in the git push is really cool.\nDidn't even know that was possible!","author_name":"Patrick Burris","author_avatar":"https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg","author_description":"Senior Software Developer, CenturyLink"}]},"relationships":{"buildpacks":{},"extensions":{"data":[{"type":"course-extension","id":"ba8bd309-d5c2-4cd8-bb02-6b807a3007f1","lid":"@lid:course-extension-ba8bd309-d5c2-4cd8-bb02-6b807a3007f1"},{"type":"course-extension","id":"814de3a8-3096-4ff2-a095-3c7321401203","lid":"@lid:course-extension-814de3a8-3096-4ff2-a095-3c7321401203"},{"type":"course-extension","id":"4741d8fa-a14e-4216-aff9-67fc565e80fd","lid":"@lid:course-extension-4741d8fa-a14e-4216-aff9-67fc565e80fd"},{"type":"course-extension","id":"f3799dc0-a8a2-436a-97a3-03dee6a3ef29","lid":"@lid:course-extension-f3799dc0-a8a2-436a-97a3-03dee6a3ef29"}]},"language-configurations":{},"stages":{"data":[{"type":"course-stage","id":"d957009e-11d3-49a0-a5e5-858764a804d6","lid":"@lid:course-stage-d957009e-11d3-49a0-a5e5-858764a804d6"},{"type":"course-stage","id":"d05f8785-6b11-4ee8-86dc-8bc68c1a8dfd","lid":"@lid:course-stage-d05f8785-6b11-4ee8-86dc-8bc68c1a8dfd"},{"type":"course-stage","id":"0cb57a50-22ff-4292-9c34-8b6a86a1ed2d","lid":"@lid:course-stage-0cb57a50-22ff-4292-9c34-8b6a86a1ed2d"},{"type":"course-stage","id":"e8014b7b-294f-4a32-8e01-abe1edd05a76","lid":"@lid:course-stage-e8014b7b-294f-4a32-8e01-abe1edd05a76"},{"type":"course-stage","id":"60597a54-c9a0-4236-b213-dbf13bac60e8","lid":"@lid:course-stage-60597a54-c9a0-4236-b213-dbf13bac60e8"},{"type":"course-stage","id":"50c19ea5-8e08-4aaf-9113-8d92414b68b5","lid":"@lid:course-stage-50c19ea5-8e08-4aaf-9113-8d92414b68b5"},{"type":"course-stage","id":"b93e1af8-d7eb-44da-9440-2a33fe920965","lid":"@lid:course-stage-b93e1af8-d7eb-44da-9440-2a33fe920965"},{"type":"course-stage","id":"0de30170-2ef7-4c8b-b6e9-8f20cf455b74","lid":"@lid:course-stage-0de30170-2ef7-4c8b-b6e9-8f20cf455b74"},{"type":"course-stage","id":"5865049b-3a9e-4901-b39e-997d7f946ae2","lid":"@lid:course-stage-5865049b-3a9e-4901-b39e-997d7f946ae2"},{"type":"course-stage","id":"c5812c56-12ef-4236-abc7-52e491ff96dd","lid":"@lid:course-stage-c5812c56-12ef-4236-abc7-52e491ff96dd"},{"type":"course-stage","id":"bcd70ccf-41b5-42db-87a3-e7b619336d3c","lid":"@lid:course-stage-bcd70ccf-41b5-42db-87a3-e7b619336d3c"},{"type":"course-stage","id":"be936dce-f863-4441-953a-cf4ba1b043d1","lid":"@lid:course-stage-be936dce-f863-4441-953a-cf4ba1b043d1"},{"type":"course-stage","id":"b78bedca-aa40-4682-b278-c4f65ec3fb57","lid":"@lid:course-stage-b78bedca-aa40-4682-b278-c4f65ec3fb57"},{"type":"course-stage","id":"18cfe18f-5f5a-483a-af2c-50510bfbb4b4","lid":"@lid:course-stage-18cfe18f-5f5a-483a-af2c-50510bfbb4b4"},{"type":"course-stage","id":"6bea003b-4417-4073-adbe-d94b5cd2aac5","lid":"@lid:course-stage-6bea003b-4417-4073-adbe-d94b5cd2aac5"},{"type":"course-stage","id":"eaa21f07-c13b-47a5-b365-0839d534377f","lid":"@lid:course-stage-eaa21f07-c13b-47a5-b365-0839d534377f"},{"type":"course-stage","id":"d781cafe-db04-4354-86e8-e78a761d0bf0","lid":"@lid:course-stage-d781cafe-db04-4354-86e8-e78a761d0bf0"},{"type":"course-stage","id":"21a54409-7e6e-420f-b16a-6e3323a0bc7f","lid":"@lid:course-stage-21a54409-7e6e-420f-b16a-6e3323a0bc7f"},{"type":"course-stage","id":"a33a85ce-472e-4ebf-a0fe-cef5fc0852df","lid":"@lid:course-stage-a33a85ce-472e-4ebf-a0fe-cef5fc0852df"},{"type":"course-stage","id":"2da8be61-1a94-44d6-8256-ed08eb3728a7","lid":"@lid:course-stage-2da8be61-1a94-44d6-8256-ed08eb3728a7"},{"type":"course-stage","id":"1f7c3b4e-1ae7-42d5-8a69-e6aeff2d80d4","lid":"@lid:course-stage-1f7c3b4e-1ae7-42d5-8a69-e6aeff2d80d4"},{"type":"course-stage","id":"f6f86066-6625-407c-9be6-b042512d4bbf","lid":"@lid:course-stage-f6f86066-6625-407c-9be6-b042512d4bbf"},{"type":"course-stage","id":"d9f4d7fc-fd07-48a6-929c-e464bc225354","lid":"@lid:course-stage-d9f4d7fc-fd07-48a6-929c-e464bc225354"},{"type":"course-stage","id":"a20d9772-2831-49a8-b7e6-19c0a0337c11","lid":"@lid:course-stage-a20d9772-2831-49a8-b7e6-19c0a0337c11"},{"type":"course-stage","id":"89567813-ac65-471e-91f3-63bccdbd604f","lid":"@lid:course-stage-89567813-ac65-471e-91f3-63bccdbd604f"},{"type":"course-stage","id":"0935950c-3566-4685-9eaf-6583cfef0f7c","lid":"@lid:course-stage-0935950c-3566-4685-9eaf-6583cfef0f7c"},{"type":"course-stage","id":"338ce517-2e10-40b7-b12b-39a0b385b913","lid":"@lid:course-stage-338ce517-2e10-40b7-b12b-39a0b385b913"},{"type":"course-stage","id":"604ad62c-3e30-4f13-bf7d-05e690417df8","lid":"@lid:course-stage-604ad62c-3e30-4f13-bf7d-05e690417df8"},{"type":"course-stage","id":"b158ca17-db53-41d6-8355-c8ea0448a884","lid":"@lid:course-stage-b158ca17-db53-41d6-8355-c8ea0448a884"},{"type":"course-stage","id":"8eebd154-e24d-454a-bac7-985f539083fb","lid":"@lid:course-stage-8eebd154-e24d-454a-bac7-985f539083fb"},{"type":"course-stage","id":"a44742f0-2121-4ae7-b68e-15bc04f13b19","lid":"@lid:course-stage-a44742f0-2121-4ae7-b68e-15bc04f13b19"},{"type":"course-stage","id":"8db3b652-eb27-4187-b94e-0be9b5141d86","lid":"@lid:course-stage-8db3b652-eb27-4187-b94e-0be9b5141d86"},{"type":"course-stage","id":"6eabe1cd-e995-4f62-b952-a5fc043c3f88","lid":"@lid:course-stage-6eabe1cd-e995-4f62-b952-a5fc043c3f88"},{"type":"course-stage","id":"34b20d69-c126-4413-a3ee-4c814954722e","lid":"@lid:course-stage-34b20d69-c126-4413-a3ee-4c814954722e"},{"type":"course-stage","id":"d657d1cf-863c-484c-b65d-6b6e0c0702a2","lid":"@lid:course-stage-d657d1cf-863c-484c-b65d-6b6e0c0702a2"},{"type":"course-stage","id":"883c5d03-9993-4a02-97e8-ca9497d28075","lid":"@lid:course-stage-883c5d03-9993-4a02-97e8-ca9497d28075"},{"type":"course-stage","id":"0ff525c9-ab49-4710-8a46-c1a3f4028a2a","lid":"@lid:course-stage-0ff525c9-ab49-4710-8a46-c1a3f4028a2a"},{"type":"course-stage","id":"b1a1b7bb-714f-45ec-83f5-db0c100ec4b7","lid":"@lid:course-stage-b1a1b7bb-714f-45ec-83f5-db0c100ec4b7"},{"type":"course-stage","id":"bddf03cf-4aed-453d-8739-b9f53467422f","lid":"@lid:course-stage-bddf03cf-4aed-453d-8739-b9f53467422f"},{"type":"course-stage","id":"59541572-db0e-43a7-9d38-20a7d73ea92d","lid":"@lid:course-stage-59541572-db0e-43a7-9d38-20a7d73ea92d"},{"type":"course-stage","id":"176a7596-6719-4a55-9b79-962a2e19724c","lid":"@lid:course-stage-176a7596-6719-4a55-9b79-962a2e19724c"},{"type":"course-stage","id":"ae4bf54a-e94a-4805-b84b-8ccbfdf61b68","lid":"@lid:course-stage-ae4bf54a-e94a-4805-b84b-8ccbfdf61b68"},{"type":"course-stage","id":"e5d80d93-9ac0-4323-ae7e-cb5cfd608e37","lid":"@lid:course-stage-e5d80d93-9ac0-4323-ae7e-cb5cfd608e37"},{"type":"course-stage","id":"aaa5c4e2-6c0f-476c-85fb-584ed3b8928a","lid":"@lid:course-stage-aaa5c4e2-6c0f-476c-85fb-584ed3b8928a"},{"type":"course-stage","id":"6ad8431c-23ca-46c4-96f4-1fe4f3a6d4ae","lid":"@lid:course-stage-6ad8431c-23ca-46c4-96f4-1fe4f3a6d4ae"},{"type":"course-stage","id":"f3de0274-6f5f-40d7-8b58-1333e621688e","lid":"@lid:course-stage-f3de0274-6f5f-40d7-8b58-1333e621688e"},{"type":"course-stage","id":"b9bbe556-b496-4fc3-9f82-907c3a55fb0b","lid":"@lid:course-stage-b9bbe556-b496-4fc3-9f82-907c3a55fb0b"},{"type":"course-stage","id":"7f3a1ea1-f4fd-4c2f-bf1e-af771ff45853","lid":"@lid:course-stage-7f3a1ea1-f4fd-4c2f-bf1e-af771ff45853"},{"type":"course-stage","id":"f91822d0-ab03-4403-9268-c9d48a7b6e97","lid":"@lid:course-stage-f91822d0-ab03-4403-9268-c9d48a7b6e97"},{"type":"course-stage","id":"25dd9fc7-854b-4315-ae2e-4cc0a8a79236","lid":"@lid:course-stage-25dd9fc7-854b-4315-ae2e-4cc0a8a79236"},{"type":"course-stage","id":"542dabff-e6cb-4e83-a477-05801529942f","lid":"@lid:course-stage-542dabff-e6cb-4e83-a477-05801529942f"},{"type":"course-stage","id":"88acdf40-bb92-4132-96cb-fedbe932062c","lid":"@lid:course-stage-88acdf40-bb92-4132-96cb-fedbe932062c"},{"type":"course-stage","id":"bb3515d5-3edb-4622-b506-a81efda09acc","lid":"@lid:course-stage-bb3515d5-3edb-4622-b506-a81efda09acc"},{"type":"course-stage","id":"c8a52a4f-a394-472a-ae36-7181a1c57960","lid":"@lid:course-stage-c8a52a4f-a394-472a-ae36-7181a1c57960"},{"type":"course-stage","id":"f14b0d2b-795a-4b1d-9fef-9670683ccdae","lid":"@lid:course-stage-f14b0d2b-795a-4b1d-9fef-9670683ccdae"}]}}},{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"courses","attributes":{"completion-percentage":20,"concept-slugs":[],"definition-repository-full-name":"codecrafters-io/build-your-own-shell","buildpacks-last-synced-at":"2025-03-01T20:28:11.670Z","description-markdown":"A shell is a command-line interface that executes commands and manages processes. In this challenge, you'll build your own\n[POSIX compliant](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html) shell that's capable of interpreting\nshell commands, running external programs and builtin commands like `cd`, `pwd`, `echo` and more.\n\nAlong the way, you'll learn about shell command parsing, REPLs, builtin commands, and more.","difficulty":"medium","forum-url":"https://forum.codecrafters.io/session/sso?return_path=/tag/challenge:shell","is-free-until":"2025-03-01T00:00:00.000Z","name":"Build your own Shell","release-status":"live","sample-extension-idea-description":"View and recall previously entered commands in your shell.","sample-extension-idea-title":"Command History","short-description":"Learn about parsing shell commands, executing programs and more","short-name":"Shell","tester-repository-full-name":"codecrafters-io/shell-tester","slug":"shell","testimonials":[{"link":"https://github.com/anu294","text":"There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!","author_name":"Ananthalakshmi Sankar","author_avatar":"https://codecrafters.io/images/external/testimonials/oxta.jpeg","author_description":"Automation Engineer at Apple"},{"link":"https://github.com/Jumballaya","text":"I think the instant feedback right there in the git push is really cool.\nDidn't even know that was possible!","author_name":"Patrick Burris","author_avatar":"https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg","author_description":"Senior Software Developer, CenturyLink"}]},"relationships":{"buildpacks":{},"extensions":{"data":[{"type":"course-extension","id":"c66ddbe5-12ab-4e2c-9353-5de9a7b03160","lid":"@lid:course-extension-c66ddbe5-12ab-4e2c-9353-5de9a7b03160"},{"type":"course-extension","id":"be1f220c-b43a-48cf-b0b0-386bbea71662","lid":"@lid:course-extension-be1f220c-b43a-48cf-b0b0-386bbea71662"},{"type":"course-extension","id":"27b68b47-adce-4f95-acd3-f69808028c20","lid":"@lid:course-extension-27b68b47-adce-4f95-acd3-f69808028c20"},{"type":"course-extension","id":"716e9542-39ad-4d2e-a33a-1e7aede0329b","lid":"@lid:course-extension-716e9542-39ad-4d2e-a33a-1e7aede0329b"}]},"language-configurations":{},"stages":{"data":[{"type":"course-stage","id":"670e833b-29b8-4dad-a80c-803958f69448","lid":"@lid:course-stage-670e833b-29b8-4dad-a80c-803958f69448"},{"type":"course-stage","id":"0f407462-65ab-4b98-bcbf-f6485cec1c0c","lid":"@lid:course-stage-0f407462-65ab-4b98-bcbf-f6485cec1c0c"},{"type":"course-stage","id":"bcdbfaee-0f0b-4b26-bbf4-c8abb56c7d75","lid":"@lid:course-stage-bcdbfaee-0f0b-4b26-bbf4-c8abb56c7d75"},{"type":"course-stage","id":"db1df452-05b2-44af-996b-bce58795e5f5","lid":"@lid:course-stage-db1df452-05b2-44af-996b-bce58795e5f5"},{"type":"course-stage","id":"b4caac0e-67b3-4e61-84b6-945d227757f1","lid":"@lid:course-stage-b4caac0e-67b3-4e61-84b6-945d227757f1"},{"type":"course-stage","id":"72003a6a-0bbb-45e9-b9a6-387962e78b77","lid":"@lid:course-stage-72003a6a-0bbb-45e9-b9a6-387962e78b77"},{"type":"course-stage","id":"94c73061-dfc0-44c6-9892-969fa122c82b","lid":"@lid:course-stage-94c73061-dfc0-44c6-9892-969fa122c82b"},{"type":"course-stage","id":"0e13a8b0-c81e-4b74-8a27-b07ffb02a464","lid":"@lid:course-stage-0e13a8b0-c81e-4b74-8a27-b07ffb02a464"},{"type":"course-stage","id":"2200f2b2-65cb-49e2-9a8c-61b60ac27d2b","lid":"@lid:course-stage-2200f2b2-65cb-49e2-9a8c-61b60ac27d2b"},{"type":"course-stage","id":"54b31513-6dd4-4706-b4e4-92c2738b301e","lid":"@lid:course-stage-54b31513-6dd4-4706-b4e4-92c2738b301e"},{"type":"course-stage","id":"81b533cd-cfaf-4583-bca5-5f6032979711","lid":"@lid:course-stage-81b533cd-cfaf-4583-bca5-5f6032979711"},{"type":"course-stage","id":"003b1bac-7f53-4ee4-8b15-5d8787ccd82d","lid":"@lid:course-stage-003b1bac-7f53-4ee4-8b15-5d8787ccd82d"},{"type":"course-stage","id":"63a827b4-366a-4623-9ae4-b99709064ecf","lid":"@lid:course-stage-63a827b4-366a-4623-9ae4-b99709064ecf"},{"type":"course-stage","id":"f08fc5cb-3e49-4691-a2f8-ce92b137ed60","lid":"@lid:course-stage-f08fc5cb-3e49-4691-a2f8-ce92b137ed60"},{"type":"course-stage","id":"a0b223d0-9962-49ec-bd19-17bd86668149","lid":"@lid:course-stage-a0b223d0-9962-49ec-bd19-17bd86668149"},{"type":"course-stage","id":"2018ba47-6299-44d2-a3ef-cb8eaf6bd944","lid":"@lid:course-stage-2018ba47-6299-44d2-a3ef-cb8eaf6bd944"},{"type":"course-stage","id":"52410c7e-85d8-4225-838c-1e60f3308284","lid":"@lid:course-stage-52410c7e-85d8-4225-838c-1e60f3308284"},{"type":"course-stage","id":"c7d8b6b6-079e-4979-a3d9-fe79fd33057e","lid":"@lid:course-stage-c7d8b6b6-079e-4979-a3d9-fe79fd33057e"},{"type":"course-stage","id":"9a89230a-e05a-40e8-ab53-f8ec47950161","lid":"@lid:course-stage-9a89230a-e05a-40e8-ab53-f8ec47950161"},{"type":"course-stage","id":"d454c0cd-ee7a-4353-9efd-3805f39c740d","lid":"@lid:course-stage-d454c0cd-ee7a-4353-9efd-3805f39c740d"},{"type":"course-stage","id":"98bb4de9-29fe-4314-83eb-36d20f829f0d","lid":"@lid:course-stage-98bb4de9-29fe-4314-83eb-36d20f829f0d"},{"type":"course-stage","id":"c17ed613-22e9-49bd-a9ab-eac85d62e98f","lid":"@lid:course-stage-c17ed613-22e9-49bd-a9ab-eac85d62e98f"},{"type":"course-stage","id":"5fbc05a7-b3f7-4f21-b545-899ad57ff15f","lid":"@lid:course-stage-5fbc05a7-b3f7-4f21-b545-899ad57ff15f"},{"type":"course-stage","id":"07a51596-9d2a-4372-aa2e-9fac07cad652","lid":"@lid:course-stage-07a51596-9d2a-4372-aa2e-9fac07cad652"},{"type":"course-stage","id":"0f77a688-6add-4000-a0ee-e2f4f67cf13c","lid":"@lid:course-stage-0f77a688-6add-4000-a0ee-e2f4f67cf13c"},{"type":"course-stage","id":"04ac6fa4-3772-46b1-b072-d2c1cc0519d2","lid":"@lid:course-stage-04ac6fa4-3772-46b1-b072-d2c1cc0519d2"},{"type":"course-stage","id":"045bcdf2-424c-4349-ba72-c0bff2496156","lid":"@lid:course-stage-045bcdf2-424c-4349-ba72-c0bff2496156"},{"type":"course-stage","id":"8567a4b6-35df-48c8-b639-4d2a2175cc17","lid":"@lid:course-stage-8567a4b6-35df-48c8-b639-4d2a2175cc17"}]}}},{"id":"4f167014-de09-4e22-b8b1-5c2939b9fe00","type":"course-stages","attributes":{"approved-comments-count":3,"community-solution-counts":{"c":37,"go":211,"cpp":null,"nim":3,"php":5,"zig":null,"dart":null,"java":null,"mojo":null,"odin":null,"ruby":7,"rust":191,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":null,"elixir":null,"fsharp":null,"kotlin":null,"python":120,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":null,"typescript":null},"concept-slugs":[],"description-markdown-template":"In the previous stage, we guarded against malicious activity by\nrestricting an executable's access to the filesystem.\n\nThere's another resource that needs to be guarded: the process tree. The\nprocess you're executing is currently capable of viewing all other\nprocesses running on the host system, and sending signals to them.\n\nIn this stage, you'll use [PID\nnamespaces](http://man7.org/linux/man-pages/man7/pid_namespaces.7.html) to\nensure that the program you execute has its own isolated process tree.\nThe process being executed must see itself as PID 1.\n\n{{#lang_is_php}}\nYou'll need to use the `pcntl_unshare` function for this, which was\n[added in PHP 7.4](https://www.php.net/manual/en/migration74.new-functions.php), and isn't properly documented\nyet (as of 22 Jan 2021). Here's the [pull request](https://github.com/php/php-src/pull/3760) where it was added.\n{{/lang_is_php}}\n\nJust like the previous stage, the tester will run your program like this:\n\n```\nmydocker run alpine:latest /usr/local/bin/docker-explorer mypid\n```","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll restrict a program's access to the host's process\ntree by using [PID\nnamespaces](http://man7.org/linux/man-pages/man7/pid_namespaces.7.html).","name":"Process isolation","position":5,"position-within-course":5,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"lu7","tester-source-code-url":"https://github.com/codecrafters-io/docker-tester/blob/18245703a5beed8ee0a7e1cbb7204a7ee3b3b5d1/internal/stage_process_isolation.go#L5"},"relationships":{"course":{"data":{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"d1cb1e63-953b-49ba-a55a-bdebdd306ed1","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{"c":15,"go":133,"cpp":null,"nim":3,"php":1,"zig":null,"dart":null,"java":null,"mojo":null,"odin":null,"ruby":4,"rust":119,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":null,"elixir":null,"fsharp":null,"kotlin":null,"python":70,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":null,"typescript":null},"concept-slugs":[],"description-markdown-template":"Your docker implementation can now execute a program with a fair degree of\nisolation - it can't modify files or interact with processes running on\nthe host.\n\nIn this stage, you'll use [the Docker registry\nAPI](https://docs.docker.com/registry/spec/api/) to fetch the contents of\na public image on [Docker Hub](https://hub.docker.com/) and then execute a\ncommand within it.\n\nYou'll need to:\n\n- Do a small [authentication dance](https://docs.docker.com/registry/spec/auth/token/)\n- Fetch the [image manifest](https://docs.docker.com/registry/spec/api/#pulling-an-image-manifest)\n- [Pull layers](https://docs.docker.com/registry/spec/api/#pulling-a-layer) of an image and extract them to the chroot directory\n\nThe base URL for Docker Hub's public registry is `registry.hub.docker.com`.\n\nThe tester will run your program like this:\n\n```\nmydocker run alpine:latest /bin/echo hey\n```\n\nThe image used will be an [official\nimage](https://docs.docker.com/docker-hub/official_images/) from Docker\nHub. For example: [`alpine:latest`](https://hub.docker.com/_/alpine),\n[`alpine:latest`](https://hub.docker.com/_/alpine),\n[`busybox:latest`](https://hub.docker.com/_/busybox). When interacting with the\nRegistry API, you'll need to prepend `library/` to the image names.\n\n{{#lang_is_rust}}\nSince Rust doesn't have an archive extraction utility in its stdlib, you\nmight want to shell out and use `tar`.\n\nYou can use the [reqwest](https://crates.io/crates/reqwest) crate to make\nHTTP requests, we've included it in the `Cargo.toml` file. We've also included\n[serde_json](https://crates.io/crates/serde_json) to help with parsing JSON.\n{{/lang_is_rust}}\n\n{{#lang_is_go}}\nSince Go doesn't have an archive extraction utility in its stdlib, you\nmight want to shell out and use `tar`.\n{{/lang_is_go}}\n\n{{#lang_is_nim}}\nSince Nim doesn't have an archive extraction utility in its stdlib, you\nmight want to shell out and use `tar`.\n{{/lang_is_nim}}\n\n{{#lang_is_c}}\nSince C doesn't have an archive extraction utility in its stdlib, you\nmight want to shell out and use `tar`.\n\nYou can assume that `libcurl` is available in the build environment.\n{{/lang_is_c}}","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll fetch an image from Docker Hub and execute a command\nin it. You'll need to use [the Docker Registry\nAPI](https://docs.docker.com/registry/spec/api/) for this.","name":"Fetch an image from the Docker Registry","position":6,"position-within-course":6,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"hs1","tester-source-code-url":"https://github.com/codecrafters-io/docker-tester/blob/18245703a5beed8ee0a7e1cbb7204a7ee3b3b5d1/internal/stage_fetch_from_registry.go#L8"},"relationships":{"course":{"data":{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"4cd6af74-f3b7-4c28-acc4-36c2374ef327","type":"course-stages","attributes":{"approved-comments-count":4,"community-solution-counts":{"c":42,"go":235,"cpp":null,"nim":2,"php":5,"zig":null,"dart":null,"java":null,"mojo":null,"odin":null,"ruby":11,"rust":230,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":null,"elixir":null,"fsharp":null,"kotlin":null,"python":146,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":null,"typescript":null},"concept-slugs":[],"description-markdown-template":"In the previous stage, we executed a program that existed locally on our\nmachine. This program had write access to the whole filesystem, which\nmeans that it could do **dangerous** things!\n\nIn this stage, you'll use [chroot](https://en.wikipedia.org/wiki/Chroot)\nto ensure that the program you execute doesn't have access to any files on\nthe host machine. Create an empty temporary directory and `chroot` into it\nwhen executing the command. You'll need to copy the binary being executed\ntoo.\n\n{{#lang_is_rust}}\nAt the time of writing this, the implementation of chroot in Rust's standard library\n([std::os::unix::fs::chroot](https://doc.rust-lang.org/std/os/unix/fs/fn.chroot.html)) is still a\nnightly-only experimental API. We've included [libc](https://crates.io/crates/libc) as a dependency\ninstead.\n{{/lang_is_rust}}\n\n{{#lang_is_nim}}\nSince Nim's [posix module](https://nim-lang.org/docs/posix.html) doesn't\nhave `chroot` defined, you'll need to implement this yourself! For\nexamples on how to do this, view the source for other syscalls like\n[chdir](https://nim-lang.org/docs/posix.html#chdir%2Ccstring).\n{{/lang_is_nim}}\n\n{{#lang_is_go}}\nWhen executing your program within the chroot directory, you might run into an error that says\n`open /dev/null: no such file or directory`. This is because [Cmd.Run()](https://golang.org/pkg/os/exec/#Cmd.Run)\nand its siblings expect `/dev/null` to be present. You can work around this by either creating an empty\n`/dev/null` file inside the chroot directory, or by ensuring that `Cmd.Stdout`, `Cmd.Stderr` and `Cmd.Stdin` are not `nil`.\nMore details about this [here](https://rohitpaulk.com/articles/cmd-run-dev-null).\n{{/lang_is_go}}\n\n{{#lang_is_rust}}\nWhen executing your program within the chroot directory, you might run into an error that says\n`no such file or directory` even if the binary exists within the chroot. This is because\n[Command::output()](https://doc.rust-lang.org/std/process/struct.Command.html#method.output)\nexpects `/dev/null` to be present. You can work around this by creating an empty\n`/dev/null` file inside the chroot directory. This cryptic error effects Go programs too, more details\n[here](https://rohitpaulk.com/articles/cmd-run-dev-null).\n{{/lang_is_rust}}\n\nJust like the previous stage, the tester will run your program like this:\n\n```\nmydocker run alpine:latest /usr/local/bin/docker-explorer ls /some_dir\n```","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll restrict a program's access to the host filesystem\nby using [chroot](https://en.wikipedia.org/wiki/Chroot).","name":"Filesystem isolation","position":4,"position-within-course":4,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"if6","tester-source-code-url":"https://github.com/codecrafters-io/docker-tester/blob/18245703a5beed8ee0a7e1cbb7204a7ee3b3b5d1/internal/stage_fs_isolation.go#L8"},"relationships":{"course":{"data":{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"9bccfadb-dc95-4d48-967b-3716194034fc","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":187,"go":678,"cpp":null,"nim":8,"php":35,"zig":null,"dart":null,"java":null,"mojo":null,"odin":null,"ruby":32,"rust":628,"gleam":null,"ocaml":null,"scala":null,"swift":1,"csharp":null,"elixir":null,"fsharp":null,"kotlin":null,"python":512,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":null,"typescript":null},"concept-slugs":[],"description-markdown-template":"You'll now pipe the program's stdout and stderr to the\nparent process.\n\nLike the last stage, the tester will run your program like this:\n\n```\nmydocker run alpine:latest /usr/local/bin/docker-explorer echo hey\n```\n\nTo test this behaviour locally, you could use the `echo` + `echo_stderr`\ncommands that `docker-explorer` exposes. Run `docker-explorer --help` to\nview usage.\n\nIf you've got any logs or print statements in your code, make sure to remove\nthem. The tester can't differentiate between debug logs and the actual\noutput!\n\nNote: The **README** in your repository contains setup\ninformation for this stage and beyond (takes \u003c 5 min).","difficulty":"easy","is-paid":false,"marketing-markdown":"In this stage, you'll relay the child program's stdout \u0026 stderr to the\nparent process.","name":"Wireup stdout \u0026 stderr","position":2,"position-within-course":2,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"kf3","tester-source-code-url":"https://github.com/codecrafters-io/docker-tester/blob/18245703a5beed8ee0a7e1cbb7204a7ee3b3b5d1/internal/stage_stdio.go#L9"},"relationships":{"course":{"data":{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"b426ec06-703b-40a2-9162-3a7d6b774e29","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{},"concept-slugs":[],"description-markdown-template":"Your task is to implement a very basic version\nof [`docker run`](https://docs.docker.com/engine/reference/run/)\u003c/a\u003e. It will\nbe executed similar to `docker run`:\n\n```\nmydocker run alpine:latest /usr/local/bin/docker-explorer echo hey\n```\n\n[docker-explorer](https://github.com/codecrafters-io/docker-explorer) is a custom test program that exposes\ncommands like `echo` and `ls`.\n\nFor now, don't worry about pulling the `alpine:latest` image. We will just\nexecute a local program for this stage and print its output. You'll work on\npulling images from Docker Hub in stage 6.","difficulty":"very_easy","is-paid":false,"marketing-markdown":"In this stage, you'll execute a program using `fork` + `exec`.","name":"Execute a program","position":1,"position-within-course":1,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"je9","tester-source-code-url":"https://github.com/codecrafters-io/docker-tester/blob/18245703a5beed8ee0a7e1cbb7204a7ee3b3b5d1/internal/stage_basic_exec.go#L9"},"relationships":{"course":{"data":{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"a6b6d762-e774-4927-b898-9935143c1c12","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":74,"go":340,"cpp":null,"nim":3,"php":8,"zig":null,"dart":null,"java":null,"mojo":null,"odin":null,"ruby":16,"rust":299,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":null,"elixir":null,"fsharp":null,"kotlin":null,"python":172,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":null,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll need to relay the program's exit code to the parent\nprocess.\n\nIf the program you're executing exits with exit code 1, your program\nshould exit with exit code 1 too.\n\nTo test this behaviour locally, you could use the `exit` command that\n`docker-explorer` exposes. Run `docker-explorer --help` to view usage.\n\nJust like the previous stage, the tester will run your program like this:\n\n```\nmydocker run alpine:latest /usr/local/bin/docker-explorer exit 1\n```","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll wait for the child program's exit code and exit with\nit.","name":"Handle exit codes","position":3,"position-within-course":3,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"cn8","tester-source-code-url":"https://github.com/codecrafters-io/docker-tester/blob/18245703a5beed8ee0a7e1cbb7204a7ee3b3b5d1/internal/stage_exit_code.go#L9"},"relationships":{"course":{"data":{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"8ee02441-697a-4e6d-8015-44e472b0c1b8","type":"languages","attributes":{"name":"C","slug":"c","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"1c637494-d595-4c20-84be-1792d9d0ef74","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"course"}},"language":{"data":{"id":"8ee02441-697a-4e6d-8015-44e472b0c1b8","type":"language"}}}},{"id":"3236a60c-e348-4db7-9e6a-e2826b38d991","type":"languages","attributes":{"name":"Go","slug":"go","track-status":"live"},"relationships":{"primer-concept-group":{}}},{"id":"778f3b6c-acd0-4942-9ce1-a566e52c7266","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"course"}},"language":{"data":{"id":"3236a60c-e348-4db7-9e6a-e2826b38d991","type":"language"}}}},{"id":"e10cd1d2-893f-4a75-905c-82eef12cf397","type":"languages","attributes":{"name":"Nim","slug":"nim","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"8431477c-9e30-4ed1-8d31-991e39a0b1e5","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"course"}},"language":{"data":{"id":"e10cd1d2-893f-4a75-905c-82eef12cf397","type":"language"}}}},{"id":"0c3ceaee-af5c-44d2-ab88-87acc929944b","type":"languages","attributes":{"name":"PHP","slug":"php","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"ec6f4f99-91a2-41f3-87e1-96fa7bfd29d2","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"course"}},"language":{"data":{"id":"0c3ceaee-af5c-44d2-ab88-87acc929944b","type":"language"}}}},{"id":"5ddd40dd-1539-4214-a40c-cc7a9e5edf35","type":"languages","attributes":{"name":"Rust","slug":"rust","track-status":"live"},"relationships":{"primer-concept-group":{}}},{"id":"25954aeb-6863-41a1-b716-8b8f070ae6ed","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"course"}},"language":{"data":{"id":"5ddd40dd-1539-4214-a40c-cc7a9e5edf35","type":"language"}}}},{"id":"db982ec4-d37d-44c7-abf1-dc76e121daaf","type":"languages","attributes":{"name":"Swift","slug":"swift","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"5fab621a-4b71-4931-b7b0-dafa1787494f","type":"course-language-configurations","attributes":{"alpha-tester-usernames":["Terky"],"release-status":"alpha"},"relationships":{"course":{"data":{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"course"}},"language":{"data":{"id":"db982ec4-d37d-44c7-abf1-dc76e121daaf","type":"language"}}}},{"id":"a58f0983-d67d-47e6-97e7-c02aec9ec269","type":"languages","attributes":{"name":"Python","slug":"python","track-status":"live"},"relationships":{"primer-concept-group":{}}},{"id":"901f1255-b2fc-429d-8e9c-183b7e10118f","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"beta"},"relationships":{"course":{"data":{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"course"}},"language":{"data":{"id":"a58f0983-d67d-47e6-97e7-c02aec9ec269","type":"language"}}}},{"id":"63d38ef2-f131-4635-aa66-0cf404826f9b","type":"languages","attributes":{"name":"Ruby","slug":"ruby","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"2806e068-1c85-4278-b8ec-60a0bfe33e06","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"beta"},"relationships":{"course":{"data":{"id":"aab5bf70-e65f-48f0-8c4d-980b0ed81017","type":"course"}},"language":{"data":{"id":"63d38ef2-f131-4635-aa66-0cf404826f9b","type":"language"}}}},{"id":"6aca4b42-a35f-4de0-9b64-a0ea14e1ed3f","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension you'll add support for serving multiple clients simultaneously.\n\nAlong the way you'll learn about TCP connections, how to handle concurrency and more.\n","name":"Concurrent Clients","position":1,"slug":"concurrent-clients"},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}}}},{"id":"6c6adf94-6eb3-4b56-8ece-8373da2f79ff","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension you'll add support for consuming messages by implementing the [Fetch][fetch-api] API.\n\nAlong the way you'll learn about how Kafka's Fetch API works, how Kafka stores messages on disk and more.\n\n[fetch-api]: https://kafka.apache.org/protocol.html#The_Messages_Fetch\n","name":"Consuming Messages","position":3,"slug":"consuming-messages"},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}}}},{"id":"9e679640-fee0-4cc9-92eb-db920fc58cb2","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension you'll add support for listing topic partitions by implementing the [DescribeTopicPartitions][describe-topic-partitions] API.\n\nAlong the way you'll learn about how Kafka stores messages on disk, the `__cluster_metadata` topic and more.\n\n[describe-topic-partitions]: https://kafka.apache.org/protocol.html#The_Messages_DescribeTopicPartitions\n","name":"Listing Partitions","position":2,"slug":"listing-partitions"},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}}}},{"id":"7a53a591-e78e-482a-8407-7b88642d177f","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":26,"cpp":2,"nim":null,"php":null,"zig":null,"dart":null,"java":6,"mojo":null,"odin":null,"ruby":null,"rust":27,"gleam":1,"ocaml":null,"scala":null,"swift":null,"csharp":3,"elixir":null,"fsharp":null,"kotlin":null,"python":9,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":4,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the Fetch response for a topic with no messages.\n\n🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\nIn the meantime, please use\n[this link](https://forum.codecrafters.io/new-topic?category=Challenges\u0026tags=challenge%3Akafka\u0026title=Question+about+cm4%3A+Fetch+with+an+empty+topic\u0026body=%3Cyour+question+here%3E)\nto ask questions on the forum.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then connect to your server on port 9092 and send a `Fetch` (v16) request. The request will contain a single topic with a topic ID that exists. However, the topic has no messages assigned to it (i.e. the log file is empty).\n\nThe tester will validate that:\n\n- The first 4 bytes of your response (the \"message length\") are valid.\n- The correlation ID in the response header matches the correlation ID in the request header.\n- The error code in the response body is `0` (No Error).\n- The `throttle_time_ms` field in the response is `0`.\n- The `responses` field in the response has 1 element, and in that element:\n  - The `topic_id` field matches what was sent in the request.\n  - The `partitions` array has 1 element, and in that element:\n    - The `partition_index` field is `0`.\n    - The `error_code` field is `0` (No Error).\n    - The `records` array has `0` elements.\n\n### Notes\n\n- You'll need to parse the `Fetch` request in this stage to get the `topic_id` to send in the response.\n- The official docs for the `Fetch` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_Fetch). Make sure\n  to scroll down to the \"Fetch Response (Version: 16)\" section.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement the Fetch response for a topic with no messages.","name":"Fetch with an empty topic","position":16,"position-within-course":16,"position-within-extension":4,"primary-extension-slug":"consuming-messages","secondary-extension-slugs":[],"slug":"cm4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"74092537-aca9-4874-bb41-c794f5a34ba9","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":13,"cpp":1,"nim":null,"php":null,"zig":null,"dart":null,"java":1,"mojo":null,"odin":null,"ruby":null,"rust":10,"gleam":1,"ocaml":null,"scala":null,"swift":null,"csharp":3,"elixir":null,"fsharp":null,"kotlin":null,"python":8,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":3,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `DescribeTopicPartitions` response for multiple topics.\n\n🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\nIn the meantime, please use\n[this link](https://forum.codecrafters.io/new-topic?category=Challenges\u0026tags=challenge%3Akafka\u0026title=Question+about+WQ2+%28DescribeTopicPartition+with+multiple+topics%29\u0026body=%3Cyour+question+here%3E)\nto ask questions on the forum.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh /tmp/server.properties\n```\n\nIt'll then connect to your server on port 9092 and send a `DescribeTopicPartitions` (v0) request. The request will contain 3 topic names. The topics exist and have 1 or 2 partitions assigned to each.\n\nThe tester will validate that:\n\n- The first 4 bytes of your response (the \"message length\") are valid.\n- The correlation ID in the response header matches the correlation ID in the request header.\n- The error code in the topic response body is `0` (NO_ERROR).\n- The `topic_name` field in the topic response should be equal to the topic name sent in the request.\n- The `topic_id` field in the topic response should be equal to the topic UUID of the topic.\n- The partition response should contain details of the partitions assigned to the topic.\n- The error code in all the partition responses should be `0` (NO_ERROR).\n- The `partition_index` field in all the partition responses should be equal to the partition ID of the partition assigned to the topic.\n\n### Notes\n\n- The official docs for the `DescribeTopicPartitions` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_DescribeTopicPartitions).","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll implement the DescribeTopicPartition response for multiple topics.","name":"List for multiple topics","position":12,"position-within-course":12,"position-within-extension":5,"primary-extension-slug":"listing-partitions","secondary-extension-slugs":[],"slug":"wq2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"3d73e845-8740-4e1f-b472-8382f90ac5d6","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":75,"cpp":4,"nim":null,"php":null,"zig":null,"dart":null,"java":6,"mojo":null,"odin":null,"ruby":null,"rust":83,"gleam":3,"ocaml":null,"scala":null,"swift":null,"csharp":2,"elixir":null,"fsharp":null,"kotlin":null,"python":51,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":20,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add an entry for the `Fetch` API to the APIVersions response.\n\n🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\nIn the meantime, please use\n[this link](https://forum.codecrafters.io/new-topic?category=Challenges\u0026tags=challenge%3Akafka\u0026title=Question+about+gs0%3A+Include+Fetch+in+APIVersions\u0026body=%3Cyour+question+here%3E)\nto ask questions on the forum.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then connect to your server on port 9092 and send a valid `APIVersions` (v4) request.\n\nThe tester will validate that:\n\n- The first 4 bytes of your response (the \"message length\") are valid.\n- The correlation ID in the response header matches the correlation ID in the request header.\n- The error code in the response body is `0` (No Error).\n- The response body contains at least one entry for the API key `1` (FETCH).\n- The `MaxVersion` for the Fetch API is atleast 16.\n\n### Notes\n\n- You don't have to implement support for the `Fetch` request in this stage. We'll get to this in later stages.\n- You'll still need to include the entry for `APIVersions` in your response to pass the previous stage.\n- The `MaxVersion` for the `Fetch` and `APIVersions` are different. For `APIVersions`, it is 4. For `Fetch`, it is 16.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add the Fetch API to the APIVersions response.","name":"Include Fetch in APIVersions","position":13,"position-within-course":13,"position-within-extension":1,"primary-extension-slug":"consuming-messages","secondary-extension-slugs":[],"slug":"gs0","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"ecddc9cd-f5e8-4dac-9311-e656e9ea253b","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":75,"cpp":14,"nim":null,"php":null,"zig":null,"dart":null,"java":48,"mojo":null,"odin":null,"ruby":null,"rust":68,"gleam":9,"ocaml":null,"scala":null,"swift":null,"csharp":5,"elixir":null,"fsharp":null,"kotlin":null,"python":34,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":15,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `DescribeTopicPartitions` response for an unknown topic.\n\nWe've created an interactive protocol inspector for the `DescribeTopicPartitions` request \u0026 response:\n\n- 🔎 [DescribeTopicPartitions Request (v0)](https://binspec.org/kafka-describe-topic-partitions-request-v0)\n- 🔎 [DescribeTopicPartitions Response (v0) - Unknown Topic](https://binspec.org/kafka-describe-topic-partitions-response-v0-unknown-topic)\n\n🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\nIn the meantime, please use\n[this link](https://forum.codecrafters.io/new-topic?category=Challenges\u0026tags=challenge%3Akafka\u0026title=Question+about+vt6%3A+List+for+an+unknown+topic\u0026body=%3Cyour+question+here%3E)\nto ask questions on the forum.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh /tmp/server.properties\n```\n\nIt'll then connect to your server on port 9092 and send a `DescribeTopicPartitions` (v0) request. The request will contain a single topic with 1 partition.\n\nThe tester will validate that:\n\n- The first 4 bytes of your response (the \"message length\") are valid.\n- The correlation ID in the response header matches the correlation ID in the request header.\n- The error code in the response body is 3 (`UNKNOWN_TOPIC_OR_PARTITION`).\n- The response body should be valid DescribeTopicPartitions (v0) Response.\n- The `topic_name` field in the response should be equal to the topic name sent in the request.\n- The `topic_id` field in the response should be equal to `00000000-0000-0000-0000-000000000000`.\n- The `partitions` field in the response should be empty. (As there are no partitions assigned to this non-existent topic.)\n\n### Notes\n\n- You'll need to parse the `DescribeTopicPartitions` request in this stage to get the topic name to send in the response.\n- For now, you can assume that all topics are \"unknown\". We'll work on identifying actual vs. unknown topics in later stages.\n- The official docs for the `DescribeTopicPartitions` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_DescribeTopicPartitions).","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement the DescribeTopicPartition response for an unknown topic.","name":"List for an unknown topic","position":9,"position-within-course":9,"position-within-extension":2,"primary-extension-slug":"listing-partitions","secondary-extension-slugs":[],"slug":"vt6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"db0eb022-290f-4ddf-a2a9-1ee608a8b4c1","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement a TCP server that listens on port 9092.\n\n[TCP](https://en.wikipedia.org/wiki/Transmission_Control_Protocol) is the underlying protocol that Kafka brokers and clients use to communicate with each other.\n\n### Tests\n\nThe tester will execute your program like this:\n```\n$ ./your_program.sh\n```\n\nIt'll then try to connect to your TCP server on port 9092. If the connection succeeds, you'll pass this stage.\n\n### Notes\n\n- If you already have a Kafka broker running on port 9092 and you run your program, you'll get a \"port already in use\" error. To fix this, terminate the existing Kafka broker and run your program again.\n- 9092 is the default port that Kafka uses.","difficulty":"easy","is-paid":false,"marketing-markdown":"In this stage, you'll start a TCP server on port 9092, which is the\ndefault port that Kafka uses.","name":"Bind to a port","position":1,"position-within-course":1,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"vi6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"dd9943cb-9488-4ebd-99e1-01497a3a392e","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":null,"go":306,"cpp":32,"nim":null,"php":null,"zig":null,"dart":null,"java":152,"mojo":null,"odin":null,"ruby":null,"rust":274,"gleam":20,"ocaml":null,"scala":null,"swift":null,"csharp":20,"elixir":null,"fsharp":null,"kotlin":null,"python":199,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":62,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the response body for the `APIVersions` request.\n\n🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\nIn the meantime, please use\n[this link](https://forum.codecrafters.io/new-topic?category=Challenges\u0026tags=challenge%3Akafka\u0026title=Question+about+pv1%3A+Handle+APIVersions+requests\u0026body=%3Cyour+question+here%3E)\nto ask questions on the forum.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then connect to your server on port 9092 and send a valid `APIVersions` (v4) request.\n\nThe tester will validate that:\n\n- The first 4 bytes of your response (the \"message length\") are valid.\n- The correlation ID in the response header matches the correlation ID in the request header.\n- The error code in the response body is `0` (No Error).\n- The response body contains at least one entry for the API key `18` (API_VERSIONS).\n- The `MaxVersion` for the `ApiKey` `18` is at least `4`.\n\n### Notes\n\n- The tester will always send you v4 of the APIVersions request.\n  - As of Oct 30th 2024, v4 is \"unreleased\" so isn't available in the Kafka docs yet. It'll\n    be available once Kafka 3.9 is released. Here's a link to the [Kafka source code](https://github.com/apache/kafka/blob/84caaa6e9da06435411510a81fa321d4f99c351f/clients/src/main/resources/common/message/ApiVersionsRequest.json#L25C22-L25C33) mentioning this.\n  - The structure for v4 is the same as v3 listed in the docs.\n- From this stage onwards, the tester will start validating the first 4 bytes of your response (the \"message length\") in addition to the other checks.\n- If extra bytes are remaining after decoding all the fields of the response body, this will be considered an error.","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll need to implement the `APIVersions:V4` response.","name":"Handle APIVersions requests","position":5,"position-within-course":5,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"pv1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"8d6a139d-737f-4d39-982d-5572cc640d72","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":28,"cpp":7,"nim":null,"php":null,"zig":null,"dart":null,"java":13,"mojo":null,"odin":null,"ruby":null,"rust":30,"gleam":2,"ocaml":null,"scala":null,"swift":null,"csharp":3,"elixir":null,"fsharp":null,"kotlin":null,"python":15,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":7,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `DescribeTopicPartitions` response for a single topic.\n\nKafka stores metadata about topics in the `__cluster_metadata` topic. To check if a topic exists or not, you'll need to read\nthe `__cluster_metadata` topic's log file, located at `/tmp/kraft-combined-logs/__cluster_metadata-0/00000000000000000000.log`.\n\nWe've created an interactive protocol inspector for the cluster metadata log file and the `DescribeTopicPartitions` response:\n\n- 🔎 [Cluster Metadata Log File](https://binspec.org/kafka-cluster-metadata)\n- 🔎 [DescribeTopicPartitions Response (v0)](https://binspec.org/kafka-describe-topic-partitions-response-v0)\n\n🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\nIn the meantime, please use\n[this link](https://forum.codecrafters.io/new-topic?category=Challenges\u0026tags=challenge%3Akafka\u0026title=Question+about+ea7%3A+List+for+a+single+partition\u0026body=%3Cyour+question+here%3E)\nto ask questions on the forum.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh /tmp/server.properties\n```\n\nIt'll then connect to your server on port 9092 and send a `DescribeTopicPartitions` (v0) request. The request will contain an single topic name. The topic exists and has a single partition assigned to it.\n\nThe tester will validate that:\n\n- The first 4 bytes of your response (the \"message length\") are valid.\n- The correlation ID in the response header matches the correlation ID in the request header.\n- The error code in the response body is 0 (no error).\n- The response body should be valid DescribeTopicPartitions (v0) Response.\n- The `topic_name` field in the response should match the topic name sent in the request.\n- The `topic_id` field in the response should match the topic UUID of the topic.\n- The `partitions` field in the response should contain details of the partition assigned to the topic.\n- The error code in the partition response should be 0 (no error).\n- The `partition_index` field in the partition response should match the partition ID of the partition assigned to the topic.\n\n### Notes\n\n- The official docs for the `DescribeTopicPartitions` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_DescribeTopicPartitions).\n- The official Kafka docs don't cover the structure of records inside the `__cluster_metadata` topic, but you can find the definitions in the Kafka source code [here](https://github.com/apache/kafka/tree/5b3027dfcbcb62d169d4b4421260226e620459af/metadata/src/main/resources/common/metadata).","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll implement the DescribeTopicPartition response for a single topic.","name":"List for a single partition","position":10,"position-within-course":10,"position-within-extension":3,"primary-extension-slug":"listing-partitions","secondary-extension-slugs":[],"slug":"ea7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"b9d73488-25ab-4185-b91b-3b44f306a020","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":223,"cpp":28,"nim":null,"php":null,"zig":null,"dart":null,"java":101,"mojo":null,"odin":null,"ruby":null,"rust":187,"gleam":3,"ocaml":null,"scala":null,"swift":null,"csharp":13,"elixir":null,"fsharp":null,"kotlin":null,"python":151,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":10,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for handling multiple sequential requests from the same client.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then connect to your server on port 9092 and send a `APIVersions` (v4) request, read the response, \u0026 validate the response.\n\nOnce a response is received, the tester will re-use the same connection to send multiple other `APIVersions` (v4) requests.\n\nFor each response, the tester will validate that:\n\n- The first 4 bytes of your response (the \"message length\") are valid.\n- The correlation ID in the response header matches the correlation ID in the request header.\n- The error code in the response body is `0` (No Error).\n- The response body contains at least one entry for the API key `18` (API_VERSIONS).\n- The `MaxVersion` for the `ApiKey` `18` is at least `4`.\n\n### Notes\n\n- The tester will only send APIVersions (v4) requests in this stage.\n- If extra bytes are remaining after decoding all the fields of the response body, this will be considered an error.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll need to handle multiple sequential `APIVersions` requests.","name":"Serial requests","position":6,"position-within-course":6,"position-within-extension":1,"primary-extension-slug":"concurrent-clients","secondary-extension-slugs":[],"slug":"nh4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"bc8e393f-7ebb-493f-a1e7-322025b85418","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":17,"cpp":3,"nim":null,"php":null,"zig":null,"dart":null,"java":7,"mojo":null,"odin":null,"ruby":null,"rust":18,"gleam":1,"ocaml":null,"scala":null,"swift":null,"csharp":2,"elixir":null,"fsharp":null,"kotlin":null,"python":8,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":3,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the Fetch response for a topic with a single message, reading it from disk.\n\n🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\nIn the meantime, please use\n[this link](https://forum.codecrafters.io/new-topic?category=Challenges\u0026tags=challenge%3Akafka\u0026title=Question+about+eg2%3A+Fetch+single+message+from+disk\u0026body=%3Cyour+question+here%3E)\nto ask questions on the forum.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then connect to your server on port 9092 and send a `Fetch` (v16) request. The request will contain a single topic with a topic ID that exists. The topic has a single message assigned to it.\n\nThe tester will validate that:\n\n- The first 4 bytes of your response (the \"message length\") are valid.\n- The correlation ID in the response header matches the correlation ID in the request header.\n- The error code in the response body is `0` (No Error).\n- The `throttle_time_ms` field in the response is `0`.\n- The `responses` field in the response has 1 element, and in that element:\n  - The `topic_id` field matches what was sent in the request.\n  - The `partitions` array has 1 element, and in that element:\n    - The `partition_index` field is `0`.\n    - The `error_code` field is `0` (No Error).\n    - The `records` array has 1 element.\n      - The entire `RecordBatch` content is read from disk. (We will compare the contents of the `RecordBatch` with the contents of the log file to verify this.)\n\n### Notes\n\n- You'll need to parse the `Fetch` request in this stage to get the `topic_id` to send in the response.\n- The official docs for the `Fetch` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_Fetch). Make sure\n  to scroll down to the \"Fetch Response (Version: 16)\" section.","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll implement the Fetch response for a topic with a single message, reading it from disk.","name":"Fetch single message from disk","position":17,"position-within-course":17,"position-within-extension":5,"primary-extension-slug":"consuming-messages","secondary-extension-slugs":[],"slug":"eg2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"ebdefcd8-9ce1-4cb2-8feb-afc36ef17141","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":64,"cpp":3,"nim":null,"php":null,"zig":null,"dart":null,"java":11,"mojo":null,"odin":null,"ruby":null,"rust":63,"gleam":3,"ocaml":null,"scala":null,"swift":null,"csharp":3,"elixir":null,"fsharp":null,"kotlin":null,"python":39,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":15,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the Fetch response for a Fetch request with no topics.\n\n🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\nIn the meantime, please use\n[this link](https://forum.codecrafters.io/new-topic?category=Challenges\u0026tags=challenge%3Akafka\u0026title=Question+about+dh6%3A+Fetch+with+no+topics\u0026body=%3Cyour+question+here%3E)\nto ask questions on the forum.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then connect to your server on port 9092 and send a `Fetch` (v16) request. The request will contain an empty array of topics.\n\nThe tester will validate that:\n\n- The first 4 bytes of your response (the \"message length\") are valid.\n- The correlation ID in the response header matches the correlation ID in the request header.\n- The error code in the response body is `0` (No Error).\n- The `throttle_time_ms` field in the response is `0`.\n- The `session_id` field in the response is `0`.\n- The `responses` field in the response has 0 elements (since the request had an empty array of topics).\n\n\u003c!--\n```\n0000   00 00 00 11 5e 33 46 cc 00 00 00 00 00 00 00 0a   ....^3F.........\n0010   b9 c1 2e 01 00                                    .....\n```\n--\u003e\n\n### Notes\n\n- You don't need to parse the fields in the `Fetch` request in this stage, we'll get to this in later stages.\n- The official docs for the `Fetch` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_Fetch). Make sure\n  to scroll down to the \"Fetch Response (Version: 16)\" section.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll start encoding your response to the `Fetch` requests.","name":"Fetch with no topics","position":14,"position-within-course":14,"position-within-extension":2,"primary-extension-slug":"consuming-messages","secondary-extension-slugs":[],"slug":"dh6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"8d0966a7-2787-4991-9f0b-e3855ef0f1d6","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":645,"cpp":66,"nim":null,"php":null,"zig":null,"dart":null,"java":284,"mojo":null,"odin":null,"ruby":null,"rust":500,"gleam":37,"ocaml":null,"scala":null,"swift":null,"csharp":43,"elixir":null,"fsharp":null,"kotlin":null,"python":332,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":175,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll parse the `request_api_version` field in the request header and respond with an error code if the version is invalid.\n\n### Kafka APIs\n\nEvery Kafka request is an API call. The Kafka protocol defines over 70 different APIs, all of which do different things. Here are some examples:\n- `Produce` writes events to partitions.\n- `CreateTopics` creates new topics.\n- `ApiVersions` returns the broker's supported API versions.\n\nA Kafka request specifies the API its calling by using the [`request_api_key`](https://kafka.apache.org/protocol.html#protocol_api_keys) header field.\n\n### Message body\n\nThe schemas for the request and response bodies are determined by the API being called.\n\nFor example, here are some of the fields that the [`Produce`](https://kafka.apache.org/protocol.html#The_Messages_Produce) request body contains:\n\n- The name of the topic to write to.\n- The key of the partition to write to.\n- The event data to write.\n\nOn the other hand, the `Produce` response body contains a response code for each event. These response codes indicate if the writes succeeded.\n\nAs a reminder, requests and responses both have the following format:\n\n1. `message_size`\n2. Header\n3. Body\n\n### API versioning\n\nEach API supports multiple versions, to allow for different schemas. Here's how API versioning works:\n- Requests use the header field `request_api_version` to specify the API version being requested.\n- Responses always use the same API version as the request. For example, a `Produce Request (Version: 3)` will always get a `Produce Response (Version: 3)` back.\n- Each API's version history is independent. So, different APIs with the same version are unrelated. For example, `Produce Request (Version: 10)` is not related to `Fetch Request (Version: 10)`.\n\n### The `ApiVersions` API\n\nThe [`ApiVersions`](https://kafka.apache.org/protocol.html#The_Messages_ApiVersions) API returns the broker's supported API versions. For example, `ApiVersions` may say that the broker supports `Produce` versions 5 to 11, `Fetch` versions 0 to 3, etc.\n\nIn this stage, you'll begin to add support for `ApiVersions` version 4. For this stage, you only need to add support for the `error_code` field. You'll implement the other fields in later stages.\n\nNote: As of Oct 30th 2024, [version 4](https://github.com/apache/kafka/blob/84caaa6e9da06435411510a81fa321d4f99c351f/clients/src/main/resources/common/message/ApiVersionsRequest.json#L25C22-L25C33) of `ApiVersions` is still unreleased, so it isn't available in the Kafka docs yet. However, the request and response formats for `ApiVersions` version 4 are identical to those of version 3. The docs for version 4 will be available once Kafka 3.9 is released.\n\nThe `ApiVersions` response body begins with `error_code`, a 16-bit signed integer. This field indicates if an error occurred with the request. It's set to 0 if there was no error. To see all the possible values, consult the [error codes chart](https://kafka.apache.org/protocol.html#protocol_error_codes).\n\nYou only need to add support for error code 35, `UNSUPPORTED_VERSION`. This error code occurs when the version of `ApiVersions` requested by the client is not supported by the broker. Assume that your broker only supports versions 0 to 4.\n\n### Tests\n\nThe tester will execute your program like this:\n```\n$ ./your_program.sh  \n```\n\nIt'll then connect to your broker on port 9092 and send an `ApiVersions` request. This request will ask for an unsupported version of `ApiVersions`:\n```\n$ echo -n \"000000230012674a4f74d28b00096b61666b612d636c69000a6b61666b612d636c6904302e3100\" | xxd -r -p | nc localhost 9092 | hexdump -C\n```\n```java\n00 00 00 23  // message_size:        35\n00 12        // request_api_key:     18\n67 4a        // request_api_version: 26442\n4f 74 d2 8b  // correlation_id:      1333056139\n...\n```\n\nYour broker must send an `ApiVersions` version 4 response with the `error_code` field set to 35:\n```java\n00 00 00 00  // message_size:   0 (any value works)\n4f 74 d2 8b  // correlation_id: 1333056139\n00 23        // error_code:     35\n```\n\n### Notes\n\n- The Kafka protocol's APIs are different from Kafka's [core APIs](https://kafka.apache.org/documentation/#intro_apis). The core APIs are higher-level Java and Scala APIs that wrap around the Kafka protocol.\n- You can assume that the tester will only send you an `ApiVersions` request. You don't need to check the `request_api_key` field in the header.\n- For this stage, the tester will only assert that your `message_size` field is 4 bytes long—it won't check the value. You'll implement correct `message_size` values in a later stage.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll start encoding your response to the `APIVersions` requests.","name":"Parse API Version","position":4,"position-within-course":4,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"nc5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"671d79d4-06ca-41c2-8ab7-bd0008dece23","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":null,"go":818,"cpp":81,"nim":null,"php":null,"zig":null,"dart":null,"java":358,"mojo":null,"odin":null,"ruby":null,"rust":570,"gleam":43,"ocaml":null,"scala":null,"swift":null,"csharp":53,"elixir":null,"fsharp":null,"kotlin":null,"python":439,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":222,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll replace the hard-coded correlation ID with the actual correlation ID from the request.\n\n### Request message\n\nA request message has three parts:\n1. `message_size`\n2. Header\n3. Body\n\nTo get the `correlation_id` field, you need to find its offset. You already know that `message_size` is 4 bytes long. And here's what the request header looks like (in this stage, we're using [request header v2](https://kafka.apache.org/protocol.html#protocol_messages)):\n\n| Field                 | Data type         | Description                            |\n| --------------------- | ----------------- | -------------------------------------- |\n| `request_api_key`     | `INT16`           | The API key for the request            |\n| `request_api_version` | `INT16`           | The version of the API for the request |\n| `correlation_id`      | `INT32`           | A unique identifier for the request    |\n| `client_id`           | `NULLABLE_STRING` | The client ID for the request          |\n| `TAG_BUFFER`          | `COMPACT_ARRAY`   | Optional tagged fields                 |\n\nTo learn more about the different data types, see [Protocol Primitive Types](https://kafka.apache.org/protocol.html#protocol_types).\n\n#### Example\n\nHere's an example of a request message:\n```java\n00 00 00 23  // message_size:        35\n00 12        // request_api_key:     18\n00 04        // request_api_version: 4\n6f 7f c6 61  // correlation_id:      1870644833\n...\n```\n\n### Tests\n\nThe tester will execute your program like this:\n```\n$ ./your_program.sh\n```\n\nIt'll then connect to your broker on port 9092 and send a request with a request header v2:\n```\n$ echo -n \"00000023001200046f7fc66100096b61666b612d636c69000a6b61666b612d636c6904302e3100\" | xxd -r -p | nc localhost 9092 | hexdump -C\n```\n\nYour broker must send a response with the correct correlation ID:\n```java\n00 00 00 00  // message_size:   0 (any value works)\n6f 7f c6 61  // correlation_id: 1870644833\n```\n\n### Notes\n\n- For this stage, you don't need to worry about what the request is asking for. You'll handle that in the next stage.\n- For this stage, the tester will only assert that your `message_size` field is 4 bytes long—it won't check the value. You'll implement correct `message_size` values in a later stage.\n- The request header version and response header version are unrelated to each other and do not have to match.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll start decoding the RequestHeader.","name":"Parse Correlation ID","position":3,"position-within-course":3,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"wa6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"a842bdbb-b56f-4e65-8982-2430a29b9ad6","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":138,"cpp":28,"nim":null,"php":null,"zig":null,"dart":null,"java":74,"mojo":null,"odin":null,"ruby":null,"rust":133,"gleam":1,"ocaml":null,"scala":null,"swift":null,"csharp":8,"elixir":null,"fsharp":null,"kotlin":null,"python":138,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":9,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for handling concurrent requests from multiple clients.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then instantiate 2-3 clients. Each of these clients will connect to your server on port 9092 and send multiple `APIVersions` (v4) requests.\n\nFor each response, the tester will validate that:\n\n- The first 4 bytes of your response (the \"message length\") are valid.\n- The correlation ID in the response header matches the correlation ID in the request header.\n- The error code in the response body is `0` (No Error).\n- The response body contains at least one entry for the API key `18` (API_VERSIONS).\n- The `MaxVersion` for the `ApiKey` `18` is atleast `4`.\n\n### Notes\n\n- The tester will only send APIVersions (v4) requests in this stage.\n- If extra bytes are remaining after decoding all the fields of the response body, this will be considered an error.","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll need to handle concurrent `APIVersions` requests.","name":"Concurrent requests","position":7,"position-within-course":7,"position-within-extension":2,"primary-extension-slug":"concurrent-clients","secondary-extension-slugs":[],"slug":"sk0","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"1e9c0999-9e7d-46f0-9666-723f19ffeab1","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":6,"cpp":1,"nim":null,"php":null,"zig":null,"dart":null,"java":1,"mojo":null,"odin":null,"ruby":null,"rust":7,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":1,"elixir":null,"fsharp":null,"kotlin":null,"python":3,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":1,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the Fetch response for a topic with multiple messages, reading them from disk.\n\n🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\nIn the meantime, please use\n[this link](https://forum.codecrafters.io/new-topic?category=Challenges\u0026tags=challenge%3Akafka\u0026title=Question+about+fd8%3A+Fetch+multiple+messages+from+disk\u0026body=%3Cyour+question+here%3E)\nto ask questions on the forum.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then connect to your server on port 9092 and send a `Fetch` (v16) request. The request will contain a single topic with a topic ID that exists. The topic has multiple messages assigned to it (but written to a single partition).\n\nThe tester will validate that:\n\n- The first 4 bytes of your response (the \"message length\") are valid.\n- The correlation ID in the response header matches the correlation ID in the request header.\n- The error code in the response body is `0` (No Error).\n- The `throttle_time_ms` field in the response is `0`.\n- The `responses` field in the response has 1 element, and in that element:\n  - The `topic_id` field matches what was sent in the request.\n  - The `partitions` array has 1 element, and in that element:\n    - The `partition_index` field is `0`.\n    - The `error_code` field is `0` (No Error).\n    - The `records` array has the correct number of elements.\n      - The entire `RecordBatch` content is read from disk. (We will compare the contents of the `RecordBatch` with the contents of the log file to verify this.)\n\n### Notes\n\n- You'll need to parse the `Fetch` request in this stage to get the `topic_id` to send in the response.\n- The official docs for the `Fetch` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_Fetch). Make sure\n  to scroll down to the \"Fetch Response (Version: 16)\" section.","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll implement the Fetch response for a topic with multiple messages, reading them from disk.","name":"Fetch multiple messages from disk","position":18,"position-within-course":18,"position-within-extension":6,"primary-extension-slug":"consuming-messages","secondary-extension-slugs":[],"slug":"fd8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"2085a8a3-76a5-44f0-a8ad-64ec725293eb","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":35,"cpp":3,"nim":null,"php":null,"zig":null,"dart":null,"java":8,"mojo":null,"odin":null,"ruby":null,"rust":53,"gleam":2,"ocaml":null,"scala":null,"swift":null,"csharp":3,"elixir":null,"fsharp":null,"kotlin":null,"python":19,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":10,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the Fetch response for an unknown topic.\n\n🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\nIn the meantime, please use\n[this link](https://forum.codecrafters.io/new-topic?category=Challenges\u0026tags=challenge%3Akafka\u0026title=Question+about+hn6%3A+Fetch+with+an+unknown+topic\u0026body=%3Cyour+question+here%3E)\nto ask questions on the forum.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then connect to your server on port 9092 and send a `Fetch` (v16) request. This request will contain a single topic with an unknown topic ID (i.e. the topic doesn't exist yet).\n\nThe tester will validate that:\n\n- The first 4 bytes of your response (the \"message length\") are valid.\n- The correlation ID in the response header matches the correlation ID in the request header.\n- The error code in the response body is `0` (No Error).\n- The `throttle_time_ms` field in the response is `0`.\n- The `responses` field in the response has 1 element, and in that element:\n  - The `topic_id` field matches what was sent in the request.\n  - The `partitions` array has 1 element, and in that element:\n    - The `partition_index` field is `0`.\n    - The `error_code` field is `100` (UNKNOWN_TOPIC).\n\n### Notes\n\n- You'll need to parse the `Fetch` request in this stage to get the `topic_id` to send in the response.\n- The official docs for the `Fetch` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_Fetch). Make sure\n  to scroll down to the \"Fetch Response (Version: 16)\" section.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll start encoding your response to the `Fetch` requests.","name":"Fetch with an unknown topic","position":15,"position-within-course":15,"position-within-extension":3,"primary-extension-slug":"consuming-messages","secondary-extension-slugs":[],"slug":"hn6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"5645f865-db07-4b4a-a762-ad52fc926eca","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":19,"cpp":3,"nim":null,"php":null,"zig":null,"dart":null,"java":2,"mojo":null,"odin":null,"ruby":null,"rust":12,"gleam":1,"ocaml":null,"scala":null,"swift":null,"csharp":2,"elixir":null,"fsharp":null,"kotlin":null,"python":6,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":3,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `DescribeTopicPartitions` response for a single topic with multiple partitions.\n\n🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\nIn the meantime, please use\n[this link](https://forum.codecrafters.io/new-topic?category=Challenges\u0026tags=challenge%3Akafka\u0026title=Question+about+KU4+%28DescribeTopicPartition+with+single+topic+but+multiple+partitions%29\u0026body=%3Cyour+question+here%3E)\nto ask questions on the forum.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh /tmp/server.properties\n```\n\nIt'll then connect to your server on port 9092 and send a `DescribeTopicPartitions` (v0) request. The request will contain an single topic name. The topic exists and has 2 partitions assigned to it.\n\nThe tester will validate that:\n\n- The first 4 bytes of your response (the \"message length\") are valid.\n- The correlation ID in the response header matches the correlation ID in the request header.\n- The error code in the response body is `0` (NO_ERROR).\n- The response body should be valid DescribeTopicPartitionResponse.\n- The `topic_name` field in the response should be equal to the topic name sent in the request.\n- The `topic_id` field in the response should be equal to the topic UUID of the topic.\n- The partition response should contain details of the 2 partitions assigned to the topic.\n- There should be 2 partition responses.\n- The error code in both the partition responses should be `0` (NO_ERROR).\n- The `partition_index` field in both the partition responses should be equal to the partition ID of the partition assigned to the topic.\n\n### Notes\n\n- The official docs for the `DescribeTopicPartitions` request can be found [here](https://kafka.apache.org/protocol.html#The_Messages_DescribeTopicPartitions).","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll implement the DescribeTopicPartition response for a single topic with multiple partitions.","name":"List for multiple partitions","position":11,"position-within-course":11,"position-within-extension":4,"primary-extension-slug":"listing-partitions","secondary-extension-slugs":[],"slug":"ku4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"ceb912d9-0020-4feb-8c00-334bec44cd07","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":139,"cpp":23,"nim":null,"php":null,"zig":null,"dart":null,"java":69,"mojo":null,"odin":null,"ruby":null,"rust":103,"gleam":14,"ocaml":null,"scala":null,"swift":null,"csharp":12,"elixir":null,"fsharp":null,"kotlin":null,"python":58,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":22,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add an entry for the `DescribeTopicPartitions` API to the APIVersions response.\n\n🚧 **We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\nIn the meantime, please use\n[this link](https://forum.codecrafters.io/new-topic?category=Challenges\u0026tags=challenge%3Akafka\u0026title=Question+about+yk1%3A+Include+DescribeTopicPartitions+in+APIVersions\u0026body=%3Cyour+question+here%3E)\nto ask questions on the forum.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh /tmp/server.properties\n```\n\nIt'll then connect to your server on port 9092 and send a valid `APIVersions` (v4) request.\n\nThe tester will validate that:\n\n- The first 4 bytes of your response (the \"message length\") are valid.\n- The correlation ID in the response header matches the correlation ID in the request header.\n- The error code in the response body is `0` (No Error).\n- The response body contains at least one entry for the API key 18 (`APIVersions`) and one entry for the API key 75 (`DescribeTopicPartitions`).\n- The response for the API key 18 (`APIVersions`) has a `MaxVersion` of at least 4, and a `MinVersion` of at least 0.\n- The response for the API key 75 (`DescribeTopicPartitions`) has a `MaxVersion` of at least 0, and a `MinVersion` of at least 0.\n\n### Notes\n\n- The `MaxVersion` for the `DescribeTopicPartitions` and `APIVersions` are different. For `APIVersions`, it is 4. For `DescribeTopicPartitions`, it is 0.\n- You'll still need to include the entry for `APIVersions` in your response to pass previous stages.\n- We'll get to implementing the `DescribeTopicPartitions` request in later stages, in this stage you only need to add an entry to the APIVersions response.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add the DescribeTopicPartitions API to the APIVersions response.","name":"Include DescribeTopicPartitions in APIVersions","position":8,"position-within-course":8,"position-within-extension":1,"primary-extension-slug":"listing-partitions","secondary-extension-slugs":[],"slug":"yk1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"687f106a-097b-4282-9b4f-67e446e86ed8","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":null,"go":1028,"cpp":129,"nim":null,"php":null,"zig":null,"dart":null,"java":465,"mojo":null,"odin":null,"ruby":null,"rust":815,"gleam":55,"ocaml":null,"scala":null,"swift":null,"csharp":75,"elixir":null,"fsharp":null,"kotlin":null,"python":559,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":315,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll send a response with a correlation ID.\n\n### Response message\n\nKafka brokers communicate with clients through the [Kafka wire protocol](https://kafka.apache.org/protocol.html). The protocol uses a request-response model, where the client sends a request message and the broker replies with a response message.\n\nA Kafka response message has three parts:\n1. `message_size`\n2. Header\n3. Body\n\nFor this stage, you can ignore the body and just focus on `message_size` and the header. You'll learn about response bodies in a later stage.\n\n#### The `message_size` field\n\nThe [`message_size`](https://kafka.apache.org/protocol.html#protocol_common) field is a 32-bit signed integer. It specifies the size of the header and body.\n\nFor this stage, the tester will only assert that your `message_size` field is 4 bytes long—it won't check the value. You'll implement correct `message_size` values in a later stage.\n\n#### Header\n\nKafka has a few different header versions. The way Kafka determines which header version to use is a bit complicated and is outside the scope of this challenge. For more information, take a look at [KIP-482](https://cwiki.apache.org/confluence/display/KAFKA/KIP-482%3A+The+Kafka+Protocol+should+Support+Optional+Tagged+Fields) and this [Stack Overflow answer](https://stackoverflow.com/a/71853003).\n\nIn this stage, you will use [response header v0](https://kafka.apache.org/protocol.html#protocol_messages) (scroll down).\n\nResponse header v0 contains a single field: [`correlation_id`](https://developer.confluent.io/patterns/event/correlation-identifier/). This field lets clients match responses to their original requests. Here's how it works:\n\n1. The client generates a correlation ID.\n2. The client sends a request that includes the correlation ID.\n3. The broker sends a response that includes the same correlation ID.\n4. The client receives the response and matches the correlation ID to the original request.\n\nThe `correlation_id` field is a 32-bit signed integer. For this stage, your program must respond with a hard-coded `correlation_id` of 7.\n\n### Tests\n\nThe tester will execute your program like this:\n```\n$ ./your_program.sh\n```\n\nIt'll then connect to your broker on port 9092 and send a request:\n```\n$ echo -n \"Placeholder request\" | nc -v localhost 9092 | hexdump -C\n```\n\nYour broker must send a response with a correlation ID of 7:\n```java\n00 00 00 00  // message_size:   0 (any value works)\n00 00 00 07  // correlation_id: 7\n```\n\n### Notes\n\n- For this stage, you don't need to parse the request. You'll learn about request parsing in a later stage.\n- All integers are in [big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) order.","difficulty":"easy","is-paid":false,"marketing-markdown":"In this stage, you'll start implementing the ResponseHeader.","name":"Send Correlation ID","position":2,"position-within-course":2,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"nv3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"4cd22891-8eaa-4f67-8b58-30b0403e59aa","type":"languages","attributes":{"name":"JavaScript","slug":"javascript","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"89ba5875-4e47-4b3e-b362-1981bd742be6","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"language":{"data":{"id":"4cd22891-8eaa-4f67-8b58-30b0403e59aa","type":"language"}}}},{"id":"16121c66-8a81-452d-8c3a-f9fa221e7936","type":"languages","attributes":{"name":"C++","slug":"cpp","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"735e182b-1122-4270-9e0f-458663791c2d","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"language":{"data":{"id":"16121c66-8a81-452d-8c3a-f9fa221e7936","type":"language"}}}},{"id":"eafb6f56-30a3-49d8-90b1-a2e051db26cf","type":"languages","attributes":{"name":"Gleam","slug":"gleam","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"bfec052d-a5c2-428f-a515-15feee8471bb","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"language":{"data":{"id":"eafb6f56-30a3-49d8-90b1-a2e051db26cf","type":"language"}}}},{"id":"fb72dae0-177a-45cc-a63e-71f9dd3184ac","type":"languages","attributes":{"name":"C#","slug":"csharp","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"d7dbaafb-d66a-4328-bf7b-bd7e57ba943c","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"language":{"data":{"id":"fb72dae0-177a-45cc-a63e-71f9dd3184ac","type":"language"}}}},{"id":"1dbc76cc-c216-4776-a605-3a5784b801a9","type":"languages","attributes":{"name":"Java","slug":"java","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"bdbb9c46-6d72-40c2-a815-5070045db1da","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"language":{"data":{"id":"1dbc76cc-c216-4776-a605-3a5784b801a9","type":"language"}}}},{"id":"bba6fdca-852f-4592-98a9-9bd071305a69","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"language":{"data":{"id":"3236a60c-e348-4db7-9e6a-e2826b38d991","type":"language"}}}},{"id":"2f7a019f-c4ee-4387-af54-ab342ef5bbbd","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"language":{"data":{"id":"a58f0983-d67d-47e6-97e7-c02aec9ec269","type":"language"}}}},{"id":"88f3aed8-b3ef-43be-90b5-63c937407e30","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"0a78fcfa-6cb8-436e-9590-b82ee356fe3b","type":"course"}},"language":{"data":{"id":"5ddd40dd-1539-4214-a40c-cc7a9e5edf35","type":"language"}}}},{"id":"9a85afbe-73e1-420f-bacc-47486f9d04a9","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{"c":8,"go":367,"cpp":58,"nim":null,"php":null,"zig":1,"dart":null,"java":98,"mojo":null,"odin":null,"ruby":39,"rust":514,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":34,"elixir":null,"fsharp":null,"kotlin":12,"python":332,"racket":null,"clojure":null,"crystal":null,"haskell":12,"reasonml":null,"commonlisp":null,"javascript":116,"typescript":74},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement support for creating a blob using the [`git\nhash-object`](https://git-scm.com/docs/git-hash-object) command.\n\n### The `git hash-object` command\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  `git hash-object` is used to compute the SHA hash of a Git object. When used with the `-w` flag, it\n  also writes the object to the `.git/objects` directory.\n\n  Here's an example of using `git hash-object`:\n\n  ```bash\n  # Create a file with some content\n  $ echo -n \"hello world\" \u003e test.txt\n\n  # Compute the SHA hash of the file + write it to .git/objects\n  $ git hash-object -w test.txt\n  95d09f2b10159347eece71399a7e2e907ea3df4f\n\n  # Verify that the file was written to .git/objects\n  $ file .git/objects/95/d09f2b10159347eece71399a7e2e907ea3df4f\n  .git/objects/95/d09f2b10159347eece71399a7e2e907ea3df4f: zlib compressed data\n  ```\n\n\u003c/details\u003e\n\n### Blob Object Storage (Recap)\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  As mentioned in the previous stage, each Git Blob is stored as a separate file in the `.git/objects` directory. The file\n  contains a header and the contents of the blob object, compressed using Zlib.\n\n  The format of a blob object file looks like this (after Zlib decompression):\n\n  ```\n  blob \u003csize\u003e\\0\u003ccontent\u003e\n  ```\n\n  - `\u003csize\u003e` is the size of the content (in bytes)\n  - `\\0` is a null byte\n  - `\u003ccontent\u003e` is the actual content of the file\n\n  For example, if the contents of a file are `hello world`, the blob object file would look like this (after Zlib decompression):\n\n  ```\n  blob 11\\0hello world\n  ```\n\n\u003c/details\u003e\n\n### Tests\n\nThe tester will first initialize a new git repository using your program:\n\n```bash\n$ mkdir test_dir \u0026\u0026 cd test_dir\n$ /path/to/your_program.sh init\n```\n\nIt'll write some random data to a file:\n\n```bash\n$ echo \"hello world\" \u003e test.txt\n```\n\nIt'll then run your program like this:\n\n```bash\n$ ./your_program.sh hash-object -w test.txt\n3b18e512dba79e4c8300dd08aeb37f8e728b8dad\n```\n\nThe tester will verify that:\n\n- Your program prints a 40-character SHA hash to stdout\n- The file written to `.git/objects` matches what the official `git` implementation would write\n\n### Notes\n\n- Although the object file is stored with zlib compression, the SHA hash needs to be computed over\n  the \"uncompressed\" contents of the file, not the compressed version.\n- The input for the SHA hash is the header (`blob \u003csize\u003e\\0`) + the actual contents of the file,\n  not just the contents of the file.","difficulty":"medium","is-paid":true,"marketing-markdown":"In the previous stage, we learnt how to read a blob. In this stage, we'll\npersist a blob by implementing the `git hash-object` command.","name":"Create a blob object","position":3,"position-within-course":3,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"jt4","tester-source-code-url":"https://github.com/codecrafters-io/git-tester/blob/master/internal/stage_create_blob.go"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"918f829e-c076-4f9d-850c-478cad96965d","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{"c":5,"go":171,"cpp":28,"nim":null,"php":null,"zig":1,"dart":null,"java":47,"mojo":null,"odin":null,"ruby":14,"rust":233,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":16,"elixir":null,"fsharp":null,"kotlin":6,"python":150,"racket":null,"clojure":null,"crystal":null,"haskell":9,"reasonml":null,"commonlisp":null,"javascript":58,"typescript":28},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `git commit-tree` command, which is used to create a commit object.\n\n### Commits\n\nLet's move on to the last git object we'll be dealing with in this\nchallenge: [the commit](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects#_git_commit_objects).\n\nA commit object contains information like:\n\n- Committer/Author name + email\n- Timestamp\n- Tree SHA\n- Parent commit SHA(s), if any\n\nWe don't have a detailed description of the commit object format here, but you can read more about it\n[here](https://stackoverflow.com/questions/22968856/what-is-the-file-format-of-a-git-commit-object-data-structure).\n\n### The `git commit-tree` command\n\nThe `git commit-tree` command creates a commit object. Example usage:\n\n```bash\n# Create a new directory and cd into it\n$ mkdir test_dir \u0026\u0026 cd test_dir\n\n# Initialize a new git repository\n$ git init\nInitialized empty Git repository in /path/to/test_dir/.git/\n\n# Create a tree, get its SHA\n$ echo \"hello world\" \u003e test.txt\n$ git add test.txt\n$ git write-tree\n4b825dc642cb6eb9a060e54bf8d69288fbee4904\n\n# Create the initial commit\n$ git commit-tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904 -m \"Initial commit\"\n3b18e512dba79e4c8300dd08aeb37f8e728b8dad\n\n# Write some changes, get another tree SHA\n$ echo \"hello world 2\" \u003e test.txt\n$ git add test.txt\n$ git write-tree\n5b825dc642cb6eb9a060e54bf8d69288fbee4904\n\n# Create a new commit with the new tree SHA\n$ git commit-tree 5b825dc642cb6eb9a060e54bf8d69288fbee4904 -p 3b18e512dba79e4c8300dd08aeb37f8e728b8dad -m \"Second commit\"\n```\n\nThe output of `git commit-tree` is the 40-char SHA hash of the commit object that was written to `.git/objects`.\n\n### Tests\n\nYour program will be invoked like this:\n\n```\n$ ./your_program.sh commit-tree \u003ctree_sha\u003e -p \u003ccommit_sha\u003e -m \u003cmessage\u003e\n```\n\nYour program must create a commit object and print its 40-char SHA to\nstdout.\n\nTo keep things simple:\n\n- You'll receive exactly one parent commit\n- You'll receive exactly one line in the message\n- You're free to hardcode any valid name/email for the author/committer fields\n\n\nTo verify your changes, the tester will read the commit object from the\n`.git` directory. It'll use the `git show` command to do this.","difficulty":"medium","is-paid":true,"marketing-markdown":"Let's move on to the last git object we'll be dealing with in this\nchallenge: the commit. In this stage, you'll create a commit by\nimplementing the [`git commit-tree`](https://git-scm.com/docs/git-commit-tree)\ncommand.","name":"Create a commit","position":6,"position-within-course":6,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"jm9","tester-source-code-url":"https://github.com/codecrafters-io/git-tester/blob/master/internal/stage_create_commit.go"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"ae8a7540-0589-4ebd-8e23-926cf8e8be23","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":5,"go":273,"cpp":46,"nim":null,"php":null,"zig":1,"dart":null,"java":70,"mojo":null,"odin":null,"ruby":31,"rust":376,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":25,"elixir":null,"fsharp":null,"kotlin":10,"python":256,"racket":null,"clojure":null,"crystal":null,"haskell":12,"reasonml":null,"commonlisp":null,"javascript":91,"typescript":47},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `git ls-tree` command, which is used to inspect a tree object.\n\n### Tree objects\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  In this stage, we'll deal with our next Git object type: [trees](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects#_tree_objects).\n\n  Trees are used to store directory structures.\n\n  A tree object has multiple \"entries\". Each entry includes:\n\n  - A SHA hash that points to a blob or tree object\n    - If the entry is a file, this points to a blob object\n    - If the entry is a directory, this points to a tree object\n  - The name of the file/directory\n  - The mode of the file/directory\n    - This is a simplified version of the permissions you'd see in a Unix file system.\n    - For files, the valid values are:\n        - `100644` (regular file)\n        - `100755` (executable file)\n        - `120000` (symbolic link)\n    - For directories, the value is `40000`\n    - There are other values for submodules, but we won't be dealing with those in this challenge.\n\n  For example, if you had a directory structure like this:\n\n  ```\n  your_repo/\n    - file1\n    - dir1/\n      - file_in_dir_1\n      - file_in_dir_2\n    - dir2/\n      - file_in_dir_3\n  ```\n\n  The entries in the tree object would look like this:\n\n  ```\n  40000 dir1 \u003ctree_sha_1\u003e\n  40000 dir2 \u003ctree_sha_2\u003e\n  100644 file1 \u003cblob_sha_1\u003e\n  ```\n\n  - Line 1 (`40000 dir1 \u003ctree_sha_1\u003e`) indicates that `dir1` is a directory with the SHA hash `\u003ctree_sha_1\u003e`\n  - Line 2 (`40000 dir2 \u003ctree_sha_2\u003e`) indicates that `dir2` is a directory with the SHA hash `\u003ctree_sha_2\u003e`\n  - Line 3 (`100644 file1 \u003cblob_sha_1\u003e`) indicates that `file1` is a regular file with the SHA hash `\u003cblob_sha_1\u003e`\n\n  `dir1` and `dir2` would be tree objects themselves, and their entries would contain the files/directories inside them.\n\n\u003c/details\u003e\n\n### The `ls-tree` command\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  The `git ls-tree` command is used to inspect a tree object.\n\n  For a directory structure like this:\n\n  ```\n  your_repo/\n    - file1\n    - dir1/\n      - file_in_dir_1\n      - file_in_dir_2\n    - dir2/\n      - file_in_dir_3\n  ```\n\n  The output of `git ls-tree` would look like this:\n\n  ```bash\n  $ git ls-tree \u003ctree_sha\u003e\n  040000 tree \u003ctree_sha_1\u003e\tdir1\n  040000 tree \u003ctree_sha_2\u003e\tdir2\n  100644 blob \u003cblob_sha_1\u003e\tfile1\n  ```\n\n  Note that the output is alphabetically sorted, this is how Git stores entries in the tree object internally.\n\n  In this stage you'll implement the `git ls-tree` command with the `--name-only` flag. Here's how the output looks with\n  the `--name-only` flag:\n\n  ```bash\n  $ git ls-tree --name-only \u003ctree_sha\u003e\n  dir1\n  dir2\n  file1\n  ```\n\n  The tester uses `--name-only` since this output format is easier to test against.\n\n  We recommend implementing the full `ls-tree` output too since that'll require that you parse all data\n  in the tree object, not just filenames.\n\n\u003c/details\u003e\n\n### Tree Object Storage\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  Just like blobs, tree objects are stored in the `.git/objects` directory. If the hash of a tree object is `e88f7a929cd70b0274c4ea33b209c97fa845fdbc`,\n  the path to the object would be `./git/objects/e8/8f7a929cd70b0274c4ea33b209c97fa845fdbc`.\n\n  The format of a tree object file looks like this (after Zlib decompression):\n\n  ```\n  tree \u003csize\u003e\\0\n  \u003cmode\u003e \u003cname\u003e\\0\u003c20_byte_sha\u003e\n  \u003cmode\u003e \u003cname\u003e\\0\u003c20_byte_sha\u003e\n  ```\n\n  (The above code block is formatted with newlines for readability, but the actual file doesn't contain newlines)\n\n  - The file starts with `tree \u003csize\u003e\\0`. This is the \"object header\", similar to what we saw with blob objects.\n  - After the header, there are multiple entries. Each entry is of the form `\u003cmode\u003e \u003cname\u003e\\0\u003csha\u003e`.\n    - `\u003cmode\u003e` is the mode of the file/directory (check the previous section for valid values)\n    - `\u003cname\u003e` is the name of the file/directory\n    - `\\0` is a null byte\n    - `\u003c20_byte_sha\u003e` is the 20-byte SHA-1 hash of the blob/tree (this is **not** in hexadecimal format)\n\n  You can read more about the internal format of a tree object [here](https://stackoverflow.com/questions/14790681/what-is-the-internal-format-of-a-git-tree-object).\n\n\u003c/details\u003e\n\n### Tests\n\nThe tester will use your program to initialize a new repository:\n\n```bash\n$ mkdir test_dir \u0026\u0026 cd test_dir\n$ /path/to/your_program.sh init\n```\n\nIt'll then write a tree object to the `.git/objects` directory.\n\nIt'll then run your program like this:\n\n```bash\n$ /path/to/your_program.sh ls-tree --name-only \u003ctree_sha\u003e\n```\n\nIt'll verify that the output of your program matches the contents of the tree object.\n\nFor a directory structure like this:\n\n```\nyour_repo/\n  - file1\n  - dir1/\n    - file_in_dir_1\n    - file_in_dir_2\n  - dir2/\n    - file_in_dir_3\n```\n\nThe output expected is:\n\n```\ndir1\ndir2\nfile1\n```\n\n### Notes\n\n- In a tree object file, the SHA hashes are not in hexadecimal format. They're just raw bytes (20 bytes long).\n- In a tree object file, entries are sorted by their name. The output of `ls-tree` matches this order.","difficulty":"medium","is-paid":true,"marketing-markdown":"Now that we've learnt how to read/write blobs, let's move onto our next\nGit object: [the tree](https://developer.github.com/v3/git/trees/). In\nthis stage, you'll read a tree object from storage by implementing the\n`git ls-tree` command.","name":"Read a tree object","position":4,"position-within-course":4,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"kp1","tester-source-code-url":"https://github.com/codecrafters-io/git-tester/blob/03984478122959f23a866a0df102413a5ac08e67/internal/stage_read_tree.go#L20"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"61a5e563-76f4-4648-9733-a4d65b572d07","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":5,"go":190,"cpp":34,"nim":null,"php":null,"zig":1,"dart":null,"java":54,"mojo":null,"odin":null,"ruby":18,"rust":259,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":16,"elixir":null,"fsharp":null,"kotlin":6,"python":170,"racket":null,"clojure":null,"crystal":null,"haskell":9,"reasonml":null,"commonlisp":null,"javascript":63,"typescript":28},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement writing a tree to the `.git/objects` directory.\n\n### The `git write-tree` command\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  The `git write-tree` command creates a tree object from the current state of the \"staging area\". The\n  staging area is a place where changes go when you run `git add`.\n\n  In this challenge we won't implement a staging area, we'll just assume that all files in the working directory are staged.\n\n  Here's an example of using `git write-tree`:\n\n  ```bash\n  # Create a file with some content\n  $ echo \"hello world\" \u003e test.txt\n\n  # Add the file to the staging area (we won't implement a staging area in this challenge)\n  $ git add test.txt\n\n  # Write the tree to .git/objects\n  $ git write-tree\n  4b825dc642cb6eb9a060e54bf8d69288fbee4904\n  ```\n\n  The output of `git write-tree` is the 40-char SHA hash of the tree object that was written to `.git/objects`.\n\n  To implement this, you'll need to:\n\n  - Iterate over the files/directories in the working directory\n  - If the entry is a file, create a blob object and record its SHA hash\n  - If the entry is a directory, recursively create a tree object and record its SHA hash\n  - Once you have all the entries and their SHA hashes, write the tree object to the `.git/objects` directory\n\n  If you're testing this against `git` locally, make sure to run `git add .` before `git write-tree`, so that\n  all files in the working directory are staged.\n\n\u003c/details\u003e\n\n### Tree File Storage (recap)\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  We covered the format of a tree object file in the previous stage. Here's a quick recap of what\n  a tree object file looks like (before Zlib compression):\n\n  ```\n  tree \u003csize\u003e\\0\n  \u003cmode\u003e \u003cname\u003e\\0\u003c20_byte_sha\u003e\n  \u003cmode\u003e \u003cname\u003e\\0\u003c20_byte_sha\u003e\n  ```\n\n  (The above code block is formatted with newlines for readability, but the actual file doesn't contain newlines)\n\n  - The file starts with `tree \u003csize\u003e\\0`. This is the \"object header\", similar to what we saw with blob objects.\n  - After the header, there are multiple entries. Each entry is of the form `\u003cmode\u003e \u003cname\u003e\\0\u003csha\u003e`.\n    - `\u003cmode\u003e` is the mode of the file/directory\n    - `\u003cname\u003e` is the name of the file/directory\n    - `\\0` is a null byte\n    - `\u003c20_byte_sha\u003e` is the 20-byte SHA-1 hash of the blob/tree (this is **not** in hexadecimal format)\n\n  You can read more about the internal format of a tree object [here](https://stackoverflow.com/questions/14790681/what-is-the-internal-format-of-a-git-tree-object).\n\n\u003c/details\u003e\n\n### Tests\n\nThe tester will initialize a new Git repository using your program:\n\n```bash\n$ mkdir test_dir \u0026\u0026 cd test_dir\n$ /path/to/your_program.sh init\n```\n\nIt'll create some random files and directories:\n\n```bash\n$ echo \"hello world\" \u003e test_file_1.txt\n$ mkdir test_dir_1\n$ echo \"hello world\" \u003e test_dir_1/test_file_2.txt\n$ mkdir test_dir_2\n$ echo \"hello world\" \u003e test_dir_2/test_file_3.txt\n```\n\nAnd then run your program like this:\n\n```bash\n$ /path/to/your_program.sh write-tree\n4b825dc642cb6eb9a060e54bf8d69288fbee4904\n```\n\nYou're expected to write the entire working directory as a tree object\nand print the 40-char SHA to stdout.\n\nThe tester will verify that the output of your program matches the SHA hash\nof the tree object that the official `git` implementation would write.\n\n### Notes\n\n- Remember to ignore the `.git` directory when creating entries in the tree object.\n- Your implementation of `git write-tree` will need to handle nested directories. A recursive implementation\n  will help here, since you'll need to create tree objects for each subdirectory to be able to create the\n  parent directory's tree object.\n- The implementation of `git write-tree` here differs slightly from the official `git` implementation. The\n  official `git` implementation uses the staging area to determine what to write to the tree object. We'll\n  just assume that all files in the working directory are staged.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll write a tree to git storage by implementing the [`git\nwrite-tree`](https://git-scm.com/docs/git-write-tree) command.\n\nTo keep things simple, we won't implement an `index`, we'll just assume\nthat all changes in the worktree are staged.","name":"Write a tree object","position":5,"position-within-course":5,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"fe4","tester-source-code-url":"https://github.com/codecrafters-io/git-tester/blob/03984478122959f23a866a0df102413a5ac08e67/internal/stage_write_tree.go#L21"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"b593915f-656f-4892-ad3a-87c088b08968","type":"course-stages","attributes":{"approved-comments-count":3,"community-solution-counts":{},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `git init` command.\n\n### The `git init` command\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  `git init` initializes a Git repository by creating a `.git` directory with some files\n  \u0026 directories inside it.\n\n  You can learn more about what's inside the `.git` folder [here](https://blog.meain.io/2023/what-is-in-dot-git/). We've\n  included a description of the files \u0026 directores we'll be dealing with in this stage below.\n\n\u003c/details\u003e\n\n### The `.git` directory\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  At a bare minimum, a `.git` directory should contain the following files \u0026 directories:\n\n  ```\n  - .git/\n    - objects/\n    - refs/\n    - HEAD (should contain \"ref: refs/heads/main\\n\" for a new repository)\n  ```\n\n  - `objects/`\n    - This directory contains [Git objects](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).\n    - We'll learn more about what Git objects are in later stages.\n  - `refs/`\n    - This directory contains [Git references](https://git-scm.com/book/en/v2/Git-Internals-Git-References).\n    - We'll deal with this in later stages too.\n  - `HEAD`\n    - This file contains a reference to the currently checked out branch.\n    - For a new repository, it's contents will be `ref: refs/heads/main\\n`.\n\n  You can learn more about these in detail [here](https://blog.meain.io/2023/what-is-in-dot-git/).\n\u003c/details\u003e\n\n### Tests\n\nThe tester will run your program in a new empty directory like this:\n\n```bash\n# Create a new directory and cd into it\n$ mkdir test_dir \u0026\u0026 cd test_dir\n\n# Run your program\n$ /path/to/your_program.sh init\n```\n\nIt'll then check if the `.git` directory and its contents are created correctly.\n\n```bash\n# Check if .git directory exists\n$ test -d .git\n\n# Check if .git/objects directory exists\n$ test -d .git/objects\n\n# Check if .git/refs directory exists\n$ test -d .git/refs\n\n# Check if .git/HEAD file exists\n$ test -f .git/HEAD\n\n# Check if .git/HEAD contains either \"ref: refs/heads/main\\n\" or \"ref: refs/heads/master\\n\"\n$ cat .git/HEAD\n```\n\n### Notes\n\n- Git actually creates more files \u0026 directories than the ones mentioned above when you run `git init`. We've only included the ones\n  that are absolutely necessary for Git to function properly.\n- The `.git/HEAD` file has a newline at the end.\n- The `.git/HEAD` file can contain either `ref: refs/heads/main\\n` or `ref: refs/heads/master\\n`, the tester will\n  work with either of these.","difficulty":"very_easy","is-paid":false,"marketing-markdown":"In this stage, you'll implement the `git init` command. You'll initialize\na git repository by creating a `.git` directory and some files inside it.","name":"Initialize the .git directory","position":1,"position-within-course":1,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"gg4","tester-source-code-url":"https://github.com/codecrafters-io/git-tester/blob/03984478122959f23a866a0df102413a5ac08e67/internal/stage_init.go#L12"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"b69e0f63-0786-475c-acd7-7c5a494b97ad","type":"course-stages","attributes":{"approved-comments-count":4,"community-solution-counts":{"c":14,"go":780,"cpp":256,"nim":null,"php":null,"zig":1,"dart":null,"java":323,"mojo":null,"odin":null,"ruby":71,"rust":1147,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":132,"elixir":null,"fsharp":null,"kotlin":22,"python":999,"racket":null,"clojure":null,"crystal":null,"haskell":27,"reasonml":null,"commonlisp":null,"javascript":517,"typescript":201},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for reading a blob using the `git cat-file` command.\n\n### Git objects\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  In this challenge, we'll deal with three [Git\n  objects](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects):\n\n  - Blobs (**This stage**)\n    - These are used to store file data.\n    - Blobs only store the contents of a file, not its name or permissions.\n  - Trees (Future stages)\n    - These are used to store directory structures.\n    - The information stored can include things like what files/directories are in a tree, their names and permissions.\n  - Commits (Future stages)\n    - These are used to store commit data.\n    - The information stored can include things like the commit message, author, committer, parent commit(s) and more.\n\n\n  All Git objects are identifiable by a 40-character SHA-1 hash, also known as the \"object hash\".\n\n  Here's an example of an object hash: `e88f7a929cd70b0274c4ea33b209c97fa845fdbc`.\n\u003c/details\u003e\n\n### Git Object Storage\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  Git objects are stored in the `.git/objects` directory. The path to an object is derived from its hash.\n\n  The path for the object with the hash `e88f7a929cd70b0274c4ea33b209c97fa845fdbc` would be:\n\n  ```bash\n  ./.git/objects/e8/8f7a929cd70b0274c4ea33b209c97fa845fdbc\n  ```\n\n  You'll see that the file isn't placed directly in the `./git/objects` directory. Instead, it's placed in a directory named with the\n  first two characters of the object's hash. The remaining 38 characters are used as the file name.\n\n  Each Git object has its own format for storage. We'll look at how Blobs are stored in this stage, and we'll cover\n  other objects in future stages.\n\u003c/details\u003e\n\n### Blob Object Storage\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  Each Git Blob is stored as a separate file in the `.git/objects` directory. The file contains a header and the contents of\n  the blob object, compressed using Zlib.\n\n  The format of a blob object file looks like this (after Zlib decompression):\n\n  ```\n  blob \u003csize\u003e\\0\u003ccontent\u003e\n  ```\n\n  - `\u003csize\u003e` is the size of the content (in bytes)\n  - `\\0` is a null byte\n  - `\u003ccontent\u003e` is the actual content of the file\n\n  For example, if the contents of a file are `hello world`, the blob object file would look like this (after Zlib decompression):\n\n  ```\n  blob 11\\0hello world\n  ```\n\u003c/details\u003e\n\n### The cat-file command\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  In this stage, you'll read a blob from a git repository by reading its contents from the `.git/objects` directory.\n\n  You'll do this using the first of multiple [\"plumbing\" commands](https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain)\n  we'll encounter in this challenge: [`git cat-file`](https://git-scm.com/docs/git-cat-file).\n\n  `git cat-file` is used to view the type of an object, its size, and its content. Example usage:\n\n  ```bash\n  $ git cat-file -p \u003cblob_sha\u003e\n  hello world # This is the contents of the blob\n  ```\n\n  To implement this, you'll need to:\n\n  - Read the contents of the blob object file from the `.git/objects` directory\n  - Decompress the contents using Zlib\n  - Extract the actual \"content\" from the decompressed data\n  - Print the content to stdout\n\n\u003c/details\u003e\n\n### Tests\n\nThe tester will first initialize a new git repository using your program, and then insert a blob with random contents into the `.git/objects` directory:\n\n```bash\n$ mkdir /tmp/test_dir \u0026\u0026 cd /tmp/test_dir\n$ /path/to/your_program.sh init\n$ echo \"hello world\" \u003e test.txt # The tester will use a random string, not \"hello world\"\n$ git hash-object -w test.txt\n3b18e512dba79e4c8300dd08aeb37f8e728b8dad\n```\n\nAfter that, it'll run your program like this:\n\n```bash\n$ /path/to/your_program.sh cat-file -p 3b18e512dba79e4c8300dd08aeb37f8e728b8dad\nhello world\n```\n\nThe tester will verify that the output of your program matches the contents of the blob.\n\n### Notes\n\n- In many programming languages the default print function (like [`fmt.Println`](https://pkg.go.dev/fmt#example-Println))\n  will append a newline to the output. The output of `cat-file` must not contain a\n  newline at the end, so you might need to use a different function to print the output.\n\n{{#lang_is_python}}\n- Keep in mind that Git uses [Zlib](https://en.wikipedia.org/wiki/Zlib) to\n  compress objects. You can use Python's built-in\n  [zlib](https://docs.python.org/3/library/zlib.html) library to read these\n  compressed files.\n{{/lang_is_python}}\n\n{{#lang_is_ruby}}\n- Keep in mind that Git uses [Zlib](https://en.wikipedia.org/wiki/Zlib) to\n  compress objects. You can use Ruby's built-in\n  [Zlib](https://ruby-doc.org/stdlib-2.7.0/libdoc/zlib/rdoc/Zlib.html)\n  library to read these compressed files.\n{{/lang_is_ruby}}\n\n{{#lang_is_go}}\n- Keep in mind that Git uses [Zlib](https://en.wikipedia.org/wiki/Zlib) to\n  compress objects. You can use Go's built-in\n  [compress/zlib](https://golang.org/pkg/compress/zlib/) package to read\n these compressed files.\n{{/lang_is_go}}\n\n{{#lang_is_rust}}\n- Keep in mind that Git uses [Zlib](https://en.wikipedia.org/wiki/Zlib) to\n  compress objects. You can use the\n  [flate2](https://crates.io/crates/flate2) crate to read these compressed\n  files, we've included it in the `Cargo.toml` file.\n{{/lang_is_rust}}\n\n{{^lang_is_python}}\n{{^lang_is_ruby}}\n{{^lang_is_go}}\n{{^lang_is_rust}}\n- Keep in mind that Git uses [Zlib](https://en.wikipedia.org/wiki/Zlib) to\n  compress objects. Many languages have utils for dealing with zlib data in their standard library. If not,\n  you might need to use a third-party library to read these compressed files.\n{{/lang_is_rust}}\n{{/lang_is_go}}\n{{/lang_is_ruby}}\n{{/lang_is_python}}","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll read a blob from your git repository by fetching its\ncontents from the `.git/objects` directory.\n\nYou'll do this using the first of multiple [\"plumbing\"\ncommands](https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain)\nwe'll encounter in this challenge: [`git\ncat-file`](https://git-scm.com/docs/git-cat-file).","name":"Read a blob object","position":2,"position-within-course":2,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ic4","tester-source-code-url":"https://github.com/codecrafters-io/git-tester/blob/03984478122959f23a866a0df102413a5ac08e67/internal/stage_read_blob.go#L18"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"0fb86749-99ac-4d05-9a4d-628811d14a98","type":"course-stages","attributes":{"approved-comments-count":10,"community-solution-counts":{"c":1,"go":33,"cpp":8,"nim":null,"php":null,"zig":null,"dart":null,"java":19,"mojo":null,"odin":null,"ruby":5,"rust":67,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":3,"elixir":null,"fsharp":null,"kotlin":2,"python":62,"racket":null,"clojure":null,"crystal":null,"haskell":3,"reasonml":null,"commonlisp":null,"javascript":10,"typescript":3},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement cloning a public repository from GitHub.\n\nThis is the last stage of the challenge, and probably the hardest across all of CodeCrafters!\n\nWe might split this into an extension with multiple stages in the future, but for now it's just one big stage.\n\nWe don't have detailed instructions for this stage, so you're all on your own here. A few pointers to get you started:\n\n- [This forum post](https://forum.codecrafters.io/t/step-for-git-clone-implementing-the-git-protocol/4407) has some\n  suggestions on how to incrementally implement this.\n- You'll need to use Git's [Smart HTTP transfer protocol](https://www.git-scm.com/docs/http-protocol) for this.\n- To know more about the protocol format, we recommend reading:\n  - [gitprotocol-pack.txt](https://github.com/git/git/blob/795ea8776befc95ea2becd8020c7a284677b4161/Documentation/gitprotocol-pack.txt)\n  - [gitformat-pack.txt](https://github.com/git/git/blob/795ea8776befc95ea2becd8020c7a284677b4161/Documentation/gitformat-pack.txt)\n  - [Unpacking Git packfiles](https://codewords.recurse.com/issues/three/unpacking-git-packfiles)\n  - [Sneaky git number encoding](https://medium.com/@concertdaw/sneaky-git-number-encoding-ddcc5db5329f).\n\n{{#lang_is_rust}}\nYou can use the [reqwest](https://crates.io/crates/reqwest) crate to make\nHTTP requests, we've included it in the `Cargo.toml` file.\n{{/lang_is_rust}}\n\n### Tests\n\nThe tester will run your program like this:\n\n```bash\n$ /path/to/your_program.sh clone https://github.com/blah/blah \u003csome_dir\u003e\n```\n\nYour program must create `\u003csome_dir\u003e` and clone the given repository into it.\n\nTo verify your changes, the tester will:\n\n- Check the contents of a random file\n- Read commit object attributes from the `.git` directory","difficulty":"hard","is-paid":true,"marketing-markdown":"This is the last stage of the challenge, and probably the hardest! In this\nstage, you'll clone a public repository from GitHub. To do this, you'll\nuse one of Git's [Transfer\nprotocols](https://git-scm.com/book/en/v2/Git-Internals-Transfer-Protocols).","name":"Clone a repository","position":7,"position-within-course":7,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"mg6","tester-source-code-url":"https://github.com/codecrafters-io/git-tester/blob/03984478122959f23a866a0df102413a5ac08e67/internal/stage_clone_repository.go#L80"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"832c2985-19e0-4709-9982-97245bf188e9","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"language":{"data":{"id":"a58f0983-d67d-47e6-97e7-c02aec9ec269","type":"language"}}}},{"id":"89caf68c-a30e-4606-bb22-9980aabb43cf","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"language":{"data":{"id":"63d38ef2-f131-4635-aa66-0cf404826f9b","type":"language"}}}},{"id":"1caaf758-ac98-4233-8427-bb332323753f","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"language":{"data":{"id":"3236a60c-e348-4db7-9e6a-e2826b38d991","type":"language"}}}},{"id":"d415bbd7-c108-4799-ade1-c5bea4f2aad6","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"language":{"data":{"id":"5ddd40dd-1539-4214-a40c-cc7a9e5edf35","type":"language"}}}},{"id":"bdb33525-950a-49f8-990f-1f79a2ca3e87","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"language":{"data":{"id":"4cd22891-8eaa-4f67-8b58-30b0403e59aa","type":"language"}}}},{"id":"07407b99-3b0b-44b1-992e-2638a6da6e7b","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"language":{"data":{"id":"16121c66-8a81-452d-8c3a-f9fa221e7936","type":"language"}}}},{"id":"e438c8c8-9a39-4d37-b39e-8da63499d327","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"beta"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"language":{"data":{"id":"fb72dae0-177a-45cc-a63e-71f9dd3184ac","type":"language"}}}},{"id":"6f979cea-d7af-42cf-8e8d-ca44857217c0","type":"languages","attributes":{"name":"Haskell","slug":"haskell","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"6a9ed9bf-2903-48b3-9e5c-01bd135260ab","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"language":{"data":{"id":"6f979cea-d7af-42cf-8e8d-ca44857217c0","type":"language"}}}},{"id":"10590f40-52ca-401b-803c-7101fd7e46ba","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"beta"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"language":{"data":{"id":"1dbc76cc-c216-4776-a605-3a5784b801a9","type":"language"}}}},{"id":"3ee6502c-281b-480f-a4bf-4a3efd209689","type":"languages","attributes":{"name":"TypeScript","slug":"typescript","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"ea1df949-3918-452e-93b0-f3e59f304d66","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"beta"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"language":{"data":{"id":"3ee6502c-281b-480f-a4bf-4a3efd209689","type":"language"}}}},{"id":"c9b581c8-6977-4f1b-9c8b-e1ee5fd7a10f","type":"languages","attributes":{"name":"Kotlin","slug":"kotlin","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"fa4e14e1-7dbc-40a9-8a22-693cb5db9391","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"language":{"data":{"id":"c9b581c8-6977-4f1b-9c8b-e1ee5fd7a10f","type":"language"}}}},{"id":"7e07ab8f-2bc0-4b20-bc72-1cd9c7e200ed","type":"languages","attributes":{"name":"Zig","slug":"zig","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"7310d6bc-dba8-45ea-96e2-ad3eb6c28977","type":"course-language-configurations","attributes":{"alpha-tester-usernames":["typesafe"],"release-status":"alpha"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"language":{"data":{"id":"7e07ab8f-2bc0-4b20-bc72-1cd9c7e200ed","type":"language"}}}},{"id":"4335f79c-209d-4d6b-95fc-162fb6cdcb02","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"4221b6a2-510e-471f-a0a6-8a9e85643911","type":"course"}},"language":{"data":{"id":"8ee02441-697a-4e6d-8015-44e472b0c1b8","type":"language"}}}},{"id":"10113866-6af4-4e9c-b498-84217eb14864","type":"course-extensions","attributes":{"description-markdown":"This extension covers magnet links. Magnet links allow downloading files without the need of downloading a .torrent file first.\n\nAlong the way, you'll learn about the [magnet URI format](https://en.wikipedia.org/wiki/Magnet_URI_scheme), the [extension protocol](https://www.bittorrent.org/beps/bep_0010.html) and the [metadata extension](https://www.bittorrent.org/beps/bep_0009.html).\n","name":"Magnet Links","position":1,"slug":"magnet-links"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}}}},{"id":"44575f40-7c51-4af5-a008-92a83d73bd6a","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":7,"go":131,"cpp":27,"nim":null,"php":null,"zig":10,"dart":null,"java":22,"mojo":null,"odin":null,"ruby":7,"rust":175,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":14,"elixir":10,"fsharp":null,"kotlin":8,"python":117,"racket":null,"clojure":null,"crystal":null,"haskell":3,"reasonml":null,"commonlisp":null,"javascript":10,"typescript":6},"concept-slugs":[],"description-markdown-template":"In this stage, you’ll download the entire file and save it to disk.\n\nYou can start with using a single peer to download all the pieces. You’ll need to download all the pieces, verify their integrity using piece hashes, and combine them to assemble the file.\n\n### Tests\n\nHere’s how the tester will execute your program:\n\n```\n$ ./your_bittorrent.sh download -o /tmp/test.txt sample.torrent\n```\n\nThe tester will validate that the file was downloaded correctly.\n\n**Optional:** To improve download speeds, you can download from multiple peers at once. You could have a work queue consisting of each piece that needs to be downloaded. Your worker (connection with a peer) could pick a piece from the work queue, attempt to download it, check the integrity, and write the downloaded piece into a buffer. Any failure (network issue, hashes not matching, peer not having the piece etc.) would put the piece back into the work queue to be tried again.","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll download the entire file. You'll download all the pieces, verify them using SHA-1 and save them to disk.","name":"Download the whole file","position":11,"position-within-course":11,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"jv8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"1ad5c4c0-d865-4858-835b-b0d781f2cb40","type":"course-stages","attributes":{"approved-comments-count":4,"community-solution-counts":{},"concept-slugs":["bencode"],"description-markdown-template":"[Bencode](https://en.wikipedia.org/wiki/Bencode) (pronounced *Bee-encode*) is a serialization format used in [the BitTorrent protocol](https://www.bittorrent.org/beps/bep_0003.html). It is used in torrent files and in communication between trackers and peers.\n\nBencode supports four data types:\n- strings\n- integers\n- arrays\n- dictionaries\n\nIn this stage, we'll focus on decoding strings.\n\nStrings are encoded as `\u003clength\u003e:\u003ccontents\u003e`. For example, the string `\"hello\"` is encoded as `\"5:hello\"`.\n\nYou'll implement a `decode` command which takes a bencoded value as input and prints the decoded value as JSON.\n\nHere’s how the tester will execute your program:\n\n```\n$ ./your_bittorrent.sh decode 5:hello\n\"hello\"\n```","difficulty":"very_easy","is-paid":false,"marketing-markdown":"[Bencode](https://en.wikipedia.org/wiki/Bencode) is a binary serialization format used in BitTorrent protocol. In this stage, you’ll decode a bencoded string.","name":"Decode bencoded strings","position":1,"position-within-course":1,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ns2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"8cd1efd2-bd2a-4080-af49-9c46c3b8a095","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":39,"go":406,"cpp":132,"nim":null,"php":null,"zig":36,"dart":null,"java":124,"mojo":null,"odin":null,"ruby":19,"rust":521,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":55,"elixir":30,"fsharp":null,"kotlin":32,"python":318,"racket":null,"clojure":null,"crystal":null,"haskell":8,"reasonml":null,"commonlisp":null,"javascript":90,"typescript":63},"concept-slugs":[],"description-markdown-template":"In this stage, you'll parse a torrent file and print information about the torrent.\n\nA torrent file (also known as a [metainfo file](https://www.bittorrent.org/beps/bep_0003.html#metainfo-files)) contains a bencoded dictionary with the following keys and values:\n\n- `announce`:\n    - URL to a \"tracker\", which is a central server that keeps track of peers participating in the sharing of a torrent.\n- `info`:\n    - A dictionary with keys:\n        - `length`: size of the file in bytes, for single-file torrents\n        - `name`: suggested name to save the file / directory as\n        - `piece length`: number of bytes in each piece\n        - `pieces`: concatenated SHA-1 hashes of each piece\n\n{{#lang_is_java}}\n**Note**: .torrent files contain bytes that aren’t valid UTF-16 characters. You’ll run into problems if you try to read the contents of this file as a `String`. Use `byte[]` instead.\n{{/lang_is_java}}\n{{#lang_is_kotlin}}\n**Note**: .torrent files contain bytes that aren’t valid UTF-16 characters. You’ll run into problems if you try to read the contents of this file as a `String`. Use `byte[]` instead.\n{{/lang_is_kotlin}}\n{{#lang_is_rust}}\n**Note:** .torrent files contain bytes that aren’t valid UTF-8 characters. You'll run into problems if you try to read the contents of this file as a `String`. Use `\u0026[u8]` or `Vec\u003cu8\u003e` instead.\n{{/lang_is_rust}}\n{{#lang_is_elixir}}\n**Note:** .torrent files contain bytes that aren’t valid UTF-8 characters. You'll run into problems if you try to read the contents of this file as a `String`. Use `binary` instead, see `IO.iodata_to_binary()`.\n{{/lang_is_elixir}}\n\n{{^lang_is_java}}\n{{^lang_is_kotlin}}\n{{^lang_is_rust}}\n{{^lang_is_elixir}}\n**Note:** .torrent files contain bytes that aren’t valid UTF-8 characters. If the language you're using treats strings as a sequence of unicode characters (like Python's [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str)), you'll need to use a byte sequence (like Python's [bytes](https://docs.python.org/3/library/stdtypes.html#bytes-objects)) instead.\n{{/lang_is_elixir}}\n{{/lang_is_rust}}\n{{/lang_is_kotlin}}\n{{/lang_is_java}}\n\n**Note**: The `info` dictionary looks slightly different for multi-file torrents. For this challenge, we'll only implement support for single-file torrents.\n\nIn this stage, we'll focus on extracting the tracker URL and the length of the file (in bytes).\n\nHere’s how the tester will execute your program:\n\n```\n$ ./your_bittorrent.sh info sample.torrent\n```\n\nand here’s the output it expects:\n\n```\nTracker URL: http://bittorrent-test-tracker.codecrafters.io/announce\nLength: 92063\n```","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you’ll parse a .torrent file and extract information about the torrent.","name":"Parse torrent file","position":5,"position-within-course":5,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ow9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"ec276239-df14-4b6d-9fcb-f69fa920bd05","type":"course-stages","attributes":{"approved-comments-count":4,"community-solution-counts":{"c":30,"go":352,"cpp":85,"nim":null,"php":null,"zig":34,"dart":null,"java":99,"mojo":null,"odin":null,"ruby":18,"rust":444,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":32,"elixir":26,"fsharp":null,"kotlin":20,"python":283,"racket":null,"clojure":null,"crystal":null,"haskell":6,"reasonml":null,"commonlisp":null,"javascript":59,"typescript":39},"concept-slugs":[],"description-markdown-template":"Info hash is a unique identifier for a torrent file. It's used when talking to trackers or peers.\n\nIn this stage, you'll calculate the info hash for a torrent file and print it in hexadecimal format.\n\nTo calculate the info hash, you'll need to:\n\n- Extract the `info` dictionary from the torrent file after parsing\n- Bencode the contents of the `info` dictionary\n- Calculate the SHA-1 hash of this bencoded dictionary\n\nHere’s how the tester will execute your program:\n```\n$ ./your_bittorrent.sh info sample.torrent\n```\nand here’s the output it expects:\n```\nTracker URL: http://bittorrent-test-tracker.codecrafters.io/announce\nLength: 92063\nInfo Hash: d69f91e6b2ae4c542468d1073a71d4ea13879a7f\n```","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll calculate a unique identifier for a torrent, known as info hash, used in communication with trackers and peers.","name":"Calculate info hash","position":6,"position-within-course":6,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"rb2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"8e8caf93-2ad9-4c4a-bbfb-ff04fcd782a6","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":22,"cpp":5,"nim":null,"php":null,"zig":1,"dart":null,"java":3,"mojo":null,"odin":null,"ruby":4,"rust":28,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":5,"elixir":4,"fsharp":null,"kotlin":4,"python":22,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":2},"concept-slugs":[],"description-markdown-template":"In this stage, you'll download one piece and save it to disk using a magnet link.\n\n### The `magnet_download_piece` command\n\nTo test your program, we'll introduce a new command in this stage: `magnet_download_piece`. Here's how it works:\n\n```bash\n$ ./your_bittorrent.sh magnet_download_piece -o /tmp/test-piece-0 \u003cmagnet-link\u003e 0\n```\n\nThis is similar to the `download_piece` command you've worked on previously, just that it takes a magnet link instead of a .torrent file path.\n\nFor this command, the overall flow you need to implement will look like this:\n\n- Parse magnet link to get the tracker URL\n- Perform the tracker GET request to get the list of peers\n- Establish a TCP connection with a peer, perform a base handshake\n- Perform the extension handshake\n- Get the info dictionary using the metadata extension (send `request` message, get `data` message)\n- Download blocks of the piece (same as the `download_piece` command from previous stages)\n- Save the piece to disk\n\n### Tests\n\nHere's how the tester will execute your program:\n\n```\n$ ./your_bittorrent.sh magnet_download_piece -o /tmp/test-piece-0 \u003cmagnet_link\u003e 0\n```\n\nThe tester will validate that the piece was downloaded correctly.\n\n### Notes\n\n- To test your program locally, you can use [these magnet links](https://github.com/codecrafters-io/bittorrent-test-seeder/blob/main/torrent_files/magnet_links.txt)","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll download one piece and save it to disk using a magnet link.","name":"Download a piece","position":18,"position-within-course":18,"position-within-extension":7,"primary-extension-slug":"magnet-links","secondary-extension-slugs":[],"slug":"qv6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"896bbd1c-9833-45f3-9879-c1d7bfb6d7da","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":1,"go":22,"cpp":4,"nim":null,"php":null,"zig":2,"dart":null,"java":4,"mojo":null,"odin":null,"ruby":2,"rust":27,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":6,"elixir":3,"fsharp":null,"kotlin":3,"python":26,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":1,"typescript":2},"concept-slugs":[],"description-markdown-template":"In this stage, you'll receive torrent metadata from a peer.\n\n### The metadata `data` message\n\nThe `data` message is the response to the `request` message that your peer sent in the previous stage.\n\nIt contains the actual metadata, which you'll need to download the file.\n\nThis message follows the standard BitTorrent extension message format:\n\n- message length prefix (4 bytes)\n- message id (1 byte)\n  - This will be 20, since this is a message implemented by an extension\n- payload (variable size)\n    - extension message id (1 byte)\n      - This will be your peer's metadata extension ID, which it sent as part of the extension handshake\n    - bencoded dictionary (variable size)\n      - This dictionary will look like this: `{'msg_type': 1, 'piece': 0, 'total_size': XXXX}`\n      - `msg_type` will be 1, since this is a `data` message\n      - `piece` will be 0, since we're only requesting one piece in this challenge\n      - `total_size` will be the length of the metadata piece\n    - metadata piece contents (variable size)\n\nThe \"metadata piece contents\" is what you're interested in. When these pieces are combined, they'll form a bencoded dictionary that\nlooks something like this (presented as JSON for readability):\n\n```\n{\n  \"piece length\": 262144,\n  \"pieces\": \"\u003chash1\u003e\u003chash2\u003e...\",\n  \"name\": \"debian-12.3.0-amd64-netinst.iso\",\n  \"length\": 67108864\n}\n```\n\nThis is same as the [info dictionary](https://www.bittorrent.org/beps/bep_0003.html#info-dictionary) in a .torrent file, which you've seen in previous stages.\n\nYou should be able to compute the hash of this and validate it against the info hash present in the magnet link.\n\n### Tests\n\nHere's how the tester will execute your program:\n\n```\n$ ./your_bittorrent.sh magnet_info \u003cmagnet-link\u003e\n```\n\nand here's the output it expects:\n\n```\nTracker URL: http://bittorrent-test-tracker.codecrafters.io/announce\nLength: 92063\nInfo Hash: d69f91e6b2ae4c542468d1073a71d4ea13879a7f\nPiece Length: 32768\nPiece Hashes:\n6e2275e604a0766656736e81ff10b55204ad8d35\ne876f67a2a8886e8f36b136726c30fa29703022d\nf00d937a0213df1982bc8d097227ad9e909acc17\n```\n\n### Notes\n\n- For this challenge, all torrents we use will have a single metadata piece (i.e. it'll fit in one 16kiB chunk).\n- You can use [these magnet links](https://github.com/codecrafters-io/bittorrent-test-seeder/blob/main/torrent_files/magnet_links.txt) to test your program locally.","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll receive torrent metadata from a peer.","name":"Receive metadata","position":17,"position-within-course":17,"position-within-extension":6,"primary-extension-slug":"magnet-links","secondary-extension-slugs":[],"slug":"zh1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"b1e2f4f6-be98-4b0f-9f49-064ddefacb6f","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{"c":21,"go":268,"cpp":47,"nim":null,"php":null,"zig":23,"dart":null,"java":44,"mojo":null,"odin":null,"ruby":12,"rust":319,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":25,"elixir":20,"fsharp":null,"kotlin":14,"python":214,"racket":null,"clojure":null,"crystal":null,"haskell":4,"reasonml":null,"commonlisp":null,"javascript":32,"typescript":22},"concept-slugs":[],"description-markdown-template":"In this stage, you’ll establish a TCP connection with a peer and complete a handshake.\n\nThe handshake is a message consisting of the following parts as described in the [peer protocol](https://www.bittorrent.org/beps/bep_0003.html#peer-protocol):\n\n1. length of the protocol string (BitTorrent protocol) which is `19` (1 byte)\n2. the string `BitTorrent protocol` (19 bytes)\n3. eight reserved bytes, which are all set to zero (8 bytes)\n4. sha1 infohash (20 bytes) (**NOT** the hexadecimal representation, which is 40 bytes long)\n5. peer id (20 bytes) (generate 20 random byte values)\n\nAfter we send a handshake to our peer, we should receive a handshake back in the same format.\n\nYour program should print the hexadecimal representation of the peer id you've received during the handshake.\n\nHere’s how the tester will execute your program:\n```\n$ ./your_bittorrent.sh handshake sample.torrent \u003cpeer_ip\u003e:\u003cpeer_port\u003e\n```\nand here’s the output it expects:\n```\nPeer ID: 0102030405060708090a0b0c0d0e0f1011121314\n```\n(Exact value will be different as it is randomly generated.)\n\n**Note**: To get a peer IP \u0026 port to test this locally, run `./your_bittorrent.sh peers sample.torrent` and pick any peer from the list.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you’ll establish a TCP connection with a peer and complete a handshake according to [BitTorrent Peer Protocol](https://www.bittorrent.org/beps/bep_0003.html#peer-protocol)","name":"Peer handshake","position":9,"position-within-course":9,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ca4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"1b03efea-68e3-4157-819b-7c0ce59870c4","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":18,"cpp":5,"nim":null,"php":null,"zig":1,"dart":null,"java":3,"mojo":null,"odin":null,"ruby":4,"rust":23,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":5,"elixir":4,"fsharp":null,"kotlin":4,"python":20,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":2},"concept-slugs":[],"description-markdown-template":"In this stage, you'll download an entire file and save it to disk using a magnet link.\n\n### The `magnet_download` command\n\nTo test your program, we'll introduce a new command in this stage: `magnet_download`. Here's how it works:\n\n```bash\n$ ./your_bittorrent.sh magnet_download -o /tmp/sample \u003cmagnet-link\u003e\n```\n\nThis is similar to the `magnet_download_piece` command from the previous stage, just that it downloads the entire file instead of a single piece. You'll\nneed to download all the pieces and then concatenate them in order to get the complete file.\n\n### Tests\n\nHere's how the tester will execute your program:\n```\n$ ./your_bittorrent.sh magnet_download -o /tmp/sample \u003cmagnet-link\u003e\n```\n\nThe tester will validate that the file was downloaded correctly.\n\n### Notes\n\n- To test your program locally, you can use [these magnet links](https://github.com/codecrafters-io/bittorrent-test-seeder/blob/main/torrent_files/magnet_links.txt)\n- To improve download speeds, you can consider pipelining your requests. [BitTorrent Economics Paper](http://bittorrent.org/bittorrentecon.pdf) recommends having upto 5 requests pending at once to avoid a delay between blocks being sent.","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll download the entire file and save it to disk using a magnet link.","name":"Download the whole file","position":19,"position-within-course":19,"position-within-extension":8,"primary-extension-slug":"magnet-links","secondary-extension-slugs":[],"slug":"dv7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"4110e0c6-3bf2-4d2b-b2c1-0c5d5e4900eb","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":43,"go":349,"cpp":140,"nim":null,"php":null,"zig":35,"dart":null,"java":139,"mojo":null,"odin":null,"ruby":18,"rust":601,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":61,"elixir":29,"fsharp":null,"kotlin":33,"python":365,"racket":null,"clojure":null,"crystal":null,"haskell":9,"reasonml":null,"commonlisp":null,"javascript":92,"typescript":60},"concept-slugs":["bencode"],"description-markdown-template":"In this stage, you'll extend the `decode` command to support bencoded dictionaries.\n\nA dictionary is encoded as `d\u003ckey1\u003e\u003cvalue1\u003e...\u003ckeyN\u003e\u003cvalueN\u003ee`. `\u003ckey1\u003e`, `\u003cvalue1\u003e` etc. correspond to the bencoded keys \u0026 values. The keys are sorted in lexicographical order and must be strings.\n\nFor example, `{\"hello\": 52, \"foo\":\"bar\"}` would be encoded as: `d3:foo3:bar5:helloi52ee` (note that the keys were reordered).\n\nHere’s how the tester will execute your program:\n```\n$ ./your_bittorrent.sh decode d3:foo3:bar5:helloi52ee\n{\"foo\":\"bar\",\"hello\":52}\n```\n\n{{#lang_is_go}}\nIf you'd prefer to use a library for this stage, [bencode-go](https://github.com/jackpal/bencode-go) is available for you to use.\n{{/lang_is_go}}\n{{#lang_is_python}}\nIf you'd prefer to use a library for this stage, [bencode.py](https://pypi.org/project/bencode.py/) is available for you to use.\n{{/lang_is_python}}\n{{#lang_is_rust}}\nIf you'd prefer to use a library crate for this stage, [serde-bencode](https://github.com/toby/serde-bencode/) is available for you to use.\n{{/lang_is_rust}}\n{{#lang_is_java}}\nIf you'd prefer to use a library for this stage, [bencode](https://github.com/dampcake/bencode) parser is available for you to use.\n{{/lang_is_java}}\n{{#lang_is_kotlin}}\nIf you'd prefer to use a library for this stage, [bencode](https://github.com/dampcake/bencode) parser is available for you to use.\n{{/lang_is_kotlin}}","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you’ll decode a bencoded dictionary.","name":"Decode bencoded dictionaries","position":4,"position-within-course":4,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"mn6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"431daa27-68a9-4852-9a39-7833b1f465bb","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":2,"go":32,"cpp":6,"nim":null,"php":null,"zig":3,"dart":null,"java":8,"mojo":null,"odin":null,"ruby":3,"rust":48,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":6,"elixir":4,"fsharp":null,"kotlin":4,"python":38,"racket":null,"clojure":null,"crystal":null,"haskell":1,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":4},"concept-slugs":[],"description-markdown-template":"In this stage, you'll modify the handshake message to indicate that your client supports extensions.\n\n### Extension handshake\n\nExchanging torrent metadata between peers wasn't originally part of the standard BitTorrent protocol, it was introduced as\nan [extension](https://www.bittorrent.org/beps/bep_0009.html). This extension uses BitTorrent's [extension protocol](https://www.bittorrent.org/beps/bep_0010.html) that is designed to add\nfunctionality without breaking backward-compatibility.\n\nDuring the \"Peer handshake\" stage, the handshake message includes eight reserved bytes (64 bits), all set to zero. To signal\nsupport for extensions, a client must set the 20th bit from the right (counting starts at 0) in the reserved bytes to 1.\n\nIn Hex, here's how the reserved bytes will look like after setting the 20th bit from the right to 1:\n\n```bash\n00 00 00 00 00 10 00 00\n```\n\n(`10` in hex is `16` in decimal, which is `00010000` in binary)\n\nWhen looking at individual bits, here's how it'll look like (left side truncated):\n\n```bash\n.... 00010000 00000000 00000000\n        ^ 20th bit from the right, counting starts at 0\n```\n\nAll the other reserved bits will stay zero.\n\n### The `magnet_handshake` command\n\nTo test your program, we'll introduce a new command in this stage: `magnet_handshake`. Here's how it works:\n\n```bash\n$ ./your_bittorrent.sh magnet_handshake \u003cmagnet-link\u003e\nPeer ID: 0102030405060708090a0b0c0d0e0f1011121314\n```\n\nYour program will need to:\n\n- Parse the magnet link to get the tracker URL\n- Perform the tracker GET request to get a list of peers\n- Establish a TCP connection with a peer, and perform a handshake\n  - In this handshake, your program will need to set the correct reserved bit to indicate support for extensions\n- Print the peer ID received during the handshake\n\n### Tests\n\nHere's how the tester will execute your program:\n\n```\n$ ./your_bittorrent.sh magnet_handshake \u003cmagnet-link\u003e\n```\n\nand here's the output it expects:\n\n```\nPeer ID: 0102030405060708090a0b0c0d0e0f1011121314\n```\n\nTester will also assert that correct bit is set in the reserved bytes of the handshake message.\n\n### Notes\n\n- You can use [these magnet links](https://github.com/codecrafters-io/bittorrent-test-seeder/blob/main/torrent_files/magnet_links.txt) to test your program locally. You may need to surround links with double quotes to escape special characters in terminal.","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll announce to other clients that you support extensions.","name":"Announce extension support","position":13,"position-within-course":13,"position-within-extension":2,"primary-extension-slug":"magnet-links","secondary-extension-slugs":[],"slug":"pk2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"e79deec9-971f-424f-8581-5c8aaf170e80","type":"course-stages","attributes":{"approved-comments-count":4,"community-solution-counts":{"c":8,"go":162,"cpp":32,"nim":null,"php":null,"zig":17,"dart":null,"java":24,"mojo":null,"odin":null,"ruby":7,"rust":212,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":17,"elixir":10,"fsharp":null,"kotlin":8,"python":136,"racket":null,"clojure":null,"crystal":null,"haskell":3,"reasonml":null,"commonlisp":null,"javascript":13,"typescript":7},"concept-slugs":[],"description-markdown-template":"In this stage, you'll download one piece and save it to disk. In the next stage we'll combine these pieces into a file.\n\nTo download a piece, your program will need to send [peer messages](https://www.bittorrent.org/beps/bep_0003.html#peer-messages) to a peer. The overall flow looks like this:\n\n- Read the torrent file to get the tracker URL\n    - you've done this in previous stages\n- Perform the tracker GET request to get a list of peers\n    - you've done this in previous stages\n- Establish a TCP connection with a peer, and perform a handshake\n    - you've done this in previous stages\n- Exchange multiple [peer messages](https://www.bittorrent.org/beps/bep_0003.html#peer-messages) to download the file\n    - **This is the part you'll implement in this stage**\n\n### Peer Messages\n\nPeer messages consist of a message length prefix (4 bytes), message id (1 byte) and a payload (variable size).\n\nHere are the peer messages you'll need to exchange once the handshake is complete:\n\n- Wait for a `bitfield` message from the peer indicating which pieces it has\n    - The message id for this message type is `5`.\n    - You can read and ignore the payload for now, the tracker we use for this challenge ensures that all peers have all pieces available.\n- Send an `interested` message\n    - The message id for `interested` is `2`.\n    - The payload for this message is empty.\n- Wait until you receive an `unchoke` message back\n    - The message id for `unchoke` is `1`.\n    - The payload for this message is empty.\n- Break the piece into blocks of 16 kiB (16 * 1024 bytes) and send a `request` message for each block\n    - The message id for `request` is `6`.\n    - The payload for this message consists of:\n        - `index`: the zero-based piece index\n        - `begin`: the zero-based byte offset within the piece\n            - This'll be `0` for the first block, `2^14` for the second block, 2*2^14 for the third block etc.\n        - `length`: the length of the block in bytes\n            - This'll be `2^14` (16 * 1024) for all blocks except the last one.\n            - The last block will contain `2^14` bytes or less, you'll need calculate this value using the piece length.\n- Wait for a `piece` message for each block you've requested\n    - The message id for `piece` is `7`.\n    - The payload for this message consists of:\n        - `index`: the zero-based piece index\n        - `begin`: the zero-based byte offset within the piece\n        - `block`: the data for the piece, usually `2^14` bytes long\n\nAfter receiving blocks and combining them into pieces, you'll want to check the integrity of each piece by comparing its hash\nwith the piece hash value found in the torrent file.\n\nHere’s how the tester will execute your program:\n\n```\n$ ./your_bittorrent.sh download_piece -o /tmp/test-piece sample.torrent \u003cpiece_index\u003e\n```\n\nThe tester will validate that the piece was downloaded correctly.\n\n**Optional:** To improve download speeds, you can consider pipelining your requests. [BitTorrent Economics Paper](http://bittorrent.org/bittorrentecon.pdf) recommends having 5 requests pending at once, to avoid a delay between blocks being sent.","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll connect to a peer and download a piece of the file. You'll download the piece in blocks, which you'll later combine and verify using SHA-1, a cryptographic hash value.","name":"Download a piece","position":10,"position-within-course":10,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"nd2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"4ee2eb6b-8402-4344-996b-fb73f1c24afb","type":"course-stages","attributes":{"approved-comments-count":8,"community-solution-counts":{"c":25,"go":293,"cpp":57,"nim":null,"php":null,"zig":29,"dart":null,"java":47,"mojo":null,"odin":null,"ruby":15,"rust":349,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":26,"elixir":23,"fsharp":null,"kotlin":14,"python":232,"racket":null,"clojure":null,"crystal":null,"haskell":5,"reasonml":null,"commonlisp":null,"javascript":37,"typescript":30},"concept-slugs":[],"description-markdown-template":"Trackers are central servers that maintain information about peers participating in the sharing and downloading of a torrent.\n\nIn this stage, you'll make a GET request to a HTTP tracker to discover peers to download the file from.\n\n### Tracker GET request\n\nYou'll need to make a request to the tracker URL you extracted in the previous stage, and include these query params:\n\n- `info_hash`: the info hash of the torrent\n    - 20 bytes long, will need to be URL encoded\n    - **Note**: this is **NOT** the hexadecimal representation, which is 40 bytes long\n- `peer_id`: a unique identifier for your client\n    - A string of length 20 that you get to pick.\n- `port`: the port your client is listening on\n    - You can set this to `6881`, you will not have to support this functionality during this challenge.\n- `uploaded`: the total amount uploaded so far\n    - Since your client hasn't uploaded anything yet, you can set this to `0`.\n- `downloaded`: the total amount downloaded so far\n    - Since your client hasn't downloaded anything yet, you can set this to `0`.\n- `left`: the number of bytes left to download\n    - Since you client hasn't downloaded anything yet, this'll be the total length of the file (you've extracted this value from the torrent file in previous stages)\n- `compact`: whether the peer list should use the [compact representation](https://www.bittorrent.org/beps/bep_0023.html)\n    - For the purposes of this challenge, set this to `1`.\n    - The compact representation is more commonly used in the wild, the non-compact representation is mostly supported for backward-compatibility.\n\nRead [the BitTorrent Protocol Specification](https://www.bittorrent.org/beps/bep_0003.html#trackers) for more information about these query parameters.\n\n### Tracker response\n\nThe tracker's response will be a bencoded dictionary with two keys:\n\n- `interval`:\n    - An integer, indicating how often your client should make a request to the tracker.\n    - You can ignore this value for the purposes of this challenge.\n- `peers`.\n    - A string, which contains list of peers that your client can connect to.\n    - Each peer is represented using 6 bytes. The first 4 bytes are the peer's IP address and the last 2 bytes are the peer's port number.\n\n---\n\nHere’s how the tester will execute your program:\n```\n$ ./your_bittorrent.sh peers sample.torrent\n```\nand here’s the output it expects:\n```\n165.232.41.73:51556\n165.232.38.164:51532\n165.232.35.114:51437\n```","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you’ll interact with a tracker, a central server that keeps track of peers participating in the sharing of a torrent. You'll make a GET request to a HTTP tracker to discover peers from whom you can download the file.","name":"Discover peers","position":8,"position-within-course":8,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"fi9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"6d8bdfa9-c757-4340-8f25-83da05d95e72","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":1,"go":23,"cpp":5,"nim":null,"php":null,"zig":2,"dart":null,"java":5,"mojo":null,"odin":null,"ruby":4,"rust":34,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":6,"elixir":4,"fsharp":null,"kotlin":4,"python":28,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":2},"concept-slugs":[],"description-markdown-template":"In this stage, you'll request torrent metadata from a peer using the metadata extension.\n\n### Metadata extension messages\n\nAs mentioned earlier, a magnet link doesn't contain all the information found in a .torrent file, such as file length, piece length and piece hashes.\n\nTo fetch these additional details, your client will need to use messages defined by the [metadata extension](https://www.bittorrent.org/beps/bep_0009.html#extension-message).\n\nThe metadata extension supports the following message types:\n\n- `request` (msg_type: 0)\n  - Requests a piece of metadata from the peer\n- `data` (msg_type: 1)\n  - Sends a piece of metadata to the peer\n- `reject` (msg_type: 2)\n  - Signals that the peer doesn't have the piece of metadata that was requested\n\n`msg_type` is an identifier for message types within the metadata extension.\n\nMetadata is stored in \"pieces\", which are 16kiB chunks. For the purposes of this challenge, you can assume that the entire metadata for a torrent fits in a single piece.\n\nYou'll implement sending the `request` message (msg_type: 0) in this stage. We'll look at other `msg_type` values in later stages.\n\n### The metadata `request` message\n\nAs seen above, the `request` message is part of the metadata extension.\n\nNote that this `request` message is different from the request message (ID: 6) in the base [BitTorrent protocol](https://www.bittorrent.org/beps/bep_0003.html).\n\nThis message follows the standard BitTorrent extension message format:\n\n- message length prefix (4 bytes)\n- message id (1 byte)\n    - This will be 20, since this is a message implemented by an extension\n- payload (variable size)\n    - extension message id (1 byte)\n        - This will be the peer's metadata extension ID, which you received during the extension handshake\n    - bencoded dictionary (variable size)\n        - This dictionary will look like this: `{'msg_type': 0, 'piece': 0}` (encoded as a bencoded dictionary)\n        - `msg_type` will be 0 since this is a `request` message\n        - `piece` is the zero-based piece index of the metadata being requested\n            - Since we're only requesting one piece in this challenge, this will always be 0\n\n### The `magnet_info` command\n\nTo test your program, we'll introduce a new command in this stage: `magnet_info`. Here's how it works:\n\n```bash\n$ ./your_bittorrent.sh magnet_info \u003cmagnet-link\u003e\nTracker URL: http://bittorrent-test-tracker.codecrafters.io/announce\nLength: 92063\nInfo Hash: d69f91e6b2ae4c542468d1073a71d4ea13879a7f\nPiece Length: 32768\nPiece Hashes:\n6e2275e604a0766656736e81ff10b55204ad8d35\ne876f67a2a8886e8f36b136726c30fa29703022d\nf00d937a0213df1982bc8d097227ad9e909acc17\n```\n\nTo fetch this info, your program will need to:\n\n- Parse the magnet link to get the tracker URL\n- Perform the tracker GET request to get a list of peers\n- Establish a TCP connection with a peer, and perform a handshake\n- Perform the base handshake\n- Send the bitfield message (can be ignored in this challenge)\n- Receive the bitfield message\n- Perform the extension handshake\n- Send the metadata request message (**This stage**)\n- Receive the metadata message (later stages)\n- Print out the data received, as per the format above.\n\n### Tests\n\nHere's how the tester will execute your program:\n\n```bash\n$ ./your_bittorrent.sh magnet_info \u003cmagnet-link\u003e\n```\n\nThere's no expected output at this stage, the tester will just assert if it received a correct metadata request. We'll\nverify the output in later stages.\n\n### Notes\n\n- If metadata is larger than 16kb, you would need to request multiple pieces, but for the purposes of this challenge there will only be one piece.","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll request torrent metadata from a peer.","name":"Request metadata","position":16,"position-within-course":16,"position-within-extension":5,"primary-extension-slug":"magnet-links","secondary-extension-slugs":[],"slug":"ns5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"f3bd7a23-f379-493e-8b11-62916b5cbdb7","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":2,"go":23,"cpp":6,"nim":null,"php":null,"zig":2,"dart":null,"java":7,"mojo":null,"odin":null,"ruby":4,"rust":37,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":6,"elixir":4,"fsharp":null,"kotlin":4,"python":36,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":3},"concept-slugs":[],"description-markdown-template":"In this stage, you'll send back a list of extensions that your client supports.\n\n### Extension IDs \u0026 handshake\n\nEach peer maintains a mapping of extension names to IDs. The same extension name might map to different IDs on different peers (but it'll always remain stable for a given peer).\n\nTo communicate with other peers using the [metadata extension](https://www.bittorrent.org/beps/bep_0009.html#ut_metadata), your peer will\nneed to know the ID that the other peer uses for this extension. The name for the metadata extension is `ut_metadata`. To get the ID,\nyour peer will need to send an [extension handshake](https://www.bittorrent.org/beps/bep_0010.html#handshake-message) message and\nwait for the corresponding handshake message back from the peer.\n\nThe extension handshake message contains a dictionary like this:\n\n```json\n{\n  \"m\": {\n    \"ut_metadata\": 16,\n    ... (other extension names and IDs)\n  }\n}\n```\n\nIn the example above, `16` is the ID that the peer uses for the metadata extension. This is just an example, you can use any value you want for this ID.\n\nYour program will need to send the extension handshake message soon after receiving the bitfield message. Overall, the flow will look like this:\n\n- Establish a TCP connection with a peer\n- Send the base handshake message\n- Receive the base handshake message\n- Send the bitfield message (safe to ignore in this challenge)\n- Receive the bitfield message\n- If the peer supports extensions (based on the reserved bit in the base handshake):\n  - Send the extension handshake message\n  - Receive the extension handshake message\n\nNote that the extension handshake message is only sent if the other peer supports extensions (indicated by the reserved bit in the base handshake). This\nis how backward compatibility is maintained with peers that don't support extensions.\n\nWe'll implement sending extension handshake messages in this stage. Receiving extension handshake messages will be implemented in the next stage.\n\n### Extension handshake format\n\nExtension messages follow the standard BitTorrent message format:\n\n- message length prefix (4 bytes)\n- message id (1 byte)\n  - This will be 20 for all messages implemented by extensions\n- payload (variable size)\n\nThe payload will be structured as follows:\n\n- extension message id (1 byte)\n  - This will be 0 for the extension handshake\n- bencoded dictionary (variable size)\n  - This will contain a key \"m\" with another dictionary as its value.\n  - The inner dictionary maps supported extension names to their corresponding message IDs.\n  - For example, the inner dictionary contents might be `{\"ut_metadata\": 1, \"ut_pex\": 2}`, indicating that your peer supports the \"ut_metadata\" and \"ut_pex\" extensions with IDs 1 and 2 respectively.\n\nThe extension name we're interested in is \"ut_metadata\", which corresponds to the [metadata extension](https://www.bittorrent.org/beps/bep_0009.html#ut_metadata).\n\n### Tests\n\nHere's how the tester will execute your program:\n\n```\n$ ./your_bittorrent.sh magnet_handshake \u003cmagnet-link\u003e\n```\n\nand here's the output it expects:\n\n```\nPeer ID: 0102030405060708090a0b0c0d0e0f1011121314\n```\n\nThe expected output is same as last stage. In this stage, the tester will additionaly verify that:\n\n- An extension handshake message is received.\n- The extension handshake message contains a dictionary that looks like this: `{\"m\": {\"ut_metadata\": \u003cPICK YOUR ID\u003e}}`.\n- The ID corresponding to `ut_metadata` is between 1 and 255 (it needs to be represented as an 8-bit unsigned integer, that isn't 0)\n\n### Notes\n\n- Your program must only send an extension handshake **if** the peer supports extensions\n  - To know whether a peer supports the extension protocol, you'll need to look at the reserved bytes in the base handshake message\n- The extension handshake message is defined in [handshake section](https://www.bittorrent.org/beps/bep_0010.html#handshake-message) of extension protocol doc.","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll send the list of extensions your client supports.","name":"Send extension handshake","position":14,"position-within-course":14,"position-within-extension":3,"primary-extension-slug":"magnet-links","secondary-extension-slugs":[],"slug":"xi4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"87390e2c-2dfa-4128-ac1a-8f2265f9ce9e","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":2,"go":37,"cpp":6,"nim":null,"php":null,"zig":4,"dart":null,"java":8,"mojo":null,"odin":null,"ruby":3,"rust":54,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":6,"elixir":4,"fsharp":null,"kotlin":5,"python":48,"racket":null,"clojure":null,"crystal":null,"haskell":1,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":4},"concept-slugs":[],"description-markdown-template":"Welcome to the BitTorrent Magnet Links extension! In this extension, you'll add support for downloading files using magnet links.\n\nIn this stage, you will parse a magnet link and print out the info hash and tracker URL.\n\n### Magnet links\n\n[Magnet links](https://www.bittorrent.org/beps/bep_0009.html) allow users to download files from peers without needing a torrent file.\n\nFor example, here's a magnet link:\n```\nmagnet:?xt=urn:btih:ad42ce8109f54c99613ce38f9b4d87e70f24a165\u0026dn=magnet1.gif\u0026tr=http%3A%2F%2Fbittorrent-test-tracker.codecrafters.io%2Fannounce\n```\n\nUnlike .torrent files, magnet links don't contain information like file length, piece length and piece hashes. They only include the bare minimum\ninformation necessary to discover peers. A client can then request the rest of the information from peers using the [metadata exchange protocol](https://www.bittorrent.org/beps/bep_0009.html#metadata-exchange). You'll implement this in later stages.\n\nThese are the query parameters in a magnet link:\n\n- `xt`: `urn:btih:` followed by the 40-char hex-encoded info hash (example: `urn:btih:ad42ce8109f54c99613ce38f9b4d87e70f24a165`)\n- `dn`: The name of the file to be downloaded (example: `magnet1.gif`)\n- `tr`: The tracker URL (example: `http://bittorrent-test-tracker.codecrafters.io/announce`)\n\n[This Wikipedia article](https://en.wikipedia.org/wiki/Magnet_URI_scheme) has more information about the magnet link format.\n\n### Magnet link example\n\nHere's how the tester will execute your program:\n\n```bash\n$ ./your_bittorrent.sh magnet_parse \u003cmagnet-link\u003e\n```\n\nand here's the output it expects:\n\n```bash\nTracker URL: http://bittorrent-test-tracker.codecrafters.io/announce\nInfo Hash: d69f91e6b2ae4c542468d1073a71d4ea13879a7f\n```\n\n### Notes\n\n- We'll be using v1 of [magnet URI format](https://www.bittorrent.org/beps/bep_0009.html#magnet-uri-format). v2 is not widely used yet.\n- `xt` (info hash) is the only required parameter, all others are optional.\n- A magnet link can contain multiple tracker URLs, but for the purposes of this challenge it'll only contain one.","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll extract information from a magnet link.","name":"Parse magnet link","position":12,"position-within-course":12,"position-within-extension":1,"primary-extension-slug":"magnet-links","secondary-extension-slugs":[],"slug":"hw0","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"2237fd98-cf05-4d66-b0ba-5f66d8808a09","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":232,"go":1162,"cpp":506,"nim":null,"php":null,"zig":106,"dart":null,"java":497,"mojo":null,"odin":null,"ruby":68,"rust":1919,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":309,"elixir":92,"fsharp":null,"kotlin":112,"python":1123,"racket":null,"clojure":null,"crystal":null,"haskell":20,"reasonml":null,"commonlisp":null,"javascript":532,"typescript":182},"concept-slugs":["bencode"],"description-markdown-template":"In this stage, you'll extend the `decode` command to support bencoded integers.\n\nIntegers are encoded as `i\u003cnumber\u003ee`. For example, `52` is encoded as `i52e` and `-52` is encoded as `i-52e`.\n\nHere's how the tester will execute your program:\n\n```\n$ ./your_bittorrent.sh decode i52e\n52\n```\n\n{{#lang_is_go}}\nIf you'd prefer to use a library for this stage, [bencode-go](https://github.com/jackpal/bencode-go) is available for you to use.\n{{/lang_is_go}}\n{{#lang_is_python}}\nIf you'd prefer to use a library for this stage, [bencode.py](https://pypi.org/project/bencode.py/) is available for you to use.\n{{/lang_is_python}}\n{{#lang_is_rust}}\nIf you'd prefer to use a library crate for this stage, [serde-bencode](https://github.com/toby/serde-bencode/) is available for you to use.\n{{/lang_is_rust}}\n{{#lang_is_java}}\nIf you'd prefer to use a library for this stage, [bencode](https://github.com/dampcake/bencode) parser is available for you to use.\n{{/lang_is_java}}\n{{#lang_is_kotlin}}\nIf you'd prefer to use a library for this stage, [bencode](https://github.com/dampcake/bencode) parser is available for you to use.\n{{/lang_is_kotlin}}","difficulty":"easy","is-paid":false,"marketing-markdown":"In this stage, you’ll decode a bencoded integer.","name":"Decode bencoded integers","position":2,"position-within-course":2,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"eb4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"033192e2-47a9-41fa-a4d4-a2a96aa0d36a","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":2,"go":23,"cpp":5,"nim":null,"php":null,"zig":1,"dart":null,"java":5,"mojo":null,"odin":null,"ruby":3,"rust":33,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":6,"elixir":3,"fsharp":null,"kotlin":3,"python":36,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":2},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for receiving the extension handshake message back.\n\n### Extension handshake (part 2)\n\nIn the previous stage, your client sent an extension handshake message to the other peer. In this stage, you'll\nadd support for receiving the peer's extension handshake message back.\n\nThe message will follow the same structure as the one you sent in the previous stage. The payload dictionary\nwill contain the following keys: `{\"m\": {\"ut_metadata\": \u003cPEER'S ID\u003e}}`.\n\nYour program will need to store the ID for the `ut_metadata` extension and print it out. This'll be used in later stages to send extension messages specific to the `ut_metadata` extension.\n\nTo recap, the overall flow will look like this:\n\n- Establish a TCP connection with a peer\n- Send the base handshake message\n- Receive the base handshake message\n- Send the bitfield message (safe to ignore in this challenge)\n- Receive the bitfield message\n- If the peer supports extensions (based on the reserved bit in the base handshake):\n  - Send the extension handshake message (previous stage)\n  - Receive the extension handshake message (**this stage**)\n\n### Tests\n\nHere's how the tester will execute your program:\n\n```bash\n$ ./your_bittorrent.sh magnet_handshake \u003cmagnet-link\u003e\n```\n\nand here's the output it expects:\n\n```\nPeer ID: 0102030405060708090a0b0c0d0e0f1011121314\nPeer Metadata Extension ID: 123\n```\n\nThe `Peer Metadata Extension ID` will be randomly generated, you'll need to fetch it from the dictionary in the extension handshake message.\n\n### Notes\n\n- You can use [these magnet links](https://github.com/codecrafters-io/bittorrent-test-seeder/blob/main/torrent_files/magnet_links.txt) to test your program locally. You may need to surround links with double quotes to escape special characters in terminal.\n- Extension IDs need to be stored for every peer, as different peers may use different IDs for the same extension.","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll receive the list of extensions your peer supports.","name":"Receive extension handshake","position":15,"position-within-course":15,"position-within-extension":4,"primary-extension-slug":"magnet-links","secondary-extension-slugs":[],"slug":"jk6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"ed9b114e-6bf8-4bf0-bcc9-9fd70db0e90f","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":30,"go":332,"cpp":81,"nim":null,"php":null,"zig":34,"dart":null,"java":63,"mojo":null,"odin":null,"ruby":17,"rust":429,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":34,"elixir":24,"fsharp":null,"kotlin":19,"python":263,"racket":null,"clojure":null,"crystal":null,"haskell":7,"reasonml":null,"commonlisp":null,"javascript":56,"typescript":40},"concept-slugs":[],"description-markdown-template":"In a torrent, a file is split into equally-sized parts called **pieces**. A piece is usually 256 KB or 1 MB in size.\n\nEach piece is assigned a SHA-1 hash value. On public networks, there may be malicious peers that send fake data. These hash values allow us to verify the integrity of each piece that we'll download.\n\nPiece length and piece hashes are specified in the `info` dictionary of the torrent file under the following keys:\n\n- `piece length`: number of bytes in each piece, an integer\n- `pieces`: concatenated SHA-1 hashes of each piece (20 bytes each), a string\n\nThe [BitTorrent Protocol Specification](https://www.bittorrent.org/beps/bep_0003.html#info-dictionary) has more information about these keys.\n\nIn this stage, the tester will expect your program to print piece length and a list of piece hashes in hexadecimal format.\n\nHere's how the tester will execute your program:\n```\n$ ./your_bittorrent.sh info sample.torrent\n```\nand here's the output it expects:\n```\nTracker URL: http://bittorrent-test-tracker.codecrafters.io/announce\nLength: 92063\nInfo Hash: d69f91e6b2ae4c542468d1073a71d4ea13879a7f\nPiece Length: 32768\nPiece Hashes:\ne876f67a2a8886e8f36b136726c30fa29703022d\n6e2275e604a0766656736e81ff10b55204ad8d35\nf00d937a0213df1982bc8d097227ad9e909acc17\n```","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll extract hash values for each piece of the file. On public networks, there may be malicious peers sending fake data. Piece hashes will help us ensure the integrity of downloaded pieces.","name":"Piece hashes","position":7,"position-within-course":7,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"bf7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"ae525d04-d1b6-4920-b762-581db14179f1","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":52,"go":443,"cpp":167,"nim":null,"php":null,"zig":44,"dart":null,"java":157,"mojo":null,"odin":null,"ruby":21,"rust":659,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":75,"elixir":31,"fsharp":null,"kotlin":41,"python":414,"racket":null,"clojure":null,"crystal":null,"haskell":10,"reasonml":null,"commonlisp":null,"javascript":113,"typescript":72},"concept-slugs":["bencode"],"description-markdown-template":"In this stage, you'll extend the `decode` command to support bencoded lists.\n\nLists are encoded as `l\u003cbencoded_elements\u003ee`.\n\nFor example, `[\"hello\", 52]` would be encoded as `l5:helloi52ee`. Note that there are no separators between the elements.\n\nHere’s how the tester will execute your program:\n```\n$ ./your_bittorrent.sh decode l5:helloi52ee\n[“hello”,52]\n```\n\n{{#lang_is_go}}\nIf you'd prefer to use a library for this stage, [bencode-go](https://github.com/jackpal/bencode-go) is available for you to use.\n{{/lang_is_go}}\n{{#lang_is_python}}\nIf you'd prefer to use a library for this stage, [bencode.py](https://pypi.org/project/bencode.py/) is available for you to use.\n{{/lang_is_python}}\n{{#lang_is_rust}}\nIf you'd prefer to use a library crate for this stage, [serde-bencode](https://github.com/toby/serde-bencode/) is available for you to use.\n{{/lang_is_rust}}\n{{#lang_is_java}}\nIf you'd prefer to use a library for this stage, [bencode](https://github.com/dampcake/bencode) parser is available for you to use.\n{{/lang_is_java}}\n{{#lang_is_kotlin}}\nIf you'd prefer to use a library for this stage, [bencode](https://github.com/dampcake/bencode) parser is available for you to use.\n{{/lang_is_kotlin}}","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you’ll decode a bencoded list.","name":"Decode bencoded lists","position":3,"position-within-course":3,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ah1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"451a6041-abf6-417f-be25-9a6ffd768e19","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"language":{"data":{"id":"3236a60c-e348-4db7-9e6a-e2826b38d991","type":"language"}}}},{"id":"61711d14-eb06-4a23-8fd0-ec0df66f6177","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"language":{"data":{"id":"a58f0983-d67d-47e6-97e7-c02aec9ec269","type":"language"}}}},{"id":"ae4cf62b-5985-475a-b527-63d98f360378","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"language":{"data":{"id":"5ddd40dd-1539-4214-a40c-cc7a9e5edf35","type":"language"}}}},{"id":"c6e91100-7b93-4290-a672-f3bd7dc59aca","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"beta"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"language":{"data":{"id":"8ee02441-697a-4e6d-8015-44e472b0c1b8","type":"language"}}}},{"id":"8772fd8d-a020-4cbd-909e-d37fb0285b9f","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"beta"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"language":{"data":{"id":"16121c66-8a81-452d-8c3a-f9fa221e7936","type":"language"}}}},{"id":"45b48930-e506-4d62-bb0e-8db7b010ec5b","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"beta"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"language":{"data":{"id":"fb72dae0-177a-45cc-a63e-71f9dd3184ac","type":"language"}}}},{"id":"ae1f5463-4134-470d-90ab-b2568d2a63f6","type":"languages","attributes":{"name":"Elixir","slug":"elixir","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"f3f01f32-bdf3-42e6-af47-3698ea528135","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"beta"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"language":{"data":{"id":"ae1f5463-4134-470d-90ab-b2568d2a63f6","type":"language"}}}},{"id":"8b9e8ee3-5987-4911-bf62-78b065d0a872","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"beta"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"language":{"data":{"id":"6f979cea-d7af-42cf-8e8d-ca44857217c0","type":"language"}}}},{"id":"931ead9a-a13e-43c6-8f10-a8e23934852d","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"beta"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"language":{"data":{"id":"1dbc76cc-c216-4776-a605-3a5784b801a9","type":"language"}}}},{"id":"f885684e-da71-4020-b3c5-2addd49d4e77","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"language":{"data":{"id":"4cd22891-8eaa-4f67-8b58-30b0403e59aa","type":"language"}}}},{"id":"c128aa48-08da-44fd-a9ad-736ef18d6330","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"beta"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"language":{"data":{"id":"c9b581c8-6977-4f1b-9c8b-e1ee5fd7a10f","type":"language"}}}},{"id":"4bb01c03-b370-4e06-8839-0b5f0c87ae7f","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"language":{"data":{"id":"63d38ef2-f131-4635-aa66-0cf404826f9b","type":"language"}}}},{"id":"7e69d6fd-4b9d-4f50-8e8c-ca660b8a9822","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"beta"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"language":{"data":{"id":"7e07ab8f-2bc0-4b20-bc72-1cd9c7e200ed","type":"language"}}}},{"id":"1e58bf29-3e04-446d-aeee-463500f577e2","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"beta"},"relationships":{"course":{"data":{"id":"37286876-f9a2-4a70-9fa0-b547b0ec2cbb","type":"course"}},"language":{"data":{"id":"3ee6502c-281b-480f-a4bf-4a3efd209689","type":"language"}}}},{"id":"27186738-8845-4869-adcf-88f0f0af212c","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{},"concept-slugs":[],"description-markdown-template":"In this stage, we'll setup a UDP server that can receive and respond to UDP packets on port 2053.\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then send a UDP packet to port 2053.\n\nYour program should respond back with a UDP packet. It's okay to ignore the contents of the packet for now,\nwe'll work on that in the next stage.","difficulty":"very_easy","is-paid":false,"marketing-markdown":"In this stage, we'll start a UDP server on port 2053.","name":"Setup UDP server","position":1,"position-within-course":1,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ux2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"4eef2c89-f29d-43f1-a520-34d937de2d65","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":10,"go":198,"cpp":17,"nim":null,"php":null,"zig":null,"dart":null,"java":49,"mojo":null,"odin":null,"ruby":10,"rust":269,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":15,"elixir":null,"fsharp":null,"kotlin":4,"python":117,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":37,"typescript":32},"concept-slugs":[],"description-markdown-template":"In this stage you'll extend your DNS server to parse the question section of the DNS message you receive.\n\nJust like the previous stage, the tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a UDP packet (containing a DNS query) to port 2053 that contains a question section as follows:\n\n| Field  | Value sent by the tester                                                        |\n| ------ | --------------------------                                                      |\n| Name   | A random domain encoded as a label sequence (refer to stage #3 for details)     |\n| Type   | `1` encoded as a 2-byte big-endian int (corresponding to the \"A\" record type)   |\n| Class  | `1` encoded as a 2-byte big-endian int (corresponding to the \"IN\" record class) |\n\nThe question type will always be `A` for this stage and the question class will always be `IN`. So your parser only needs to account for those record types for now.\n\nYour program will need to respond with a DNS reply packet that contains:\n\n- a header section (same as in stage #5)\n- a question section (**new in this stage**)\n- an answer section (**new in this stage**)\n\n**Expected values for the question section**:\n\n| Field  | Expected value                                                                  |\n| ------ | --------------------------                                                      |\n| Name   | Mimic the domain name (as label sequence)                                       |\n| Type   | `1` encoded as a 2-byte big-endian int (corresponding to the \"A\" record type)   |\n| Class  | `1` encoded as a 2-byte big-endian int (corresponding to the \"IN\" record class) |\n\n**Expected values for the answer section**:\n\n| Field   | Expected Value                                                                                                                     |\n| ------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| Name    | Mimic the domain name (as label sequence)                                                                                          |\n| Type    | `1` encoded as a 2-byte big-endian int (corresponding to the \"A\" record type)                                                      |\n| Class   | `1` encoded as a 2-byte big-endian int (corresponding to the \"IN\" record class)                                                    |\n| TTL     | Any value, encoded as a 4-byte big-endian int. For example: `60`.                                                                  |\n| Length  | `4`, encoded as a 2-byte big-endian int (corresponds to the length of the RDATA field)                                             |\n| Data    | Any IP address, encoded as a 4-byte big-endian int. For example: `\\x08\\x08\\x08\\x08` (that's `8.8.8.8` encoded as a 4-byte integer) |","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, we'll parse a DNS packet's question section","name":"Parse question section","position":6,"position-within-course":6,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"hd8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"6d20f01e-0e4b-40d6-89cf-038f8c554ab6","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":16,"go":250,"cpp":22,"nim":null,"php":null,"zig":null,"dart":null,"java":60,"mojo":null,"odin":null,"ruby":10,"rust":332,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":19,"elixir":null,"fsharp":null,"kotlin":7,"python":142,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":48,"typescript":37},"concept-slugs":[],"description-markdown-template":"Up until now, we were ignoring the contents of the DNS packet that we received and hardcoding `1234` as the ID in the response. In\nthis stage, you'll have to parse the DNS packet that you receive and respond with the same ID in the response. You'll also need to set\nsome other fields in the header section.\n\nJust like the previous stage, the tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a UDP packet (containing a DNS query) to port 2053.\n\nYour program will need to respond with a DNS reply packet that contains a header section with the following values:\n\n| Field                              | Size    | Expected value                                                              |\n| ---------------------------------- | ------- | --------------------------------------------------------------------------- |\n| Packet Identifier (ID)             | 16 bits | Mimic the 16 bit packet identifier from the request packet sent by tester   |\n| Query/Response Indicator (QR)      | 1 bit   | 1                                                                           |\n| Operation Code (OPCODE)            | 4 bits  | Mimic the OPCODE value sent by the tester                                   |\n| Authoritative Answer (AA)          | 1 bit   | 0                                                                           |\n| Truncation (TC)                    | 1 bit   | 0                                                                           |\n| Recursion Desired (RD)             | 1 bit   | Mimic the RD value sent by the tester                                       |\n| Recursion Available (RA)           | 1 bit   | 0                                                                           |\n| Reserved (Z)                       | 3 bits  | 0                                                                           |\n| Response Code (RCODE)              | 4 bits  | 0 (no error) if OPCODE is 0 (standard query) else 4 (not implemented)       |\n| Question Count (QDCOUNT)           | 16 bits | Any valid value                                                             |\n| Answer Record Count (ANCOUNT)      | 16 bits | Any valid value                                                             |\n| Authority Record Count (NSCOUNT)   | 16 bits | Any valid value                                                             |\n| Additional Record Count (ARCOUNT)  | 16 bits | Any valid value                                                             |\n\nThe tester will not check what follows the header section as long as it is a valid DNS packet.\n\n**Note**: Your code will still need to pass tests for the previous stages. You shouldn't need to hardcode `1234` as the request ID anymore\nsince the tester sends `1234` as the ID in the previous stages. As long as you implement this stage correctly, your code should automatically pass\nthe previous stages as well.","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, we'll parse a DNS packet's header section","name":"Parse header section","position":5,"position-within-course":5,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"uc8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"1645fba8-5452-485b-a3a4-24d7053121c7","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":9,"go":174,"cpp":14,"nim":null,"php":null,"zig":null,"dart":null,"java":45,"mojo":null,"odin":null,"ruby":8,"rust":221,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":16,"elixir":null,"fsharp":null,"kotlin":6,"python":93,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":22,"typescript":25},"concept-slugs":[],"description-markdown-template":"In this stage we will parse the DNS question section which has compressed the question label sequences. You will be sent multiple values in the question section and you have to parse the queries and respond with the same question section (no need for compression) in the response along with answers for them. As for the answer section, respond with an `A` record type for each question. The values for these A records can be anything of your choosing.\n\nAs we already know how the Question Section and Answer Section look like from the previous stages, we will just give high level details of the packet that you are sent and what the tester expects.\n\nHere is what the tester will send you:\n\n```\n| ------------------------------------------ |\n| Header                                     |\n| ------------------------------------------ |\n| Question 1 (un-compressed label sequence)  |\n| ------------------------------------------ |\n| Question 2 (compressed label sequence)     |\n| ------------------------------------------ |\n```\n\nWhat the tester expects in response:\n\n```\n| ------------------------------------------ |\n| Header                                     |\n| ------------------------------------------ |\n| Question 1 (un-compressed label sequence)  |\n| ------------------------------------------ |\n| Question 2 (un-compressed label sequence)  |\n| ------------------------------------------ |\n| Answer 1 (un-compressed label sequence)    |\n| ------------------------------------------ |\n| Answer 2 (un-compressed label sequence)    |\n| ------------------------------------------ |\n```\n\nYou don't need to compress your response. We will never ask you to do something that will overflow the buffer size restriction of UDP, so compressing your response packet is not something you have to worry about. Though if you like an extra challenge feel free to compress the DNS packet, the tester will work with it too.\n\nThe question type will always be `A` and the question class will always be `IN`.\n\n[This section](https://www.rfc-editor.org/rfc/rfc1035#section-4.1.4) of the RFC covers how this compression works.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, we'll parse a DNS packet's question in which the label sequences have been compressed","name":"Parse compressed packet","position":7,"position-within-course":7,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"yc9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"2a27a2ec-11e9-4353-b94e-5c2078d51d47","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":18,"go":280,"cpp":25,"nim":null,"php":null,"zig":null,"dart":null,"java":67,"mojo":null,"odin":null,"ruby":10,"rust":366,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":20,"elixir":null,"fsharp":null,"kotlin":6,"python":163,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":50,"typescript":53},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend your DNS server to respond with the \"answer\" section, the third section of a DNS message.\n\n### Answer section structure\n\nThe answer section contains a list of RRs (Resource Records), which are answers to the questions asked in the question section.\n\nEach RR has the following structure:\n\n| Field                 | Type            | Description                                                                                                              |\n| --------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| Name                  | Label Sequence  | The domain name encoded as a sequence of labels.                                                                         |\n| Type                  | 2-byte Integer  | `1` for an A record, `5` for a CNAME record etc., full list [here](https://www.rfc-editor.org/rfc/rfc1035#section-3.2.2) |\n| Class                 | 2-byte Integer  | Usually set to `1` (full list [here](https://www.rfc-editor.org/rfc/rfc1035#section-3.2.4))                              |\n| TTL (Time-To-Live)    | 4-byte Integer  | The duration in seconds a record can be cached before requerying.                                                        |\n| Length (`RDLENGTH`)   | 2-byte Integer  | Length of the RDATA field in bytes.                                                                                      |\n| Data (`RDATA`)        | Variable        | Data specific to the record type.                                                                                        |\n\n[Section 3.2.1](https://www.rfc-editor.org/rfc/rfc1035#section-3.2.1) of the RFC covers the answer section format in detail.\n\nIn this stage, we'll only deal with the \"A\" record type, which maps a domain name to an IPv4 address. The RDATA field for an \"A\" record\ntype is a 4-byte integer representing the IPv4 address.\n\n---\n\nJust like in the previous stage, the tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a UDP packet (containing a DNS query) to port 2053.\n\nYour program will need to respond with a DNS reply packet that contains:\n\n- a header section (same as in stage #2)\n- a question section  (same as in stage #3)\n- an answer section (**new in this stage!**)\n\nYour answer section should contain a single RR, with the following values:\n\n| Field   | Expected Value                                                                                                                     |\n| ------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| Name    | `\\x0ccodecrafters\\x02io` followed by a null byte (that's `codecrafters.io` encoded as a label sequence)                            |\n| Type    | `1` encoded as a 2-byte big-endian int (corresponding to the \"A\" record type)                                                      |\n| Class   | `1` encoded as a 2-byte big-endian int (corresponding to the \"IN\" record class)                                                    |\n| TTL     | Any value, encoded as a 4-byte big-endian int. For example: `60`.                                                                  |\n| Length  | `4`, encoded as a 2-byte big-endian int (corresponds to the length of the RDATA field)                                             |\n| Data    | Any IP address, encoded as a 4-byte big-endian int. For example: `\\x08\\x08\\x08\\x08` (that's `8.8.8.8` encoded as a 4-byte integer) |\n\nMake sure to update the `ANCOUNT` field in the header section accordingly, and remember to set the id to `1234`.","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, we'll write a DNS packet's answer section","name":"Write answer section","position":4,"position-within-course":4,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"xm2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"bf60895b-40a9-4ff7-8f05-35d3db38866a","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":7,"go":135,"cpp":8,"nim":null,"php":null,"zig":null,"dart":null,"java":31,"mojo":null,"odin":null,"ruby":6,"rust":177,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":15,"elixir":null,"fsharp":null,"kotlin":4,"python":73,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":13,"typescript":15},"concept-slugs":[],"description-markdown-template":"In this stage, you will implement a forwarding DNS server.\n\nA forwarding DNS server, also known as a DNS forwarder, is a DNS server that is configured to pass DNS queries it receives from clients to another DNS server for resolution. Instead of directly resolving DNS queries by looking up the information in its own local cache or authoritative records.\n\n---\nIn this stage the tester will execute your program like this:\n\n```bash\n./your_server --resolver \u003caddress\u003e\n```\n* where `\u003caddress\u003e` will be of the form `\u003cip\u003e:\u003cport\u003e`\n\nIt'll then send a UDP packet (containing a DNS query) to port 2053. Your program will be responsible for forwarding DNS queries to a specified DNS server, and then returning the response to the original requester (i.e. the tester).\n\nYour program will need to respond with a DNS reply packet that contains:\n- a header section (same as in stage #5)\n- a question section (same as in stage #6)\n- an answer section (new in this stage) mimicing what you received from the DNS server to which you forwarded the request.\n\nHere are a few assumptions you can make about the tester -\n* It will always send you queries for `A` record type. So your parsing logic only needs to take care of this.\n\nHere are few assumptions you can make about the DNS server you are forwarding the requests to -\n* It will always respond with an answer section for the queries that originate from the tester.\n* It will not contain other sections like (authority section and additional section)\n* It will only respond when there is only one question in the question section. If you send multiple questions in the question section, it will not respond at all. So when you receive multiple questions in the question section you will need to split it into two DNS packets and then send them to this resolver then merge the response in a single packet.\n\nRemember to mimic the packet identifier value sent by the tester in your response.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, we'll call a DNS server which will do the actual DNS resolution.","name":"Forwarding Server","position":8,"position-within-course":8,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"gt1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"a3757d22-863c-4d52-9562-13a7f8234493","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":19,"go":314,"cpp":29,"nim":null,"php":null,"zig":null,"dart":null,"java":69,"mojo":null,"odin":null,"ruby":11,"rust":402,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":20,"elixir":null,"fsharp":null,"kotlin":7,"python":184,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":60,"typescript":57},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend your DNS server to respond with the \"question\" section, the second section of a DNS message.\n\n### Question section structure\n\nThe question section contains a list of questions (usually just 1) that the sender wants to ask the receiver. This section is present\nin both query and reply packets.\n\nEach question has the following structure:\n\n- **Name**: A domain name, represented as a sequence of \"labels\" (more on this below)\n- **Type**: 2-byte int; the type of record (1 for an A record, 5 for a CNAME record etc., full list [here](https://www.rfc-editor.org/rfc/rfc1035#section-3.2.2))\n- **Class**: 2-byte int; usually set to `1` (full list [here](https://www.rfc-editor.org/rfc/rfc1035#section-3.2.4))\n\n[Section 4.1.2](https://www.rfc-editor.org/rfc/rfc1035#section-4.1.2) of the RFC covers the question section format in\ndetail. [Section 3.2](https://www.rfc-editor.org/rfc/rfc1035#section-3.2) has more details on Type and class.\n\n### Domain name encoding\n\nDomain names in DNS packets are encoded as a sequence of labels.\n\nLabels are encoded as `\u003clength\u003e\u003ccontent\u003e`, where `\u003clength\u003e` is a single byte that specifies the length of the label,\nand `\u003ccontent\u003e` is the actual content of the label. The sequence of labels is terminated by a null byte (`\\x00`).\n\nFor example:\n\n- `google.com` is encoded as `\\x06google\\x03com\\x00` (in hex: `06 67 6f 6f 67 6c 65 03 63 6f 6d 00`)\n  - `\\x06google` is the first label\n      - `\\x06` is a single byte, which is the length of the label\n      - `google` is the content of the label\n  - `\\x03com` is the second label\n      - `\\x03` is a single byte, which is the length of the label\n      - `com` is the content of the label\n  - `\\x00` is the null byte that terminates the domain name\n\n---\n\nJust like in the previous stage, the tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a UDP packet (containing a DNS query) to port 2053. Your program will need to respond with a\nDNS reply packet that contains the question section described above (along with the header section from the previous stage).\n\nHere are the expected values for the question section:\n\n| Field | Expected value                                                                                          |\n| ----- | ------------------------------------------------------------------------------------------------------- |\n| Name  | `\\x0ccodecrafters\\x02io` followed by a null byte (that's `codecrafters.io` encoded as a label sequence) |\n| Type  | 1 encoded as a 2-byte big-endian int (corresponding to the \"A\" record type)                             |\n| Class | 1 encoded as a 2-byte big-endian int (corresponding to the \"IN\" record class)                           |\n\nMake sure to update the `QDCOUNT` field in the header section accordingly, and remember to set the id to `1234`.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, we'll write a DNS packet's question section","name":"Write question section","position":3,"position-within-course":3,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"bf2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"00782ef5-fd3c-48ae-85ce-4eff2f61e144","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":76,"go":591,"cpp":103,"nim":null,"php":null,"zig":null,"dart":null,"java":208,"mojo":null,"odin":null,"ruby":23,"rust":750,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":56,"elixir":null,"fsharp":null,"kotlin":12,"python":477,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":263,"typescript":194},"concept-slugs":[],"description-markdown-template":"All communications in the DNS protocol are carried in a single format called a \"message\". Each message consists of\n5 sections: header, question, answer, authority, and an additional space.\n\nIn this stage, we'll focus on the \"header\" section. We'll look at the other sections in later stages.\n\n### Header section structure\n\nThe header section of a DNS message contains the following fields: (we've also included the values that the tester expects in this stage)\n\n| Field                             | Size    | Description                                                                                                            |\n| ----------------------------------| ------- | ---------------------------------------------------------------------------------------------------------------------- |\n| Packet Identifier (ID)            | 16 bits | A random ID assigned to query packets. Response packets must reply with the same ID. \u003cbr /\u003e**Expected value**: 1234.   |\n| Query/Response Indicator (QR)     | 1 bit   | 1 for a reply packet, 0 for a question packet. \u003cbr /\u003e**Expected value**: 1.                                            |\n| Operation Code (OPCODE)           | 4 bits  | Specifies the kind of query in a message. \u003cbr /\u003e**Expected value**: 0.                                                 |\n| Authoritative Answer (AA)         | 1 bit   | 1 if the responding server \"owns\" the domain queried, i.e., it's authoritative. \u003cbr /\u003e**Expected value**: 0.           |\n| Truncation (TC)                   | 1 bit   | 1 if the message is larger than 512 bytes. Always 0 in UDP responses. \u003cbr /\u003e**Expected value**: 0.                     |\n| Recursion Desired (RD)            | 1 bit   | Sender sets this to 1 if the server should recursively resolve this query, 0 otherwise. \u003cbr /\u003e**Expected value**: 0.   |\n| Recursion Available (RA)          | 1 bit   | Server sets this to 1 to indicate that recursion is available. \u003cbr /\u003e**Expected value**: 0.                            |\n| Reserved (Z)                      | 3 bits  | Used by DNSSEC queries. At inception, it was reserved for future use. \u003cbr /\u003e**Expected value**: 0.                     |\n| Response Code (RCODE)             | 4 bits  | Response code indicating the status of the response. \u003cbr /\u003e**Expected value**: 0 (no error).                           |\n| Question Count (QDCOUNT)          | 16 bits | Number of questions in the Question section. \u003cbr /\u003e**Expected value**: 0.                                              |\n| Answer Record Count (ANCOUNT)     | 16 bits | Number of records in the Answer section. \u003cbr /\u003e**Expected value**: 0.                                                  |\n| Authority Record Count (NSCOUNT)  | 16 bits | Number of records in the Authority section. \u003cbr /\u003e**Expected value**: 0.                                               |\n| Additional Record Count (ARCOUNT) | 16 bits | Number of records in the Additional section. \u003cbr /\u003e**Expected value**: 0.                                              |\n\nThe header section is always 12 bytes long. Integers are encoded in big-endian format.\n\nYou can read more about the full DNS packet format on [Wikipedia](https://en.wikipedia.org/wiki/Domain_Name_System#DNS_message_format), or\nin [RFC 1035](https://tools.ietf.org/html/rfc1035#section-4.1). [This link](https://github.com/EmilHernvall/dnsguide/blob/b52da3b32b27c81e5c6729ac14fe01fef8b1b593/chapter1.md)\nis a good tutorial that walks through the DNS packet format in detail.\n\n---\n\nJust like in the previous stage, the tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a UDP packet (containing a DNS query) to port 2053. Your program will need to respond with\na DNS reply packet that contains the header information described above.\n\nWe recommend creating an internal structure for a \"DNS message\" in your code, as we will build on this in later stages.\n\nNote: The tester sends an extra packet at the start of testing each stage. You can ignore it.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, we'll write a DNS packet's header contents","name":"Write header section","position":2,"position-within-course":2,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"tz1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"218cb3b4-7fcd-4fb7-82a2-c1f2e88585b3","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"language":{"data":{"id":"8ee02441-697a-4e6d-8015-44e472b0c1b8","type":"language"}}}},{"id":"a418eba4-27fa-4eb5-8367-49615d47b7c7","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"language":{"data":{"id":"16121c66-8a81-452d-8c3a-f9fa221e7936","type":"language"}}}},{"id":"382d9817-fc81-43b3-9a75-4218c25b1b65","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"language":{"data":{"id":"fb72dae0-177a-45cc-a63e-71f9dd3184ac","type":"language"}}}},{"id":"dadd5401-35bf-439d-8217-a950e0b347b6","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"language":{"data":{"id":"1dbc76cc-c216-4776-a605-3a5784b801a9","type":"language"}}}},{"id":"2a6ba5d4-d183-4857-a43b-b0ddb4346f0f","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"language":{"data":{"id":"4cd22891-8eaa-4f67-8b58-30b0403e59aa","type":"language"}}}},{"id":"255f97bd-907b-44af-a867-91fe9e2d8282","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"language":{"data":{"id":"63d38ef2-f131-4635-aa66-0cf404826f9b","type":"language"}}}},{"id":"acbe1b79-5459-4193-a3de-1ff057f2d93b","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"language":{"data":{"id":"3236a60c-e348-4db7-9e6a-e2826b38d991","type":"language"}}}},{"id":"2fa53ec6-c45d-44ab-b207-95908c719d30","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"language":{"data":{"id":"a58f0983-d67d-47e6-97e7-c02aec9ec269","type":"language"}}}},{"id":"61ed4531-f846-4adf-8a5d-eaaa361d6cdb","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"language":{"data":{"id":"5ddd40dd-1539-4214-a40c-cc7a9e5edf35","type":"language"}}}},{"id":"980b38ca-b8c4-46f1-a939-c7b4a01b9caa","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"language":{"data":{"id":"c9b581c8-6977-4f1b-9c8b-e1ee5fd7a10f","type":"language"}}}},{"id":"e6eef8f9-1b25-4010-aa18-6a37c4d850fc","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"18d77854-8ef2-4e54-a20b-a7b0edf53fed","type":"course"}},"language":{"data":{"id":"3ee6502c-281b-480f-a4bf-4a3efd209689","type":"language"}}}},{"id":"8cde99f9-1434-4fc5-9dbb-66a94cd3fe7a","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension you'll add [persistence][redis-persistence] support to your Redis implementation.\n\nAlong the way you'll learn about Redis's [RDB file format][rdb-file-format], the [SAVE][save-command] command, and more.\n\n[redis-persistence]: https://redis.io/docs/manual/persistence/\n[rdb-file-format]: https://github.com/sripathikrishnan/redis-rdb-tools/blob/548b11ec3c81a603f5b321228d07a61a0b940159/docs/RDB_File_Format.textile\n[save-command]: https://redis.io/commands/save/","name":"Extension 1","position":1,"slug":"ext1"},"relationships":{"course":{"data":{"id":"8e67269c-662e-4b7a-8148-8de9a380a6c1","type":"course"}}}},{"id":"a52cac22-b58b-42fb-83f5-7b448218f3d5","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension you'll add support for the [Stream][redis-streams-data-type] data type to your Redis implementation.\n\nAlong the way you'll learn about commands like [XADD][xadd-command], [XRANGE][xrange-command] and more.\n\n[redis-streams-data-type]: https://redis.io/docs/data-types/streams/\n[xadd-command]: https://redis.io/commands/xadd/\n[xrange-command]: https://redis.io/commands/xrange/","name":"Extension 2","position":1,"slug":"ext2"},"relationships":{"course":{"data":{"id":"8e67269c-662e-4b7a-8148-8de9a380a6c1","type":"course"}}}},{"id":"37d0c197-a4b2-4301-83fb-61e1d0eb74f5","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{},"concept-slugs":[],"description-markdown-template":"In this stage, we'll do XYZ\n\n**Example:** ABC\n\nYour program will be executed like this:\n\n```bash\n$ echo \"apple\" | ./your_executable.sh -E \"a\"\n```\n\nYou program must ABCD.","difficulty":"very_easy","is-paid":false,"marketing-markdown":"In this stage, we'll do XYZ.","name":"The second stage","position":2,"position-within-course":2,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"lr7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"8e67269c-662e-4b7a-8148-8de9a380a6c1","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"43ae77cf-a1d2-4b85-b6fe-03b3ea8f6356","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{},"concept-slugs":[],"description-markdown-template":"In this stage, we'll do XYZ\n\n**Example:** ABC\n\nYour program will be executed like this:\n\n```bash\n$ echo \"apple\" | ./your_executable.sh -E \"a\"\n```\n\nYou program must ABCD.","difficulty":"very_easy","is-paid":true,"marketing-markdown":"In this stage, we'll do XYZ.","name":"Start with ext2","position":5,"position-within-course":5,"position-within-extension":1,"primary-extension-slug":"ext2","secondary-extension-slugs":[],"slug":"ae0","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"8e67269c-662e-4b7a-8148-8de9a380a6c1","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"4796f5d6-8ed0-4d70-bb98-350f59351756","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{},"concept-slugs":[],"description-markdown-template":"In this stage, we'll do XYZ\n\n**Example:** ABC\n\nYour program will be executed like this:\n\n```bash\n$ echo \"apple\" | ./your_executable.sh -E \"a\"\n```\n\nYou program must ABCD.","difficulty":"very_easy","is-paid":true,"marketing-markdown":"In this stage, we'll do XYZ.","name":"Finish with ext1","position":4,"position-within-course":4,"position-within-extension":2,"primary-extension-slug":"ext1","secondary-extension-slugs":[],"slug":"wd5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"8e67269c-662e-4b7a-8148-8de9a380a6c1","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"80cd8df0-7fe5-4eba-b347-5ae3697da297","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{},"concept-slugs":[],"description-markdown-template":"In this stage, we'll do XYZ\n\n**Example:** ABC\n\nYour program will be executed like this:\n\n```bash\n$ echo \"apple\" | ./your_executable.sh -E \"a\"\n```\n\nYou program must ABCD.","difficulty":"very_easy","is-paid":true,"marketing-markdown":"In this stage, we'll do XYZ.","name":"Finish with ext1 + ext2","position":6,"position-within-course":6,"position-within-extension":2,"primary-extension-slug":"ext2","secondary-extension-slugs":["ext1"],"slug":"um4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"8e67269c-662e-4b7a-8148-8de9a380a6c1","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"8a6c9f93-64ce-4776-8f5a-0ddc51b1dfef","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{},"concept-slugs":[],"description-markdown-template":"In this stage, we'll do XYZ\n\n**Example:** ABC\n\nYour program will be executed like this:\n\n```bash\n$ echo \"apple\" | ./your_executable.sh -E \"a\"\n```\n\nYou program must ABCD.","difficulty":"very_easy","is-paid":true,"marketing-markdown":"In this stage, we'll do XYZ.","name":"Start with ext1","position":3,"position-within-course":3,"position-within-extension":1,"primary-extension-slug":"ext1","secondary-extension-slugs":[],"slug":"qh7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"8e67269c-662e-4b7a-8148-8de9a380a6c1","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"d13ac62b-6484-49d5-ae8d-cfe2b7a48b31","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{},"concept-slugs":[],"description-markdown-template":"In this stage, we'll do XYZ\n\n**Example:** ABC\n\nYour program will be executed like this:\n\n```bash\n$ echo \"apple\" | ./your_executable.sh -E \"a\"\n```\n\nYou program must ABCD.\n\nHere's a sample table:\n\n| Column 1 Header | Column 2 Header | Column 3 Header |\n| --------------- | --------------- | --------------- |\n| Row 1, Col 1    | Row 1, Col 2    | Row 1, Col 3    |\n| Row 2, Col 1    | Row 2, Col 2    | Row 2, Col 3    |\n| Row 3, Col 1    | Row 3, Col 2    | Row 3, Col 3    |\n\nAnd a new edit that must be synced automatically","difficulty":"very_easy","is-paid":false,"marketing-markdown":"In this stage, we'll do XYZ.","name":"The first stage","position":1,"position-within-course":1,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ah7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"8e67269c-662e-4b7a-8148-8de9a380a6c1","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"68771b0f-c885-4cdf-9338-b5463828b61c","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"8e67269c-662e-4b7a-8148-8de9a380a6c1","type":"course"}},"language":{"data":{"id":"3236a60c-e348-4db7-9e6a-e2826b38d991","type":"language"}}}},{"id":"8ac73e95-29fa-4bfe-be8c-b3a710551370","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"8e67269c-662e-4b7a-8148-8de9a380a6c1","type":"course"}},"language":{"data":{"id":"a58f0983-d67d-47e6-97e7-c02aec9ec269","type":"language"}}}},{"id":"75fbf742-7bd0-48c8-b25d-3d0594d22e5f","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"8e67269c-662e-4b7a-8148-8de9a380a6c1","type":"course"}},"language":{"data":{"id":"5ddd40dd-1539-4214-a40c-cc7a9e5edf35","type":"language"}}}},{"id":"1b473653-1c1a-4527-b463-f7d12506324b","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension you'll add [compression][http-compression] support to your HTTP server implementation.\n\nAlong the way you'll learn about compression, compression scheme negotiation and more.\n\n[http-compression]: https://en.wikipedia.org/wiki/HTTP_compression\n","name":"HTTP Compression","position":1,"slug":"http-compression"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}}}},{"id":"93227e42-c01a-4f76-b695-e08ed1766098","type":"course-stages","attributes":{"approved-comments-count":10,"community-solution-counts":{"c":247,"go":1388,"cpp":252,"nim":null,"php":null,"zig":58,"dart":5,"java":373,"mojo":null,"odin":null,"ruby":55,"rust":1168,"gleam":5,"ocaml":null,"scala":null,"swift":null,"csharp":218,"elixir":18,"fsharp":null,"kotlin":19,"python":929,"racket":null,"clojure":null,"crystal":null,"haskell":40,"reasonml":null,"commonlisp":null,"javascript":529,"typescript":310},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for the `POST` method of the `/files/{filename}` endpoint, which accepts text from the client and creates a new file with that text.\n\n### Request body\n\nA request body is used to send data from the client to the server.\n\nHere's an example of a `POST /files/{filename}` request:\n```\n// Request line\nPOST /files/number HTTP/1.1\n\\r\\n\n\n// Headers\nHost: localhost:4221\\r\\n\nUser-Agent: curl/7.64.1\\r\\n\nAccept: */*\\r\\n\nContent-Type: application/octet-stream  // Header that specifies the format of the request body\nContent-Length: 5\\r\\n                   // Header that specifies the size of the request body, in bytes\n\\r\\n\n\n// Request Body\n12345\n```\n\n### Tests\n\nThe tester will execute your program with a `--directory` flag. The `--directory` flag specifies the directory to create the file in, as an absolute path.\n```\n$ ./your_program.sh --directory /tmp/\n```\n\nThe tester will then send a `POST` request to the `/files/{filename}` endpoint on your server, with the following parts:\n- `Content-Type` header set to `application/octet-stream`.\n- `Content-Length` header set to the size of the request body, in bytes.\n- Request body set to some random text.\n\n```\n$ curl -v --data \"12345\" -H \"Content-Type: application/octet-stream\" http://localhost:4221/files/file_123\n```\n\nYour server must return a `201` response:\n```\nHTTP/1.1 201 Created\\r\\n\\r\\n\n```\n\nYour server must also create a new file in the files directory, with the following requirements:\n- The filename must equal the `filename` parameter in the endpoint.\n- The file must contain the contents of the request body.\n\n{{#reader_is_bot}}\nDo not use the HTTP server utilities available in the standard library. Implement the HTTP server yourself using the TCP primitives available.\n{{/reader_is_bot}}","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for receiving POST requests.","name":"Read request body","position":8,"position-within-course":8,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"qv8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"0bed6e74-a5c4-4a9c-865e-05b9727aa26b","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":124,"go":717,"cpp":138,"nim":null,"php":null,"zig":36,"dart":2,"java":226,"mojo":null,"odin":null,"ruby":35,"rust":447,"gleam":3,"ocaml":null,"scala":null,"swift":null,"csharp":132,"elixir":13,"fsharp":null,"kotlin":17,"python":477,"racket":null,"clojure":null,"crystal":null,"haskell":15,"reasonml":null,"commonlisp":null,"javascript":182,"typescript":223},"concept-slugs":[],"description-markdown-template":"Welcome to the HTTP Compression extension! In this extension, you'll add support for [compression](https://en.wikipedia.org/wiki/HTTP_compression) to your HTTP server.\n\nIn this stage, you'll add support for the `Accept-Encoding` and `Content-Encoding` headers.\n\n### `Accept-Encoding` and `Content-Encoding`\n\nAn HTTP client uses the `Accept-Encoding` header to specify the compression schemes it supports. In the following example, the client specifies that it supports the `gzip` compression scheme:\n```\n\u003e GET /echo/foo HTTP/1.1\n\u003e Host: localhost:4221\n\u003e User-Agent: curl/7.81.0\n\u003e Accept: */*\n\u003e Accept-Encoding: gzip  // Client specifies it supports the gzip compression scheme.\n```\n\nThe server then chooses one of the compression schemes listed in `Accept-Encoding` and compresses the response body with it.\n\nThen, the server sends a response with the compressed body and a `Content-Encoding` header. `Content-Encoding` specifies the compression scheme that was used.\n\nIn the following example, the response body is compressed with `gzip`:\n```\n\u003c HTTP/1.1 200 OK\n\u003c Content-Encoding: gzip    // Server specifies that the response body is compressed with gzip.\n\u003c Content-Type: text/plain  // Original media type of the body.\n\u003c Content-Length: 23        // Size of the compressed body.\n\u003c ...                       // Compressed body.\n```\n\nIf the server doesn't support any of the compression schemes specified by the client, then it will not compress the response body. Instead, it will send a standard response and omit the `Content-Encoding` header.\n\nFor this extension, assume that your server only supports the `gzip` compression scheme.\n\nFor this stage, you don't need to compress the body. You'll implement compression in a later stage.\n\n### Tests\n\nThe tester will execute your program like this:\n```\n$ ./your_program.sh\n```\n\nThe tester will then send two `GET` requests to the `/echo/{str}` endpoint on your server.\n\n#### First request\n\nFirst, the tester will send a request with this header: `Accept-Encoding: gzip`.\n```\n$ curl -v -H \"Accept-Encoding: gzip\" http://localhost:4221/echo/abc\n```\n\nYour server's response must contain this header: `Content-Encoding: gzip`.\n```\nHTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Encoding: gzip\n\n...  // Body omitted.\n```\n\n#### Second request\n\nNext, the tester will send a request with this header: `Accept-Encoding: invalid-encoding`.\n```\n$ curl -v -H \"Accept-Encoding: invalid-encoding\" http://localhost:4221/echo/abc\n```\n\nYour server's response must not contain a `Content-Encoding` header:\n```\nHTTP/1.1 200 OK\nContent-Type: text/plain\n\n...  // Body omitted.\n```\n\n### Notes\n\n- You'll add support for `Accept-Encoding` headers with multiple compression schemes in a later stage.\n- There's another method for HTTP compression that uses the `TE` and `Transfer-Encoding` headers. We won't cover that method in this extension.\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for reading the `Accept-Encoding` header sent by clients, and respond with `Content-Encoding` header in your response.\n","name":"Compression headers","position":9,"position-within-course":9,"position-within-extension":1,"primary-extension-slug":"http-compression","secondary-extension-slugs":[],"slug":"df4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"08a4cbe3-ade9-432b-81ca-86d8100c1112","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{"c":1343,"go":3976,"cpp":1184,"nim":null,"php":null,"zig":308,"dart":72,"java":1821,"mojo":null,"odin":null,"ruby":171,"rust":3874,"gleam":43,"ocaml":null,"scala":null,"swift":null,"csharp":1017,"elixir":103,"fsharp":null,"kotlin":101,"python":3147,"racket":null,"clojure":null,"crystal":null,"haskell":124,"reasonml":null,"commonlisp":null,"javascript":2393,"typescript":1041},"concept-slugs":["network-protocols","tcp-overview","go-tcp-server","rust-tcp-server","python-tcp-server"],"description-markdown-template":"In this stage, your server will respond to an HTTP request with a `200` response.\n\n### HTTP response\n\nAn HTTP response is made up of three parts, each separated by a [CRLF](https://developer.mozilla.org/en-US/docs/Glossary/CRLF) (`\\r\\n`):\n1.  Status line.\n2.  Zero or more headers, each ending with a CRLF.\n3.  Optional response body.\n\nIn this stage, your server's response will only contain a status line. Here's the response your server must send:\n```javascript\nHTTP/1.1 200 OK\\r\\n\\r\\n\n```\n\nHere's a breakdown of the response:\n```javascript\n// Status line\nHTTP/1.1  // HTTP version\n200       // Status code\nOK        // Optional reason phrase\n\\r\\n      // CRLF that marks the end of the status line\n\n// Headers (empty)\n\\r\\n      // CRLF that marks the end of the headers\n\n// Response body (empty)\n```\n\n### Tests\n\nThe tester will execute your program like this:\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then send an HTTP `GET` request to your server:\n```bash\n$ curl -v http://localhost:4221\n```\n\nYour server must respond to the request with the following response:\n```javascript\nHTTP/1.1 200 OK\\r\\n\\r\\n\n```\n\n### Notes\n\n- You can ignore the contents of the request. We'll cover parsing requests in later stages.\n- For more information about HTTP responses, see the [MDN Web Docs on HTTP responses](https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages#http_responses) or the [HTTP/1.1 specification](https://datatracker.ietf.org/doc/html/rfc9112#name-message).\n- This challenge uses HTTP/1.1.\n\n{{#reader_is_bot}}\nDo not use the HTTP server utilities available in the standard library. Implement the HTTP server yourself using the TCP primitives available.\n{{/reader_is_bot}}","difficulty":"very_easy","is-paid":false,"marketing-markdown":"In this stage, you'll extend your TCP server to respond to a HTTP request with a 200 response.","name":"Respond with 200","position":2,"position-within-course":2,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ia4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"12101161-f98f-4a29-9d3c-e69ddfa2592f","type":"course-stages","attributes":{"approved-comments-count":4,"community-solution-counts":{},"concept-slugs":["network-protocols","tcp-overview","go-tcp-server","rust-tcp-server","python-tcp-server"],"description-markdown-template":"In this stage, you'll create a TCP server that listens on port 4221.\n\n[TCP](https://www.cloudflare.com/en-ca/learning/ddos/glossary/tcp-ip/) is the underlying protocol used by HTTP servers.\n\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n$ ./your_program.sh\n```\n\nThen, the tester will try to connect to your server on port 4221. The connection must succeed for you to pass this stage.","difficulty":"very_easy","is-paid":false,"marketing-markdown":"In this stage, you'll build a TCP server that listens on port 4221.","name":"Bind to a port","position":1,"position-within-course":1,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"at4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"633db1ac-f403-4e67-a652-e517c93d8cb4","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{"c":82,"go":648,"cpp":113,"nim":null,"php":null,"zig":29,"dart":2,"java":189,"mojo":null,"odin":null,"ruby":32,"rust":364,"gleam":3,"ocaml":null,"scala":null,"swift":null,"csharp":113,"elixir":10,"fsharp":null,"kotlin":15,"python":423,"racket":null,"clojure":null,"crystal":null,"haskell":14,"reasonml":null,"commonlisp":null,"javascript":157,"typescript":197},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for [`gzip` compression](https://www.gzip.org/) to your HTTP server.\n\n### Tests\n\nThe tester will execute your program like this:\n```\n$ ./your_program.sh\n```\n\nThen, the tester will send a `GET` request to the `/echo/{str}` endpoint on your server. The request will contain an `Accept-Encoding` header that includes `gzip`.\n```\n$ curl -v -H \"Accept-Encoding: gzip\" http://localhost:4221/echo/abc | hexdump -C\n```\n\nYour server's response must contain the following:\n- `200` response code.\n- `Content-Type` header set to `text/plain`.\n- `Content-Encoding` header set to `gzip`.\n- `Content-Length` header set to the size of the compressed body.\n- Response body set to the `gzip`-compressed `str` parameter.\n\n```\nHTTP/1.1 200 OK\nContent-Encoding: gzip\nContent-Type: text/plain\nContent-Length: 23\n\n1F 8B 08 00 00 00 00 00  // Hexadecimal representation of the response body\n00 03 4B 4C 4A 06 00 C2\n41 24 35 03 00 00 00\n```\n\n### Notes\n\n- To check that your compressed body is correct, you can run `echo -n \u003cuncompressed-str\u003e | gzip | hexdump -C`.\n- It's normal for a very short string like `abc` to increase in size when compressed.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for encoding the response body using `gzip`.\n","name":"Gzip compression","position":11,"position-within-course":11,"position-within-extension":3,"primary-extension-slug":"http-compression","secondary-extension-slugs":[],"slug":"cr8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"c35d310b-7528-4b81-ac3c-733961862f97","type":"course-stages","attributes":{"approved-comments-count":9,"community-solution-counts":{"c":348,"go":1395,"cpp":297,"nim":null,"php":null,"zig":74,"dart":null,"java":469,"mojo":null,"odin":null,"ruby":59,"rust":1330,"gleam":1,"ocaml":null,"scala":null,"swift":null,"csharp":275,"elixir":20,"fsharp":null,"kotlin":28,"python":1057,"racket":null,"clojure":null,"crystal":null,"haskell":32,"reasonml":null,"commonlisp":null,"javascript":397,"typescript":62},"concept-slugs":["network-protocols","tcp-overview","go-tcp-server","rust-tcp-server","python-tcp-server"],"description-markdown-template":"In this stage, you'll add support for concurrent connections.\n\n{{#lang_is_javascript}}\nIn most languages, you'd need to either use threads or implement an\n[Event Loop](https://en.wikipedia.org/wiki/Event_loop) to do this. In JavaScript however, since [the concurrency\nmodel itself is based on an event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop), most\nstandard library functions are designed to support this kind of concurrent behaviour out of the box. **It is very\nlikely that the code you had for the previous stage will pass this stage without any changes!**\n{{/lang_is_javascript}}\n\n{{#lang_is_typescript}}\nIn most languages, you'd need to either use threads or implement an\n[Event Loop](https://en.wikipedia.org/wiki/Event_loop) to do this. In TypeScript however, since [the concurrency\nmodel itself is based on an event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop), most\nstandard library functions are designed to support this kind of concurrent behaviour out of the box. **It is very\nlikely that the code you had for the previous stage will pass this stage without any changes!**\n{{/lang_is_typescript}}\n\n### Tests\n\nThe tester will execute your program like this:\n```bash\n$ ./your_program.sh\n```\n\nThen, the tester will create multiple concurrent TCP connections to your server. (The exact number of connections is determined at random.) After that, the tester will send a single `GET` request through each of the connections.\n```bash\n$ (sleep 3 \u0026\u0026 printf \"GET / HTTP/1.1\\r\\n\\r\\n\") | nc localhost 4221 \u0026\n$ (sleep 3 \u0026\u0026 printf \"GET / HTTP/1.1\\r\\n\\r\\n\") | nc localhost 4221 \u0026\n$ (sleep 3 \u0026\u0026 printf \"GET / HTTP/1.1\\r\\n\\r\\n\") | nc localhost 4221 \u0026\n```\n\nYour server must respond to each request with the following response:\n```javascript\nHTTP/1.1 200 OK\\r\\n\\r\\n\n```\n\n{{#reader_is_bot}}\nDo not use the HTTP server utilities available in the standard library. Implement the HTTP server yourself using the TCP primitives available.\n{{/reader_is_bot}}","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for handling multiple concurrent connections.","name":"Concurrent connections","position":6,"position-within-course":6,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ej5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"9bfa62f1-e8d2-4cfa-a2a5-6f6e2a382c4b","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{"c":286,"go":1538,"cpp":274,"nim":null,"php":null,"zig":66,"dart":5,"java":434,"mojo":null,"odin":null,"ruby":61,"rust":1361,"gleam":5,"ocaml":null,"scala":null,"swift":null,"csharp":252,"elixir":20,"fsharp":null,"kotlin":26,"python":1006,"racket":null,"clojure":null,"crystal":null,"haskell":43,"reasonml":null,"commonlisp":null,"javascript":598,"typescript":354},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `/files/{filename}` endpoint, which returns a requested file to the client.\n\n### Tests\nThe tester will execute your program with a `--directory` flag. The `--directory` flag specifies the directory where the files are stored, as an absolute path.\n```\n$ ./your_program.sh --directory /tmp/\n```\n\nThe tester will then send two `GET` requests to the `/files/{filename}` endpoint on your server.\n\n#### First request\nThe first request will ask for a file that exists in the files directory:\n```\n$ echo -n 'Hello, World!' \u003e /tmp/foo\n$ curl -i http://localhost:4221/files/foo\n```\n\nYour server must respond with a `200` response that contains the following parts:\n- `Content-Type` header set to `application/octet-stream`.\n- `Content-Length` header set to the size of the file, in bytes.\n- Response body set to the file contents.\n```\nHTTP/1.1 200 OK\\r\\nContent-Type: application/octet-stream\\r\\nContent-Length: 13\\r\\n\\r\\nHello, World!\n```\n\n#### Second request\nThe second request will ask for a file that doesn't exist in the files directory:\n```\n$ curl -i http://localhost:4221/files/non_existant_file\n```\n\nYour server must respond with a `404` response:\n```\nHTTP/1.1 404 Not Found\\r\\n\\r\\n\n```\n\n{{#reader_is_bot}}\nDo not use the HTTP server utilities available in the standard library. Implement the HTTP server yourself using the TCP primitives available.\n{{/reader_is_bot}}","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for serving the contents of a file.","name":"Return a file","position":7,"position-within-course":7,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ap6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"5e680a24-f897-4ec3-b54c-cdeee60bd6c8","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":95,"go":644,"cpp":109,"nim":null,"php":null,"zig":29,"dart":1,"java":189,"mojo":null,"odin":null,"ruby":27,"rust":358,"gleam":2,"ocaml":null,"scala":null,"swift":null,"csharp":113,"elixir":10,"fsharp":null,"kotlin":15,"python":390,"racket":null,"clojure":null,"crystal":null,"haskell":12,"reasonml":null,"commonlisp":null,"javascript":151,"typescript":190},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for `Accept-Encoding` headers that contain multiple compression schemes.\n\n### Multiple compression schemes\n\nA client can specify that it supports multiple compression schemes by setting `Accept-Encoding` to a comma-separated list:\n```\nAccept-Encoding: encoding-1, encoding-2, encoding-3\n```\n\nFor this extension, assume that your server only supports the `gzip` compression scheme.\n\nFor this stage, you don't need to compress the body. You'll implement compression in a later stage.\n\n### Tests\n\nThe tester will execute your program like this:\n```\n$ ./your_program.sh\n```\n\nThe tester will then send two `GET` requests to the `/echo/{str}` endpoint on your server.\n\n#### First request\n\nFor the first request, the `Accept-Encoding` header will contain `gzip`, along with some invalid encodings:\n```\n$ curl -v -H \"Accept-Encoding: invalid-encoding-1, gzip, invalid-encoding-2\" http://localhost:4221/echo/abc\n```\n\nYour server's response must contain this header: `Content-Encoding: gzip`.\n```javascript\nHTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Encoding: gzip\n\n// Body omitted.\n```\n\n#### Second request\n\nFor the second request, the `Accept-Encoding` header will only contain invalid encodings:\n```\n$ curl -v -H \"Accept-Encoding: invalid-encoding-1, invalid-encoding-2\" http://localhost:4221/echo/abc\n```\n\nYour server's response must not contain a `Content-Encoding` header:\n```javascript\nHTTP/1.1 200 OK\nContent-Type: text/plain\n\n// Body omitted.\n```\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for reading multiple compression values from `Accept-Encoding` header sent by clients, and respond with `Content-Encoding` header in your response.\n","name":"Multiple compression schemes","position":10,"position-within-course":10,"position-within-extension":2,"primary-extension-slug":"http-compression","secondary-extension-slugs":[],"slug":"ij8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"dfdb295f-740c-4b47-b003-5eaa5ea67f9a","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":440,"go":1823,"cpp":372,"nim":null,"php":null,"zig":87,"dart":6,"java":579,"mojo":null,"odin":null,"ruby":77,"rust":1662,"gleam":8,"ocaml":null,"scala":null,"swift":null,"csharp":338,"elixir":28,"fsharp":null,"kotlin":36,"python":1301,"racket":null,"clojure":null,"crystal":null,"haskell":52,"reasonml":null,"commonlisp":null,"javascript":742,"typescript":430},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `/user-agent` endpoint, which reads the `User-Agent` request header and returns it in the response body.\n\n### The `User-Agent` header\n\nThe [`User-Agent`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) header describes the client's user agent.\n\nYour `/user-agent` endpoint must read the `User-Agent` header, and return it in your response body. Here's an example of a `/user-agent` request:\n```javascript\n// Request line\nGET\n/user-agent\nHTTP/1.1\n\\r\\n\n\n// Headers\nHost: localhost:4221\\r\\n\nUser-Agent: foobar/1.2.3\\r\\n  // Read this value\nAccept: */*\\r\\n\n\\r\\n\n\n// Request body (empty)\n```\n\nHere is the expected response:\n```javascript\n// Status line\nHTTP/1.1 200 OK               // Status code must be 200\n\\r\\n\n\n// Headers\nContent-Type: text/plain\\r\\n\nContent-Length: 12\\r\\n\n\\r\\n\n\n// Response body\nfoobar/1.2.3                  // The value of `User-Agent`\n```\n\n### Tests\n\nThe tester will execute your program like this:\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then send a `GET` request to the `/user-agent` endpoint on your server. The request will have a `User-Agent` header.\n```bash\n$ curl -v --header \"User-Agent: foobar/1.2.3\" http://localhost:4221/user-agent\n```\n\nYour server must respond with a `200` response that contains the following parts:\n- `Content-Type` header set to `text/plain`.\n- `Content-Length` header set to the length of the `User-Agent` value.\n- Message body set to the `User-Agent` value.\n```javascript\nHTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\nfoobar/1.2.3\n```\n\n### Notes\n- Header names are [case-insensitive](https://datatracker.ietf.org/doc/html/rfc9112#name-field-syntax).\n\n{{#reader_is_bot}}\nDo not use the HTTP server utilities available in the standard library. Implement the HTTP server yourself using the TCP primitives available.\n{{/reader_is_bot}}","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for parsing HTTP request headers.","name":"Read header","position":5,"position-within-course":5,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"fs3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"cf1fd68a-413c-4cde-be00-23b7b830eabf","type":"course-stages","attributes":{"approved-comments-count":4,"community-solution-counts":{"c":531,"go":2071,"cpp":440,"nim":null,"php":null,"zig":106,"dart":6,"java":718,"mojo":null,"odin":null,"ruby":94,"rust":1919,"gleam":9,"ocaml":null,"scala":null,"swift":null,"csharp":397,"elixir":32,"fsharp":null,"kotlin":40,"python":1445,"racket":null,"clojure":null,"crystal":null,"haskell":58,"reasonml":null,"commonlisp":null,"javascript":854,"typescript":496},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `/echo/{str}` endpoint, which accepts a string and returns it in the response body.\n\n### Response body\n\nA response body is used to return content to the client. This content may be an entire web page, a file, a string, or anything else that can be represented with bytes.\n\nYour `/echo/{str}` endpoint must return a `200` response, with the response body set to given string, and with a `Content-Type` and `Content-Length` header.\n\nHere's an example of an `/echo/{str}` request:\n```javascript\nGET /echo/abc HTTP/1.1\\r\\nHost: localhost:4221\\r\\nUser-Agent: curl/7.64.1\\r\\nAccept: */*\\r\\n\\r\\n\n```\n\nAnd here's the expected response:\n```javascript\nHTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\nContent-Length: 3\\r\\n\\r\\nabc\n```\n\nHere's a breakdown of the response:\n```javascript\n// Status line\nHTTP/1.1 200 OK\n\\r\\n                          // CRLF that marks the end of the status line\n\n// Headers\nContent-Type: text/plain\\r\\n  // Header that specifies the format of the response body\nContent-Length: 3\\r\\n         // Header that specifies the size of the response body, in bytes\n\\r\\n                          // CRLF that marks the end of the headers\n\n// Response body\nabc                           // The string from the request\n```\n\nThe two headers are required for the client to be able to parse the response body. Note that each header ends in a CRLF, and the entire header section also ends in a CRLF.\n\n### Tests\n\nThe tester will execute your program like this:\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then send a `GET` request to the `/echo/{str}` endpoint on your server, with some random string.\n```bash\n$ curl -v http://localhost:4221/echo/abc\n```\n\nYour server must respond with a `200` response that contains the following parts:\n- `Content-Type` header set to `text/plain`.\n- `Content-Length` header set to the length of the given string.\n- Response body set to the given string.\n```javascript\nHTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\nContent-Length: 3\\r\\n\\r\\nabc\n```\n\n### Notes\n- For more information about HTTP responses, see the [MDN Web Docs on HTTP responses](https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages#http_responses) or the [HTTP/1.1 specification](https://datatracker.ietf.org/doc/html/rfc9112#name-message).\n\n{{#reader_is_bot}}\nDo not use the HTTP server utilities available in the standard library. Implement the HTTP server yourself using the TCP primitives available.\n{{/reader_is_bot}}","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for responding with a custom body in your HTTP response.","name":"Respond with body","position":4,"position-within-course":4,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"cn2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"f4cd9aa0-97d7-4755-86d0-a0d8d40ba1f4","type":"course-stages","attributes":{"approved-comments-count":5,"community-solution-counts":{"c":666,"go":2466,"cpp":540,"nim":null,"php":null,"zig":135,"dart":9,"java":868,"mojo":null,"odin":null,"ruby":110,"rust":2339,"gleam":14,"ocaml":null,"scala":null,"swift":null,"csharp":490,"elixir":38,"fsharp":null,"kotlin":44,"python":1705,"racket":null,"clojure":null,"crystal":null,"haskell":70,"reasonml":null,"commonlisp":null,"javascript":1073,"typescript":598},"concept-slugs":[],"description-markdown-template":"In this stage, your server will extract the URL path from an HTTP request, and respond with either a `200` or `404`, depending on the path.\n\n### HTTP request\n\nAn HTTP request is made up of three parts, each separated by a [CRLF](https://developer.mozilla.org/en-US/docs/Glossary/CRLF) (`\\r\\n`):\n\n1.  Request line.\n2.  Zero or more headers, each ending with a CRLF.\n3.  Optional request body.\n\nHere's an example of an HTTP request:\n```javascript\nGET /index.html HTTP/1.1\\r\\nHost: localhost:4221\\r\\nUser-Agent: curl/7.64.1\\r\\nAccept: */*\\r\\n\\r\\n\n```\n\nHere's a breakdown of the request:\n```javascript\n// Request line\nGET                          // HTTP method\n/index.html                  // Request target\nHTTP/1.1                     // HTTP version\n\\r\\n                         // CRLF that marks the end of the request line\n\n// Headers\nHost: localhost:4221\\r\\n     // Header that specifies the server's host and port\nUser-Agent: curl/7.64.1\\r\\n  // Header that describes the client's user agent\nAccept: */*\\r\\n              // Header that specifies which media types the client can accept\n\\r\\n                         // CRLF that marks the end of the headers\n\n// Request body (empty)\n```\n\nThe \"request target\" specifies the URL path for this request. In this example, the URL path is `/index.html`.\n\nNote that each header ends in a CRLF, and the entire header section also ends in a CRLF.\n\n### Tests\n\nThe tester will execute your program like this:\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then send two HTTP requests to your server.\n\nFirst, the tester will send a `GET` request, with a random string as the path:\n```bash\n$ curl -v http://localhost:4221/abcdefg\n```\n\nYour server must respond to this request with a `404` response:\n```javascript\nHTTP/1.1 404 Not Found\\r\\n\\r\\n\n```\n\nThen, the tester will send a `GET` request, with the path `/`:\n```bash\n$ curl -v http://localhost:4221\n```\n\nYour server must respond to this request with a `200` response:\n```javascript\nHTTP/1.1 200 OK\\r\\n\\r\\n\n```\n\n### Notes\n\n- You can ignore the headers for now. You'll learn about parsing headers in a later stage.\n- In this stage, the request target is written as a URL path. But the request target actually has [four possible formats](https://datatracker.ietf.org/doc/html/rfc9112#section-3.2). The URL path format is called the \"origin form,\" and it's the most commonly used format. The other formats are used for more niche scenarios, like sending a request through a proxy.\n- For more information about HTTP requests, see the [MDN Web Docs on HTTP requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages#http_requests) or the [HTTP/1.1 specification](https://datatracker.ietf.org/doc/html/rfc9112#name-message).\n\n{{#reader_is_bot}}\nDo not use the HTTP server utilities available in the standard library. Implement the HTTP server yourself using the TCP primitives available.\n{{/reader_is_bot}}","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for returning a 404 response if a path isn't valid.","name":"Extract URL path","position":3,"position-within-course":3,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ih0","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"a3a03cda-a904-4357-9ff6-17aa436f8d11","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"3236a60c-e348-4db7-9e6a-e2826b38d991","type":"language"}}}},{"id":"84845f4a-6aa0-48b7-8a50-a6226ad3f457","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"a58f0983-d67d-47e6-97e7-c02aec9ec269","type":"language"}}}},{"id":"f9611966-deb1-4499-9d3a-64aea107676a","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"5ddd40dd-1539-4214-a40c-cc7a9e5edf35","type":"language"}}}},{"id":"fbe4f435-009e-4a59-b6ea-9004f36b1b1e","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"eafb6f56-30a3-49d8-90b1-a2e051db26cf","type":"language"}}}},{"id":"072e8add-46cb-4d99-b3da-3894e431d5ed","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"8ee02441-697a-4e6d-8015-44e472b0c1b8","type":"language"}}}},{"id":"ed575b66-9368-4420-8c10-91e28f0ef7bd","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"16121c66-8a81-452d-8c3a-f9fa221e7936","type":"language"}}}},{"id":"e65796c7-1ec5-40fa-b9b2-45cb8680ce19","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"fb72dae0-177a-45cc-a63e-71f9dd3184ac","type":"language"}}}},{"id":"b04cea21-b0d0-4817-9749-c77033a8b3cb","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"4cd22891-8eaa-4f67-8b58-30b0403e59aa","type":"language"}}}},{"id":"3a8b347b-f32b-4caf-8c64-939b9e7cd828","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"1dbc76cc-c216-4776-a605-3a5784b801a9","type":"language"}}}},{"id":"8a5623a8-609e-4fa3-b816-42224192e0e6","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"63d38ef2-f131-4635-aa66-0cf404826f9b","type":"language"}}}},{"id":"466e8e31-e95a-4e17-948e-df9741bc3ee3","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"3ee6502c-281b-480f-a4bf-4a3efd209689","type":"language"}}}},{"id":"b0ac51b8-f24d-49c0-a991-9fbc02670808","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"6f979cea-d7af-42cf-8e8d-ca44857217c0","type":"language"}}}},{"id":"e1651270-0845-4497-bb5a-1e87b7168cc4","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"7e07ab8f-2bc0-4b20-bc72-1cd9c7e200ed","type":"language"}}}},{"id":"82669207-13ce-4766-a182-bfa044982772","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"c9b581c8-6977-4f1b-9c8b-e1ee5fd7a10f","type":"language"}}}},{"id":"1ce18167-ed0a-4625-9288-53dbd72c65cc","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"ae1f5463-4134-470d-90ab-b2568d2a63f6","type":"language"}}}},{"id":"9603f780-9438-46bb-9afc-a969c05126b8","type":"languages","attributes":{"name":"Dart","slug":"dart","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"939e1a4a-ac81-4d6e-8c4f-48b2b6e4e2be","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"d5a57f8f-0b0d-4033-926c-751b770cb968","type":"course"}},"language":{"data":{"id":"9603f780-9438-46bb-9afc-a969c05126b8","type":"language"}}}},{"id":"9c892c0d-a453-4c67-91ba-0467bf599386","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":1,"go":40,"cpp":8,"nim":null,"php":null,"zig":5,"dart":null,"java":18,"mojo":null,"odin":null,"ruby":6,"rust":70,"gleam":2,"ocaml":null,"scala":null,"swift":null,"csharp":5,"elixir":null,"fsharp":null,"kotlin":3,"python":38,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":7,"typescript":5},"concept-slugs":[],"description-markdown-template":"In this stage, you'll support filtering records using a `WHERE` clause.\n\nHere's how the tester will execute your program:\n\n```\n$ ./your_program.sh sample.db \"SELECT name, color FROM apples WHERE color = 'Yellow'\"\n```\n\nand here's the output it expects:\n\n```\nGolden Delicious|Yellow\n```\n\nFor now you can assume that the contents of the table are small enough to fit inside the root page. We'll deal\nwith tables that span multiple pages in the next stage.\n\n{{#reader_is_bot}}\nDo not use a SQLite client library, implement the SQLite logic yourself.\n{{/reader_is_bot}}","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll filter records based on a `WHERE` clause. You'll assume that the query can't be served by\nan index, so you'll visit all records in a table and then filter out the matching ones.","name":"Filter data with a WHERE clause","position":7,"position-within-course":7,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"rf3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"6004e582-58db-4b5b-8420-39e656513fdf","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":2,"go":41,"cpp":9,"nim":null,"php":null,"zig":7,"dart":null,"java":17,"mojo":null,"odin":null,"ruby":6,"rust":88,"gleam":2,"ocaml":null,"scala":null,"swift":1,"csharp":7,"elixir":null,"fsharp":null,"kotlin":3,"python":45,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":10,"typescript":5},"concept-slugs":[],"description-markdown-template":"Now that you're comfortable with jumping across database pages, let's dig a little deeper and read data from\nrows in a table.\n\nHere's how the tester will execute your program:\n\n```\n$ ./your_program.sh sample.db \"SELECT name FROM apples\"\n```\n\nand here's the output it expects:\n\n```\nGranny Smith\nFuji\nHoneycrisp\nGolden Delicious\n```\n\nThe order of rows returned doesn't matter.\n\nRows are stored on disk in the [Record Format](https://www.sqlite.org/fileformat.html#record_format), which is\njust an ordered sequence of values. To extract data for a single column, you'll need to know the order of that\ncolumn in the sequence. You'll need to parse the table's `CREATE TABLE` statement to do this. The `CREATE TABLE`\nstatement is stored in the [`sqlite_schema`](https://www.sqlite.org/schematab.html) table's `sql` column.\n\n{{#lang_is_python}}\nNot interested in implementing a SQL parser from scratch? [`sqlparse`](https://pypi.org/project/sqlparse/)\nis available as a dependency if you'd like to use it.\n{{/lang_is_python}}\n{{#lang_is_go}}\nNot interested in implementing a SQL parser from scratch? [`xwb1989/sqlparser`](https://github.com/xwb1989/sqlparser)\nis available as a dependency if you'd like to use it.\n{{/lang_is_go}}\n{{#lang_is_rust}}\nNot interested in implementing a SQL parser from scratch? The [`nom`](https://crates.io/crates/nom),\n[`peg`](https://crates.io/crates/peg) and [`regex`](https://crates.io/crates/regex) crates are available in\n`Cargo.toml` if you'd like to use them.\n{{/lang_is_rust}}\n\n{{#reader_is_bot}}\nDo not use a SQLite client library, implement the SQLite logic yourself.\n{{/reader_is_bot}}","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, your sqlite3 implementation will need to execute a SQL statement of this form:\n`SELECT \u003ccolumn\u003e FROM \u003ctable\u003e`.","name":"Read data from a single column","position":5,"position-within-course":5,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"az9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"51f1fbee-25d8-461a-8f83-5ea473582afa","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":1,"go":31,"cpp":10,"nim":null,"php":null,"zig":4,"dart":null,"java":15,"mojo":null,"odin":null,"ruby":2,"rust":58,"gleam":2,"ocaml":null,"scala":null,"swift":null,"csharp":3,"elixir":null,"fsharp":null,"kotlin":3,"python":31,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":4,"typescript":4},"concept-slugs":[],"description-markdown-template":"Time to play with larger amounts of data!\n\nIn this stage you'll deal with the same syntax as before: a query with a `WHERE` clause. However, this time, the\ntable you'll be querying will be larger and it'll span multiple pages.\n\nHere's how the tester will execute your program:\n\n```\n$ ./your_program.sh superheroes.db \"SELECT id, name FROM superheroes WHERE eye_color = 'Pink Eyes'\"\n```\n\nand here's the output it expects:\n\n```\n297|Stealth (New Earth)\n790|Tobias Whale (New Earth)\n1085|Felicity (New Earth)\n2729|Thrust (New Earth)\n3289|Angora Lapin (New Earth)\n3913|Matris Ater Clementia (New Earth)\n```\n\nThe tester is going to use a sample database of superheroes that is ~1MB in size. You can download a small\nversion of this to test locally, read the **Sample Databases** section in the **README** of your repository.\n\nYou'll need to traverse a [B-tree](https://en.wikipedia.org/wiki/B-tree) in this stage. If you're unfamiliar with\nhow B-trees work or just need a refresher, Vaidehi Joshi's\n[Busying Oneself With B-Trees](https://medium.com/basecs/busying-oneself-with-b-trees-78bbf10522e7) is a good place to\nstart. For specifics on how SQLite stores B-trees on disk, read the\n[B-tree Pages](https://www.sqlite.org/fileformat.html#b_tree_pages) documentation section.\n\n{{#reader_is_bot}}\nDo not use a SQLite client library, implement the SQLite logic yourself.\n{{/reader_is_bot}}","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll filter records based on a `WHERE` clause. You'll assume that the query can't be served by\nan index, so you'll visit all records in a table and then filter out the matching ones.","name":"Retrieve data using a full-table scan","position":8,"position-within-course":8,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ws9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"483df487-5941-42e3-818e-8929cf597ed3","type":"course-stages","attributes":{"approved-comments-count":7,"community-solution-counts":{"c":3,"go":131,"cpp":30,"nim":null,"php":null,"zig":14,"dart":null,"java":26,"mojo":null,"odin":null,"ruby":14,"rust":160,"gleam":3,"ocaml":null,"scala":null,"swift":1,"csharp":16,"elixir":null,"fsharp":null,"kotlin":3,"python":112,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":40,"typescript":6},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `.tables` [dot command](https://www.sqlite.org/cli.html#special_commands_to_sqlite3_dot_commands_), which prints the names of the user tables in a SQLite database.\n\n### The `sqlite_schema.tbl_name` column\n\nThe names of the tables in a SQLite database are stored in the `tbl_name` column of the [`sqlite_schema`](https://www.sqlite.org/schematab.html) table. The `sqlite_schema` [page](https://www.sqlite.org/fileformat.html#b_tree_pages) stores the rows of the `sqlite_schema` table in chunks of data called \"cells.\" Each cell contains a single row. You need to read all the cells and extract the value of `sqlite_schema.tbl_name` from each one.\n\n### Cell pointer array\n\nTo figure out where the cells are located, read the `sqlite_schema` page's cell pointer array. This array specifies the offsets of every cell on the page. Here's what you need to know:\n\n- The array appears directly after the page header.\n- The elements (offsets) are 2-byte big-endian values.\n- The offsets are relative to the start of the page.\n- The array size is equal to the number of cells on the page. (The page header specifies the number of cells on the page.)\n\n### Cell\n\nOnce you have all the offsets, you can read the cells. The type of cell on the `sqlite_schema` page is called a \"table b-tree leaf cell.\" It's made up of three parts:\n\n1. The size of the record, in bytes (varint)\n2. The rowid (varint)\n3. The record (record format)\n\nCells use variable-length integers, also called \"varints.\" See the [official documentation](https://www.sqlite.org/fileformat.html#b_tree_pages) to learn how they work.\n\nYou can ignore the rowid—it's not relevant to this stage.\n\nThe part you're interested in is the record. \"Record\" is just another word for \"row.\" That's the part that contains the `sqlite_schema.tbl_name` column.\n\n#### Record format\n\nRecords are stored in [record format](https://www.sqlite.org/fileformat.html#record_format):\n\n1. Header:\n    1. Size of the header, including this value (varint)\n    2. Serial type code for each column in the record, in order (varint)\n2. Body:\n    1. The value of each column in the record, in order (format varies based on serial type code)\n\nA \"serial type code\" specifies the data type and size of a column. See the [official documentation](https://www.sqlite.org/fileformat.html#record_format) for the table of all serial type codes.\n\n#### Example\n\nThe following is a cell from page 1 of `sample.db`:\n```\n00000ec0           78 03 07 17 1b  1b 01 81 47 74 61 62 6c  |   x.......Gtabl|\n00000ed0  65 6f 72 61 6e 67 65 73  6f 72 61 6e 67 65 73 04  |eorangesoranges.|\n00000ee0  43 52 45 41 54 45 20 54  41 42 4c 45 20 6f 72 61  |CREATE TABLE ora|\n00000ef0  6e 67 65 73 0a 28 0a 09  69 64 20 69 6e 74 65 67  |nges.(..id integ|\n00000f00  65 72 20 70 72 69 6d 61  72 79 20 6b 65 79 20 61  |er primary key a|\n00000f10  75 74 6f 69 6e 63 72 65  6d 65 6e 74 2c 0a 09 6e  |utoincrement,..n|\n00000f20  61 6d 65 20 74 65 78 74  2c 0a 09 64 65 73 63 72  |ame text,..descr|\n00000f30  69 70 74 69 6f 6e 20 74  65 78 74 0a 29           |iption text.)   |\n```\n\nHere's an analysis of the cell:\n```\n// Size of the record (varint): 120\n78\n\n// The rowid (safe to ignore)\n03\n\n// Record header\n07     // Size of record header (varint): 7\n\n17     // Serial type for sqlite_schema.type (varint):     23\n       // Size of sqlite_schema.type =                     (23-13)/2 = 5\n\n1b     // Serial type for sqlite_schema.name (varint):     27\n       // Size of sqlite_schema.name =                     (27-13)/2 = 7\n\n1b     // Serial type for sqlite_schema.tbl_name (varint): 27\n       // Size of sqlite_schema.tbl_name =                 (27-13)/2 = 7\n\n01     // Serial type for sqlite_schema.rootpage (varint): 1\n       // 8-bit twos-complement integer\n\n81 47  // Serial type for sqlite_schema.sql (varint):      199\n       // Size of sqlite_schema.sql =                      (199-13)/2 = 93\n\n// Record body\n74 61 62 6c 65        // Value of sqlite_schema.type:     \"table\"\n6f 72 61 6e 67 65 73  // Value of sqlite_schema.name:     \"oranges\"\n6f 72 61 6e 67 65 73  // Value of sqlite_schema.tbl_name: \"oranges\"  \u003c---\n...\n```\n\n### Tests\n\nHere's how the tester will execute your program:\n```\n$ ./your_sqlite3.sh sample.db .tables\n```\n\nYour program must print the names of the tables in the database file:\n```\napples oranges\n```\n\n### Notes\n\n- The actual `.tables` command accepts an optional pattern argument, and also adds additional spaces between each table name, for formatting purposes. You do not need to implement either of these features for your `.tables` command.\n- If a cell's payload is too large to fit on a single page, the remainder of the payload will be stored on [cell payload overflow pages](https://www.sqlite.org/fileformat.html#cell_payload_overflow_pages). You do not need to handle payload overflow in this challenge.\n- The record part of a cell is called \"payload,\" in the official documentation.\n\n{{#reader_is_bot}}\nDo not use a SQLite client library, implement the SQLite logic yourself.\n{{/reader_is_bot}}","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll implement another dot-command:\n[`.tables`](https://www.sqlite.org/cli.html#special_commands_to_sqlite3_dot_commands_). Instead of just printing\nthe count of tables like in the previous stage, you'll print out the names of tables too.","name":"Print table names","position":3,"position-within-course":3,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"sz4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"65fb746e-bda3-486a-b7cf-1423f65e8f68","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `.dbinfo` [dot command](https://www.sqlite.org/cli.html#special_commands_to_sqlite3_dot_commands_), which prints metadata about a SQLite database.\n\n### `.dbinfo`\n\nThe `.dbinfo` command is executed like this:\n```\n$ sqlite3 sample.db .dbinfo\n```\n\nIt outputs metadata about the database file:\n```yaml\ndatabase page size:  4096\nwrite format:        1\nread format:         1\n...\nnumber of tables:    5\nschema size:         330\ndata version:        1\n```\n\nIn this stage, your `.dbinfo` command only needs to output the \"database page size.\"\n\n### Database file\n\nThe SQLite database file begins with the database header. The database page size is stored in the header, right after the magic string. It's a 2-byte, big-endian value (read left-to-right).\n```\n// Start of file\n53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00  // Magic string: \"SQLite format 3\" + null terminator.\n10 00                                            /* Database page size, in bytes.\n                                                    Here, the page size is 4096 bytes. */\n...\n```\n\n### Tests\n\nHere's how the tester will execute your program:\n```\n$ ./your_program.sh sample.db .dbinfo\n```\n\nYour program must print the database page size of the database file, like this:\n```\ndatabase page size: 4096\n```\n\n### Notes\n\n- For more information about the SQLite database file format, see the [Database File Format](https://www.sqlite.org/fileformat.html#the_database_header) guide.\n- Database headers use big-endian to store multi-byte fields. See the [MDN article on endianness](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) to learn more.\n\n{{#reader_is_bot}}\nDo not use a SQLite client library, implement the SQLite logic yourself.\n{{/reader_is_bot}}","difficulty":"very_easy","is-paid":false,"marketing-markdown":"In this stage, you'll implement one of SQLite's\n[dot-commands](https://www.sqlite.org/cli.html#special_commands_to_sqlite3_dot_commands_): `.dbinfo`. This command\nprints metadata related a SQLite database, and you'll implement one of these values: the database page size. You'll\ndo this by parsing a file that uses the [SQLite database file format](https://www.sqlite.org/fileformat.html).","name":"Print page size","position":1,"position-within-course":1,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"dr6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"5cf1c981-6d20-4a6f-bce8-170c79098e40","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":1,"go":37,"cpp":8,"nim":null,"php":null,"zig":4,"dart":null,"java":16,"mojo":null,"odin":null,"ruby":6,"rust":79,"gleam":1,"ocaml":null,"scala":null,"swift":1,"csharp":7,"elixir":null,"fsharp":null,"kotlin":3,"python":40,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":8,"typescript":5},"concept-slugs":[],"description-markdown-template":"This stage is similar to the previous one, just that the tester will query for multiple columns instead of just\none.\n\nHere's how the tester will execute your program:\n\n```\n$ ./your_program.sh sample.db \"SELECT name, color FROM apples\"\n```\n\nand here's the output it expects:\n\n```\nGranny Smith|Light Green\nFuji|Red\nHoneycrisp|Blush Red\nGolden Delicious|Yellow\n```\n\nJust like in the previous stage, the order of rows doesn't matter.\n\n{{#reader_is_bot}}\nDo not use a SQLite client library, implement the SQLite logic yourself.\n{{/reader_is_bot}}","difficulty":"hard","is-paid":true,"marketing-markdown":"This stage is similar to the previous one, just that you'll read data from multiple columns instead of just one.\nIn this stage, your sqlite3 implementation will need to execute a SQL statement of this form: `SELECT \u003ccolumn1\u003e,\u003ccolumn2\u003e FROM \u003ctable\u003e`.","name":"Read data from multiple columns","position":6,"position-within-course":6,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"vc9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"e4514b6d-1ca4-42e1-b109-5ca3ebfe7de9","type":"course-stages","attributes":{"approved-comments-count":7,"community-solution-counts":{"c":30,"go":348,"cpp":175,"nim":null,"php":null,"zig":98,"dart":null,"java":112,"mojo":null,"odin":null,"ruby":31,"rust":635,"gleam":31,"ocaml":null,"scala":null,"swift":1,"csharp":95,"elixir":null,"fsharp":null,"kotlin":10,"python":414,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":119,"typescript":33},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add \"number of tables\" to your `.dbinfo` command's output.\n\n### The `sqlite_schema` table\n\nTo get the number of tables in a SQLite database, you need to examine the database's [`sqlite_schema`](https://www.sqlite.org/schematab.html) table. The `sqlite_schema` table stores the database schema.\n\nFor each table, index, view, or trigger in the database, there's a corresponding row in `sqlite_schema`. The one exception is that there's no row for the `sqlite_schema` table itself.\n\nTo see what `sqlite_schema` looks like, run this command:\n```\n$ sqlite3 sample.db \"SELECT * FROM sqlite_schema;\"\n```\n\nIn this challenge, you can assume that databases only contain tables—no indexes, views, or triggers. So, each row in `sqlite_schema` represents a table in the database. As a result, you can get the total number of tables in the database by getting the number of rows in `sqlite_schema`.\n\n### Pages\n\nA SQLite database file is made up of one or more [pages](https://www.sqlite.org/fileformat.html#pages). All tables, including `sqlite_schema`, are stored on one or more [table b-tree pages](https://www.sqlite.org/fileformat.html#b_tree_pages).\n\nIn this challenge, you can assume that the `sqlite_schema` table is small enough to fit entirely on a single page. (In reality, it can sometimes span multiple pages.) In order to get the number of rows in `sqlite_schema`, you need to read the `sqlite_schema` page.\n\n#### The `sqlite_schema` page\n\nYou'll learn more about b-tree pages in later stages. For now, here's what you need to know:\n- The `sqlite_schema` page is always page 1, and it always begins at offset 0. The file header is a part of the page.\n- The `sqlite_schema` page stores the rows of the `sqlite_schema` table in chunks of data called \"cells.\" Each cell stores a single row.\n\nSo, the number of tables in the database is equal to the number of cells on the `sqlite_schema` page.\n\n#### Cell count\n\nYou can get the number of cells on the `sqlite_schema` page by looking at the `sqlite_schema` page header. The b-tree page header contains a 2-byte big-endian value that specifies number of cells on the page. See the [official documentation](https://www.sqlite.org/fileformat.html#b_tree_pages) for more information.\n\nNote that the page header is separate from the file header. The page header appears directly after the file header.\n\n### Tests\n\nHere's how the tester will execute your program:\n```\n$ ./your_program.sh sample.db .dbinfo\n```\n\nYour program must print the following values:\n- Database page size\n- Number of tables\n\n```\ndatabase page size: 4096\nnumber of tables: 3\n```\n\n### Notes\n\n- You may find it useful to read through `sample.db` and make sure you understand the file format, before working on a solution. To do this, you can run `hexdump -C sample.db`, or use a hex editor like [HexEd.it](https://hexed.it/).\n{{#reader_is_bot}}\nDo not use a SQLite client library, implement the SQLite logic yourself.\n{{/reader_is_bot}}","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll extend support for the .dbinfo command added in the previous stage. Specifically, you'll\nimplement functionality to print the number of tables. You'll do this by parsing a file that uses the\n[SQLite database file format](https://www.sqlite.org/fileformat.html).","name":"Print number of tables","position":2,"position-within-course":2,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ce0","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"025c9f76-29f2-4a58-94e7-1e9f0438b8c8","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":2,"go":72,"cpp":18,"nim":null,"php":null,"zig":10,"dart":null,"java":20,"mojo":null,"odin":null,"ruby":8,"rust":117,"gleam":2,"ocaml":null,"scala":null,"swift":1,"csharp":9,"elixir":null,"fsharp":null,"kotlin":3,"python":65,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":18,"typescript":5},"concept-slugs":[],"description-markdown-template":"Now that you've gotten your feet wet with the [SQLite database file format](https://www.sqlite.org/fileformat.html),\nit's time to move on to actual SQL!\n\nIn this stage, your program will need to read the count of rows from a table.\n\nHere's how the tester will execute your program:\n\n```\n$ ./your_program.sh sample.db \"SELECT COUNT(*) FROM apples\"\n```\n\nand here's the output it expects:\n\n```\n4\n```\n\nYou'll need to read the table's row from the [`sqlite_schema`](https://www.sqlite.org/schematab.html) table and\nfollow the `rootpage` value to visit the page corresponding to the table. For now you can assume that the contents\nof the table are small enough to fit inside the root page. We'll deal with tables that span multiple pages in\nstage 7.\n\nRemember: You don't need to implement a full-blown SQL parser just yet. We'll get to that in the\nnext stages. For now you can just split the input by \" \" and pick the last item to get the table name.\n\n{{#reader_is_bot}}\nDo not use a SQLite client library, implement the SQLite logic yourself.\n{{/reader_is_bot}}","difficulty":"medium","is-paid":true,"marketing-markdown":"Now that you've gotten your feet wet with the [SQLite database file format](https://www.sqlite.org/fileformat.html),\nit's time to move on to actual SQL!\nIn this stage, your sqlite3 implementation will need to execute a SQL statement of this form:\n`SELECT COUNT(*) FROM \u003ctable\u003e`.","name":"Count rows in a table","position":4,"position-within-course":4,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"nd9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"232916bf-3e8e-4255-8941-5131389576dc","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":null,"go":19,"cpp":7,"nim":null,"php":null,"zig":3,"dart":null,"java":10,"mojo":null,"odin":null,"ruby":2,"rust":45,"gleam":2,"ocaml":null,"scala":null,"swift":null,"csharp":3,"elixir":null,"fsharp":null,"kotlin":2,"python":22,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":4},"concept-slugs":[],"description-markdown-template":"In this stage, we'll implement an index scan. Rather than reading _all_ rows in a table and then filtering\nin-memory, we'll use an index to perform a more intelligent search.\n\nTo test whether your implementation actually uses an index, the tester will use a database is ~1GB in size and\nexpect your program to return query results in less than 3 seconds.\n\nThe test database contains a `companies` table with an index named `idx_companies_country` on the\n`country` column.\n\nYou can download a small version of this database to test locally, read the **Sample Databases** section in the **README**\nof your repository for details.\n\nHere's how the tester will execute your program:\n\n```\n$ ./your_program.sh companies.db \"SELECT id, name FROM companies WHERE country = 'eritrea'\"\n```\n\nand here's the output it expects:\n\n```\n121311|unilink s.c.\n2102438|orange asmara it solutions\n5729848|zara mining share company\n6634629|asmara rental\n```\n\nYou can assume that all queries run by the tester will include `country` in the `WHERE` clause,\nso they can be served by the index. The tester will run multiple randomized queries and expect all of them\nto return results in under 3 seconds.\n\n{{#reader_is_bot}}\nDo not use a SQLite client library, implement the SQLite logic yourself.\n{{/reader_is_bot}}","difficulty":"hard","is-paid":true,"marketing-markdown":"This stage is similar to the previous one, but focuses on enhancing query performance using an index. In this\nstage, your program will need to read through millions of rows in under 5 seconds.","name":"Retrieve data using an index","position":9,"position-within-course":9,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"nz8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"e2df23b2-7421-4c4f-8f97-c3dfc3cc495c","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"language":{"data":{"id":"fb72dae0-177a-45cc-a63e-71f9dd3184ac","type":"language"}}}},{"id":"5dfab361-d080-401a-9f8f-5a4f4b36bf4b","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"language":{"data":{"id":"3236a60c-e348-4db7-9e6a-e2826b38d991","type":"language"}}}},{"id":"379797ec-97ed-44c7-9efc-c69c7e270491","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"language":{"data":{"id":"4cd22891-8eaa-4f67-8b58-30b0403e59aa","type":"language"}}}},{"id":"12a52d2f-38e3-448e-91d0-a6583ceee417","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"language":{"data":{"id":"a58f0983-d67d-47e6-97e7-c02aec9ec269","type":"language"}}}},{"id":"858748dd-3c87-4db0-9377-e87ed3310868","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"language":{"data":{"id":"5ddd40dd-1539-4214-a40c-cc7a9e5edf35","type":"language"}}}},{"id":"99769ae4-0024-4a9b-9198-0e554bfb4920","type":"course-language-configurations","attributes":{"alpha-tester-usernames":["Terky"],"release-status":"alpha"},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"language":{"data":{"id":"db982ec4-d37d-44c7-abf1-dc76e121daaf","type":"language"}}}},{"id":"e2c5759b-4d22-4c31-b235-03dcb5c44d18","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"language":{"data":{"id":"7e07ab8f-2bc0-4b20-bc72-1cd9c7e200ed","type":"language"}}}},{"id":"f127f1d4-e088-4599-b189-48e4bb1d643d","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"language":{"data":{"id":"63d38ef2-f131-4635-aa66-0cf404826f9b","type":"language"}}}},{"id":"c43892d1-75b8-448d-9303-7e084352d657","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"language":{"data":{"id":"16121c66-8a81-452d-8c3a-f9fa221e7936","type":"language"}}}},{"id":"c766a0eb-085e-4664-a258-d43916ee094a","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"language":{"data":{"id":"1dbc76cc-c216-4776-a605-3a5784b801a9","type":"language"}}}},{"id":"deebdb89-cef4-4df9-98d6-5d97403f5303","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"language":{"data":{"id":"eafb6f56-30a3-49d8-90b1-a2e051db26cf","type":"language"}}}},{"id":"4cbbd875-6df7-4f4d-8456-8776c52fc330","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"language":{"data":{"id":"8ee02441-697a-4e6d-8015-44e472b0c1b8","type":"language"}}}},{"id":"263da372-87ec-4622-8670-e48f6ddc974f","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"language":{"data":{"id":"c9b581c8-6977-4f1b-9c8b-e1ee5fd7a10f","type":"language"}}}},{"id":"55d8a174-8c9d-4da2-85f8-d06e20c6dc1c","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"9f231ffb-df5a-404a-9397-908a5caf41de","type":"course"}},"language":{"data":{"id":"3ee6502c-281b-480f-a4bf-4a3efd209689","type":"language"}}}},{"id":"4f0a654e-9049-4370-a59f-59fad8723119","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension, you'll add support for [backreferences][1] to your Grep implementation.\n\nAlong the way, you'll learn about how capture groups and backreferences work.\n[1]: https://learn.microsoft.com/en-us/dotnet/standard/base-types/backreference-constructs-in-regular-expressions#numbered-backreferences\n","name":"Backreferences","position":1,"slug":"backreferences"},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}}}},{"id":"aef8cfc2-3b69-4465-838d-ed35c77899e4","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":null,"go":305,"cpp":276,"nim":null,"php":2,"zig":null,"dart":null,"java":13,"mojo":null,"odin":null,"ruby":1,"rust":609,"gleam":44,"ocaml":null,"scala":null,"swift":null,"csharp":87,"elixir":null,"fsharp":null,"kotlin":35,"python":504,"racket":null,"clojure":null,"crystal":null,"haskell":52,"reasonml":null,"commonlisp":null,"javascript":146,"typescript":102},"concept-slugs":[],"description-markdown-template":"In this stage, we'll implement support for the `\\w`\n[character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes).\n\n`\\w` matches any alphanumeric character (`a-z`, `A-Z`, `0-9`, `_`).\n\n**Example:** `\\w` should match \"foo101\", but not \"$!?\".\n\nYour program will be executed like this:\n\n```bash\n$ echo -n \"alpha-num3ric\" | ./your_program.sh -E \"\\w\"\n```\n\nYou program must exit with 0 if an alphanumeric character is found in the string, and 1 if not.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}","difficulty":"very_easy","is-paid":true,"marketing-markdown":"In this stage, we'll implement support for the `\\w`\n[character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes).\n\n`\\w` matches any alphanumeric character (`a-z`, `A-Z`, `0-9`, `_`).\n\n**Example:**\n\n`\\w` should match \"foo101\", but not \"$!?\".","name":"Match alphanumeric characters","position":3,"position-within-course":3,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"mr9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"a731c89b-fd0e-441b-bfbd-b53ceebf2257","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":96,"cpp":73,"nim":null,"php":null,"zig":null,"dart":null,"java":3,"mojo":null,"odin":null,"ruby":null,"rust":172,"gleam":7,"ocaml":null,"scala":null,"swift":null,"csharp":21,"elixir":null,"fsharp":null,"kotlin":6,"python":139,"racket":null,"clojure":null,"crystal":null,"haskell":12,"reasonml":null,"commonlisp":null,"javascript":21,"typescript":17},"concept-slugs":[],"description-markdown-template":"In this stage, we'll add support for the `|` keyword, which allows combining multiple patterns in an either/or fashion.\n\n**Example**: `(cat|dog)` should match \"dog\" and \"cat\", but not \"apple\".\n\nYour program will be executed like this:\n\n```bash\n$ echo -n \"cat\" | ./your_program.sh -E \"(cat|dog)\"\n```\n\nYou program must exit with 0 if the input matches the given pattern, and 1 if not.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, we'll add support for the `|` keyword, which allows combining multiple patterns in an either/or fashion.\n\n**Example**:\n\n- `(cat|dog)` should match \"dog\" and \"cat\", but not \"apple\".","name":"Alternation","position":12,"position-within-course":12,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"zm7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"bf84258c-f1f2-411a-8a98-0024cb24c76f","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{"c":null,"go":285,"cpp":247,"nim":null,"php":2,"zig":null,"dart":null,"java":13,"mojo":null,"odin":null,"ruby":1,"rust":517,"gleam":33,"ocaml":null,"scala":null,"swift":null,"csharp":66,"elixir":null,"fsharp":null,"kotlin":33,"python":448,"racket":null,"clojure":null,"crystal":null,"haskell":33,"reasonml":null,"commonlisp":null,"javascript":123,"typescript":81},"concept-slugs":[],"description-markdown-template":"In this stage, we'll add support for [positive character groups](https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#positive-character-group--).\n\nPositive character groups match any character that is present within a pair of square brackets.\n\n**Example:** `[abc]` should match \"apple\", but not \"dog\".\n\nYour program will be executed like this:\n\n```bash\n$ echo -n \"apple\" | ./your_program.sh -E \"[abc]\"\n```\n\nYou program must exit with 0 if an any of the characters are found in the string, and 1 if not.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, we'll add support for [positive character groups](https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#positive-character-group--).\n\nPositive character groups match any character that is present within a pair of square brackets.\n\n**Example:**\n\n`[abc]` should match \"apple\", but not \"dog\".","name":"Positive Character Groups","position":4,"position-within-course":4,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"tl6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"09580fee-1e2b-400e-840b-15bb9ed790eb","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{},"concept-slugs":[],"description-markdown-template":"In this stage, we'll handle the simplest regex possible: a single character.\n\n**Example:** `a` should match \"apple\", but not \"dog\".\n\nYour program will be executed like this:\n\n```bash\n$ echo -n \"apple\" | ./your_program.sh -E \"a\"\n```\n\nThe `-E` flag instructs `grep` to interprets patterns as extended regular expressions (with support\nfor metacharacters like `+`, `?` etc.). We'll use this flag in all stages.\n\nYou program must [exit](https://en.wikipedia.org/wiki/Exit_status) with 0 if the character is found, and 1 if not.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}","difficulty":"very_easy","is-paid":false,"marketing-markdown":"In this stage, we'll handle the simplest regex possible: a single character.\n\n**Example:**\n\n`a` should match \"apple\", but not \"dog\".","name":"Match a literal character","position":1,"position-within-course":1,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"cq2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"15492e21-e35b-405d-a5b0-c4c029f00b14","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{"c":null,"go":165,"cpp":123,"nim":null,"php":1,"zig":null,"dart":null,"java":8,"mojo":null,"odin":null,"ruby":null,"rust":285,"gleam":15,"ocaml":null,"scala":null,"swift":null,"csharp":37,"elixir":null,"fsharp":null,"kotlin":12,"python":226,"racket":null,"clojure":null,"crystal":null,"haskell":20,"reasonml":null,"commonlisp":null,"javascript":54,"typescript":36},"concept-slugs":[],"description-markdown-template":"In this stage, we'll add support for patterns that combine the character classes we've seen so far.\n\nThis is where your regex matcher will start to _feel_ useful.\n\nKeep in mind that this stage is harder than the previous ones. You'll likely need to rework your\nimplementation to process user input character-by-character instead of the whole line at once.\n\nWe recommend taking a look at the example code in [\"A Regular Expression Matcher\"](https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html)\nby Rob Pike to guide your implementation.\n\n**Examples:**\n\n- `\\d apple` should match \"1 apple\", but not \"1 orange\".\n- `\\d\\d\\d apple` should match \"100 apples\", but not \"1 apple\".\n- `\\d \\w\\w\\ws` should match \"3 dogs\" and \"4 cats\" but not \"1 dog\" (because the \"s\" is not present at the end).\n\nYour program will be executed like this:\n\n```bash\n$ echo -n \"1 apple\" | ./your_program.sh -E \"\\d apple\"\n```\n\nYou program must exit with 0 if the pattern matches the input, and 1 if not.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, we'll support patterns that combine the character classes we've seen so far.\n\n**Examples:**\n\n- `\\d apple` should match \"1 apple\", but not \"1 orange\".\n- `\\d\\d\\d apple` should match \"100 apples\", but not \"1 apple\".\n- `\\d \\w\\w\\ws` should match \"3 dogs\" and \"4 cats\" but not \"1 dog\" (because the \"s\" is not present at the end).\n\nThis stage is significantly harder than the previous ones. You'll likely need to rework your\nimplementation to process user input character-by-character instead of the whole line at once.","name":"Combining Character Classes","position":6,"position-within-course":6,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"sh9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"58c7438c-0409-4fe0-9427-78f95a07a999","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":145,"cpp":108,"nim":null,"php":1,"zig":null,"dart":null,"java":6,"mojo":null,"odin":null,"ruby":null,"rust":272,"gleam":13,"ocaml":null,"scala":null,"swift":null,"csharp":32,"elixir":null,"fsharp":null,"kotlin":8,"python":206,"racket":null,"clojure":null,"crystal":null,"haskell":18,"reasonml":null,"commonlisp":null,"javascript":27,"typescript":25},"concept-slugs":[],"description-markdown-template":"In this stage, we'll add support for `^`, the [Start of String or Line anchor](https://docs.microsoft.com/en-us/dotnet/standard/base-types/anchors-in-regular-expressions#start-of-string-or-line-).\n\n`^` doesn't match a character, it matches the start of a line.\n\n**Example:** `^log` should match \"log\", but not \"slog\".\n\nYour program will be executed like this:\n\n```bash\n$ echo -n \"log\" | ./your_program.sh -E \"^log\"\n```\n\nYou program must exit with 0 if the input starts with the given pattern, and 1 if not.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, we'll add support for `^`, the [Start of String or Line anchor](https://docs.microsoft.com/en-us/dotnet/standard/base-types/anchors-in-regular-expressions#start-of-string-or-line-).\n\n`^` doesn't match a character, it matches the start of a line.\n\n**Example:**\n\n`^log` should match \"log\", but not \"slog\".","name":"Start of string anchor","position":7,"position-within-course":7,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"rr8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"cd5368fb-eadc-4647-a5c6-f6ca4a619054","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":108,"cpp":83,"nim":null,"php":null,"zig":null,"dart":null,"java":5,"mojo":null,"odin":null,"ruby":null,"rust":196,"gleam":5,"ocaml":null,"scala":null,"swift":null,"csharp":24,"elixir":null,"fsharp":null,"kotlin":6,"python":148,"racket":null,"clojure":null,"crystal":null,"haskell":11,"reasonml":null,"commonlisp":null,"javascript":25,"typescript":22},"concept-slugs":[],"description-markdown-template":"In this stage, we'll add support for `?`, the [zero or one](https://docs.microsoft.com/en-us/dotnet/standard/base-types/quantifiers-in-regular-expressions#match-one-or-more-times-) quantifier (also known as the \"optional\" quantifier).\n\n**Example**: `dogs?` should match \"dogs\" and \"dog\", but not \"cat\".\n\nYour program will be executed like this:\n\n```bash\n$ echo -n \"dogs\" | ./your_program.sh -E \"dogs?\"\n```\n\nYou program must exit with 0 if the input matches the given pattern, and 1 if not.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, we'll add support for `?`, the [zero or one](https://docs.microsoft.com/en-us/dotnet/standard/base-types/quantifiers-in-regular-expressions#match-one-or-more-times-) quantifier (also known as the \"optional\" quantifier).\n\n**Example**:\n\n- `dogs?` should match \"dogs\" and \"dog\", but not \"cat\".","name":"Match zero or one times","position":10,"position-within-course":10,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ny8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"6dfccff1-2900-4c5f-8d36-ccd37326646a","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":21,"cpp":15,"nim":null,"php":null,"zig":null,"dart":null,"java":1,"mojo":null,"odin":null,"ruby":null,"rust":50,"gleam":1,"ocaml":null,"scala":null,"swift":null,"csharp":5,"elixir":null,"fsharp":null,"kotlin":2,"python":36,"racket":null,"clojure":null,"crystal":null,"haskell":2,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":2},"concept-slugs":[],"description-markdown-template":"In this stage, we'll add support for nested backreferences. This means that a backreference is part of a larger capturing group, which itself is referenced again.\n\n**Example:** `('(cat) and \\2') is the same as \\1` should match \"'cat and cat' is the same as 'cat and cat'\".\n\nYour program will be executed like this:\n\n```\n$ echo -n \"\u003cinput\u003e\" | ./your_program.sh -E \"\u003cpattern\u003e\"\n```\n\nYour program must exit with 0 if the input matches the given pattern, and 1 if not.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}\n","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll add support for nested backreferences.\n\n**Example:**\n- `('(cat) and \\2') is the same as \\1` should match \"'cat and cat' is the same as 'cat and cat'\".\n","name":"Nested Backreferences","position":15,"position-within-course":15,"position-within-extension":3,"primary-extension-slug":"backreferences","secondary-extension-slugs":[],"slug":"xe5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"7febb4fb-355a-4062-a633-6bc83aafb4f8","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":294,"cpp":223,"nim":null,"php":1,"zig":null,"dart":null,"java":12,"mojo":null,"odin":null,"ruby":1,"rust":472,"gleam":32,"ocaml":null,"scala":null,"swift":null,"csharp":56,"elixir":null,"fsharp":null,"kotlin":26,"python":423,"racket":null,"clojure":null,"crystal":null,"haskell":28,"reasonml":null,"commonlisp":null,"javascript":80,"typescript":60},"concept-slugs":[],"description-markdown-template":"In this stage, we'll add support for [negative character groups](https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#negative-character-group-).\n\nNegative character groups match any character that is not present within a pair of square brackets.\n\n**Example:** `[^abc]` should match \"dog\", but not \"cab\" (since all characters are either \"a\", \"b\" or \"c\").\n\nYour program will be executed like this:\n\n```bash\n$ echo -n \"apple\" | ./your_program.sh -E \"[^abc]\"\n```\n\nYou program must exit with 0 if the input contains characters that aren't part of the negative character group, and 1 if not.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, we'll add support for [negative character groups](https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#negative-character-group-).\n\nNegative character groups match any character that is not present within a pair of square brackets.\n\n**Example:**\n\n`[^abc]` should match \"dog\", but not \"cab\" (since all characters are either \"a\", \"b\" or \"c\").","name":"Negative Character Groups","position":5,"position-within-course":5,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"rk3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"70c81bbf-9755-4ba5-84d5-2bbc334b2169","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":40,"cpp":31,"nim":null,"php":null,"zig":null,"dart":null,"java":1,"mojo":null,"odin":null,"ruby":null,"rust":84,"gleam":3,"ocaml":null,"scala":null,"swift":null,"csharp":6,"elixir":null,"fsharp":null,"kotlin":3,"python":55,"racket":null,"clojure":null,"crystal":null,"haskell":3,"reasonml":null,"commonlisp":null,"javascript":8,"typescript":9},"concept-slugs":[],"description-markdown-template":"In this stage, we'll add support for backreferences.\n\nA backreference lets you reuse a captured group in a regular expression. It is denoted by `\\` followed by a number, indicating the position of the captured group.\n\n**Examples:**\n- `(cat) and \\1` should match \"cat and cat\", but not \"cat and dog\".\n  - `\\1` refers to the first captured group, which is `(cat)`.\n- `(\\w+) and \\1` should match \"cat and cat\" and \"dog and dog\", but not \"cat and dog\".\n  - `\\1` refers to the first captured group, which is `(\\w+)`.\n\nYour program will be executed like this:\n\n```\n$ echo -n \"\u003cinput\u003e\" | ./your_program.sh -E \"\u003cpattern\u003e\"\n```\n\nYour program must exit with 0 if the input matches the given pattern, and 1 if not.\n\n**Note:** You only need to focus on one backreference and one capturing group in this stage. We'll get to handling multiple backreferences in the next stage.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}\n","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll add support for single backreferences. You'll implement support for `\\1`.\n\n**Example:**\n- `(cat) and \\1` should match \"cat and cat\", but not \"cat and dog\".\n","name":"Single Backreference","position":13,"position-within-course":13,"position-within-extension":1,"primary-extension-slug":"backreferences","secondary-extension-slugs":[],"slug":"sb5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"7b9d6359-956b-4c58-ae92-357cc89af38a","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":null,"go":136,"cpp":107,"nim":null,"php":1,"zig":null,"dart":null,"java":5,"mojo":null,"odin":null,"ruby":null,"rust":239,"gleam":13,"ocaml":null,"scala":null,"swift":null,"csharp":33,"elixir":null,"fsharp":null,"kotlin":8,"python":188,"racket":null,"clojure":null,"crystal":null,"haskell":14,"reasonml":null,"commonlisp":null,"javascript":28,"typescript":23},"concept-slugs":[],"description-markdown-template":"In this stage, we'll add support for `$`, the [End of String or Line anchor](https://docs.microsoft.com/en-us/dotnet/standard/base-types/anchors-in-regular-expressions#start-of-string-or-line-).\n\n`$` doesn't match a character, it matches the end of a line.\n\n**Example:** `dog$` should match \"dog\", but not \"dogs\".\n\nYour program will be executed like this:\n\n```bash\n$ echo -n \"dog\" | ./your_program.sh -E \"dog$\"\n```\n\nYou program must exit with 0 if the input matches the given pattern, and 1 if not.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, we'll add support for `$`, the [End of String or Line anchor](https://docs.microsoft.com/en-us/dotnet/standard/base-types/anchors-in-regular-expressions#start-of-string-or-line-).\n\n`$` doesn't match a character, it matches the end of a line.\n\n**Example:**\n\n`dog$` should match \"dog\", but not \"dogs\".","name":"End of string anchor","position":8,"position-within-course":8,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ao7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"1231115b-c640-4926-8f37-55ace724e9aa","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":119,"cpp":96,"nim":null,"php":1,"zig":null,"dart":null,"java":6,"mojo":null,"odin":null,"ruby":null,"rust":216,"gleam":8,"ocaml":null,"scala":null,"swift":null,"csharp":28,"elixir":null,"fsharp":null,"kotlin":8,"python":170,"racket":null,"clojure":null,"crystal":null,"haskell":11,"reasonml":null,"commonlisp":null,"javascript":27,"typescript":22},"concept-slugs":[],"description-markdown-template":"In this stage, we'll add support for `+`, the [one or more](https://docs.microsoft.com/en-us/dotnet/standard/base-types/quantifiers-in-regular-expressions#match-one-or-more-times-) quantifier.\n\n**Example**: `a+` should match \"apple\" and \"SaaS\", but not \"dog\".\n\nYour program will be executed like this:\n\n```bash\n$ echo -n \"caats\" | ./your_program.sh -E \"ca+ts\"\n```\n\nYou program must exit with 0 if the input matches the given pattern, and 1 if not.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, we'll add support for `+`, the [one or more](https://docs.microsoft.com/en-us/dotnet/standard/base-types/quantifiers-in-regular-expressions#match-one-or-more-times-) quantifier.\n\n**Example**:\n\n- `a+` should match \"apple\" and \"SaaS\", but not \"dog\".","name":"Match one or more times","position":9,"position-within-course":9,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"fz7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"d22153ba-934f-4887-ac31-a0063462128c","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":105,"cpp":78,"nim":null,"php":null,"zig":null,"dart":null,"java":3,"mojo":null,"odin":null,"ruby":null,"rust":188,"gleam":7,"ocaml":null,"scala":null,"swift":null,"csharp":24,"elixir":null,"fsharp":null,"kotlin":5,"python":141,"racket":null,"clojure":null,"crystal":null,"haskell":10,"reasonml":null,"commonlisp":null,"javascript":23,"typescript":19},"concept-slugs":[],"description-markdown-template":"In this stage, we'll add support for `.`, which matches any character.\n\n**Example**: `d.g` should match \"dog\", but not \"cog\".\n\nYour program will be executed like this:\n\n```bash\n$ echo -n \"dog\" | ./your_program.sh -E \"d.g\"\n```\n\nYou program must exit with 0 if the input matches the given pattern, and 1 if not.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, we'll add support for `.`, which matches any character.\n\n**Example**:\n\n- `d.g` should match \"dog\", but not \"cog\".","name":"Wildcard","position":11,"position-within-course":11,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"zb3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"f2343fe1-384a-42f1-832e-98478002c327","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":523,"cpp":388,"nim":null,"php":2,"zig":null,"dart":null,"java":37,"mojo":null,"odin":null,"ruby":1,"rust":885,"gleam":88,"ocaml":null,"scala":null,"swift":null,"csharp":114,"elixir":null,"fsharp":null,"kotlin":40,"python":673,"racket":null,"clojure":null,"crystal":null,"haskell":76,"reasonml":null,"commonlisp":null,"javascript":248,"typescript":151},"concept-slugs":[],"description-markdown-template":"In this stage, we'll implement support for the `\\d`\n[character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes).\n\n`\\d` matches any digit.\n\n**Example:** `\\d` should match \"3\", but not \"c\".\n\nYour program will be executed like this:\n\n```bash\n$ echo -n \"apple123\" | ./your_program.sh -E \"\\d\"\n```\n\nYou program must exit with 0 if a digit is found in the string, and 1 if not.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}","difficulty":"very_easy","is-paid":false,"marketing-markdown":"In this stage, we'll implement support for the `\\d`\n[character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes).\n\n`\\d` matches any digit.\n\n**Example:**\n\n`\\d` should match \"1\", but not \"a\".","name":"Match digits","position":2,"position-within-course":2,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"oq2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"fde512cd-02b1-4017-bf9a-cd7cfacb8802","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":20,"cpp":9,"nim":null,"php":null,"zig":null,"dart":null,"java":1,"mojo":null,"odin":null,"ruby":null,"rust":40,"gleam":1,"ocaml":null,"scala":null,"swift":null,"csharp":3,"elixir":null,"fsharp":null,"kotlin":2,"python":37,"racket":null,"clojure":null,"crystal":null,"haskell":1,"reasonml":null,"commonlisp":null,"javascript":5,"typescript":5},"concept-slugs":[],"description-markdown-template":"In this stage, we'll add support for multiple backreferences.\n\nMultiple backreferences allow you to refer to several different captured groups within the same regex pattern.\n\n**Example:** `(\\d+) (\\w+) squares and \\1 \\2 circles` should match \"3 red squares and 3 red circles\" but should not match \"3 red squares and 4 red circles\".\n\nYour program will be executed like this:\n\n```\n$ echo -n \"\u003cinput\u003e\" | ./your_program.sh -E \"\u003cpattern\u003e\"\n```\n\nYour program must exit with 0 if the input matches the given pattern, and 1 if not.\n\n{{#reader_is_bot}}\nDo not use `grep` or the regex utilities available in the standard library. Implement the regex matcher yourself.\n{{/reader_is_bot}}\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for multiple backreferences (`\\1`, `\\2` etc.) in the same pattern.\n\n**Example:**\n- `(\\d+) (\\w+) squares and \\1 \\2 circles` should match \"3 red squares and 3 red circles\" but should not match \"3 red squares and 4 red circles\".\n","name":"Multiple Backreferences","position":14,"position-within-course":14,"position-within-extension":2,"primary-extension-slug":"backreferences","secondary-extension-slugs":[],"slug":"tg1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"119f75c6-9c17-44a8-a75a-b09c3df1fcfb","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"language":{"data":{"id":"3236a60c-e348-4db7-9e6a-e2826b38d991","type":"language"}}}},{"id":"fae6af49-20e8-4cc7-8db5-bf7919c56e30","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"language":{"data":{"id":"a58f0983-d67d-47e6-97e7-c02aec9ec269","type":"language"}}}},{"id":"37f407f7-2d99-4b26-9e7e-4d15beb828c4","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"language":{"data":{"id":"5ddd40dd-1539-4214-a40c-cc7a9e5edf35","type":"language"}}}},{"id":"ebbe72ed-8f3e-4997-a8ad-5edb804d409c","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"language":{"data":{"id":"0c3ceaee-af5c-44d2-ab88-87acc929944b","type":"language"}}}},{"id":"ebb9391b-acbd-459c-a2f0-9b71ed95e996","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"language":{"data":{"id":"6f979cea-d7af-42cf-8e8d-ca44857217c0","type":"language"}}}},{"id":"6e46ef93-5d5b-452e-bb8f-066c2c1ec43b","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"language":{"data":{"id":"4cd22891-8eaa-4f67-8b58-30b0403e59aa","type":"language"}}}},{"id":"9a669146-22c5-4a3d-9a76-c4db5e11736b","type":"course-language-configurations","attributes":{"alpha-tester-usernames":["sreeram-venkitesh"],"release-status":"alpha"},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"language":{"data":{"id":"63d38ef2-f131-4635-aa66-0cf404826f9b","type":"language"}}}},{"id":"545850c0-73e8-42c2-b5c8-702ee113b661","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"language":{"data":{"id":"16121c66-8a81-452d-8c3a-f9fa221e7936","type":"language"}}}},{"id":"c7a8edd6-9357-4e77-be06-c899c50f0de4","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"language":{"data":{"id":"fb72dae0-177a-45cc-a63e-71f9dd3184ac","type":"language"}}}},{"id":"a4b8c351-b3c5-4cd1-9bb5-2a2817c1cbb9","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"language":{"data":{"id":"c9b581c8-6977-4f1b-9c8b-e1ee5fd7a10f","type":"language"}}}},{"id":"502a6fa1-3c77-405e-81d5-54d3c9d42136","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"language":{"data":{"id":"1dbc76cc-c216-4776-a605-3a5784b801a9","type":"language"}}}},{"id":"eb4a6453-7d88-47e6-82c7-c8def0df4a73","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"language":{"data":{"id":"eafb6f56-30a3-49d8-90b1-a2e051db26cf","type":"language"}}}},{"id":"7fce9dd7-793e-49f0-8939-1d1220e1ed39","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"caeb08ee-bcf5-408c-9380-3a845342372e","type":"course"}},"language":{"data":{"id":"3ee6502c-281b-480f-a4bf-4a3efd209689","type":"language"}}}},{"id":"3c3729ed-3dd7-45c9-ac5f-c225241761be","type":"course-extensions","attributes":{"description-markdown":"This extension covers chapters 7 of the book ([Evaluating Expressions](https://craftinginterpreters.com/evaluating-expressions.html)).\n\nIn this extension, you'll add the ability to evaluate expressions.\n","name":"Evaluating Expressions","position":2,"slug":"evaluating-expressions"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}}}},{"id":"4cbdbae6-fa3c-42dd-a7a2-abd5e3d770cd","type":"course-extensions","attributes":{"description-markdown":"This extension covers chapters 9 of the book ([Control Flow](https://craftinginterpreters.com/control-flow.html)).\n\nIn this extension, you'll add the ability to handle control flow statements like `if/else`, `while` \u0026 `for`.\n","name":"Control Flow","position":4,"slug":"control-flow"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}}}},{"id":"1e3b5860-d940-436f-9201-d306ec0085b3","type":"course-extensions","attributes":{"description-markdown":"This extension covers chapters 8 of the book ([Statements \u0026 State](https://craftinginterpreters.com/statements-and-state.html)).\n\nIn this extension, you'll add the ability to add internal state to your interpreter \u0026 produce output.\n","name":"Statements \u0026 State","position":3,"slug":"statements-and-state"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}}}},{"id":"bac5b515-da6d-4173-a650-794b1421fbe7","type":"course-extensions","attributes":{"description-markdown":"This extension covers chapters 10 of the book ([Functions](https://craftinginterpreters.com/functions.html)).\n\nIn this extension, you'll add the ability to handle lox native functions \u0026 user-defined functions.\n","name":"Functions","position":5,"slug":"functions"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}}}},{"id":"be3ed61b-b800-4615-9408-91d6cf60bb85","type":"course-extensions","attributes":{"description-markdown":"This extension covers chapters 5 \u0026 6 of the book ([Representing Code](https://craftinginterpreters.com/representing-code.html) \u0026 [Parsing Expressions](https://craftinginterpreters.com/parsing-expressions.html)).\n\nIn this extension, you'll add the ability to parse expressions.\n","name":"Parsing Expressions","position":1,"slug":"parsing-expressions"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}}}},{"id":"35aed5f1-4cf6-48dc-921b-3ac4bfec4b67","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":6,"go":41,"cpp":6,"nim":null,"php":null,"zig":12,"dart":null,"java":6,"mojo":null,"odin":null,"ruby":null,"rust":131,"gleam":2,"ocaml":6,"scala":null,"swift":null,"csharp":6,"elixir":null,"fsharp":null,"kotlin":3,"python":54,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":9,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for evaluating relational operators `\u003e`, `\u003c`, `\u003e=` \u0026 `\u003c=`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 7.2.5: Evaluating binary operators](https://craftinginterpreters.com/evaluating-expressions.html#evaluating-binary-operators).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain expressions with the relational operators `\u003e`, `\u003c`, `\u003e=` \u0026 `\u003c=`.\n\nFor example, if `test.lox` contains the following:\n\n```\n10 \u003e 5\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh evaluate test.lox\ntrue\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\n| Input | Expected output |\n| :---: | :-------------: |\n| `57 \u003e -65` | `true` |\n| `11 \u003e= 11` | `true` |\n| `(54 - 67) \u003e= -(114 / 57 + 11)` | `true` |\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/evaluate.lox)\n- In this stage, you can assume we will not test for error cases. Runtime errors will be introduced in later stages. For now, all relational operations will involve only two numbers.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for evaluating relational operators `\u003e`, `\u003c`, `\u003e=` \u0026 `\u003c=`.","name":"Relational Operators","position":33,"position-within-course":33,"position-within-extension":8,"primary-extension-slug":"evaluating-expressions","secondary-extension-slugs":[],"slug":"et4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"c7ed737c-ca5d-4219-acfe-673f7cf209a5","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":22,"go":126,"cpp":31,"nim":null,"php":null,"zig":32,"dart":null,"java":32,"mojo":null,"odin":null,"ruby":null,"rust":391,"gleam":15,"ocaml":21,"scala":null,"swift":null,"csharp":17,"elixir":null,"fsharp":null,"kotlin":24,"python":172,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":27,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage you'll implement support for the `parse` command and handle parsing `true`, `false`, and `nil` literals.\n\n### Book reference\n\nBefore starting this stage, make sure you've read the [Representing Code](https://craftinginterpreters.com/representing-code.html) chapter (chapter 5). The\ncode covered in that chapter (`AstPrinter`) will be required to generate the output tested in this stage.\n\nThe code for this stage is implemented in [Section 6.2: Recursive Descent Parsing](https://craftinginterpreters.com/parsing-expressions.html#recursive-descent-parsing).\n\n### The `parse` command\n\nIn the previous stages, the tester used the `tokenize` command to test your scanner implementation. In this extension, the tester will need to test\nyour parser implementation, so it'll use a different command instead: `parse`.\n\nThe `parse` command accepts a path to a file (`test.lox` for example) and prints out the AST representation of the file to stdout.\n\nFor example, if `test.lox` contains the following:\n\n```\n2 + 3\n```\n\nThe `parse` command will return the following:\n\n```\n$ ./your_program.sh parse test.lox\n(+ 2.0 3.0)\n```\n\nThis output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/parse.lox).\n\nFor the same file, here's what the output from `tokenize` would've been:\n\n```\n$ ./your_program.sh tokenize test.lox\nNUMBER 2 2.0\nPLUS + null\nNUMBER 3 3.0\nEOF  null\n```\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain the boolean values `true` \u0026 `false`, and the `nil` literal.\n\nFor example, if `test.lox` contains the following:\n\n```\ntrue\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh parse test.lox\ntrue\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/parse.lox)\n\u003c!-- TODO: Clarify how `nil` must be printed: `nil`/`null`? --\u003e","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for parsing boolean values and the nil literal.","name":"Booleans \u0026 Nil","position":16,"position-within-course":16,"position-within-extension":1,"primary-extension-slug":"parsing-expressions","secondary-extension-slugs":[],"slug":"sc2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"b2f3b4c8-4b1e-4bfe-b468-92eeb33fac4f","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":3,"cpp":null,"nim":null,"php":null,"zig":null,"dart":null,"java":1,"mojo":null,"odin":null,"ruby":null,"rust":4,"gleam":1,"ocaml":null,"scala":null,"swift":null,"csharp":null,"elixir":null,"fsharp":null,"kotlin":1,"python":1,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":null,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for closures in your lox interpreter.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 10.6: Local functions \u0026 Closures](https://craftinginterpreters.com/functions.html#local-functions-and-closures).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with closures.\n\nFor example, if `test.lox` contains the following\n\n```\nfun makeCounter() {\n  var i = 0;\n  fun count() {\n    i = i + 1;\n    print i;\n  }\n\n  return count;\n}\n\nvar counter = makeCounter();\ncounter();\ncounter();\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\n1\n2\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nfun makeCounter() {\n  var i = 0;\n  fun count() {\n    i = i + 1;\n    print i;\n  }\n\n  return count;\n}\n\nvar counter = makeCounter();\ncounter();\ncounter();\n```\n\nExpected Output:\n\n```\n1\n2\n```\n\nTest Case 2:\n\nInput:\n\n```\n{\n  var threshold = 50;\n\n  fun isEven(n) {\n    if (n == 0) return true;\n    if (n \u003e threshold) return false;\n    return isOdd(n - 1);\n  }\n\n  fun isOdd(n) {\n    if (n == 0) return false;\n    if (n \u003e threshold) return false;\n    return isEven(n - 1);\n  }\n\n  print isEven(61);\n}\n```\n\nExpected Output:\n\n```\nfalse\n```\n\nTest Case 3:\n\nInput:\n\n```\nfun makeLogger(prefix) {\n  var logCount = 0;\n\n  fun log(message) {\n    logCount = logCount + 1;\n    print prefix + \": \" + message;\n\n    if (logCount \u003e 6) {\n      print prefix + \": Too many log lines!\";\n      logCount = 0;\n    }\n  }\n\n  return log;\n}\n\nvar debugLog = makeLogger(\"debug\");\nvar errorLog = makeLogger(\"error\");\n\ndebugLog(\"Starting\");\ndebugLog(\"Processing\");\ndebugLog(\"Finishing\");\ndebugLog(\"Extra line\");\n\nerrorLog(\"Failed!\");\nerrorLog(\"Retrying...\");\n```\n\nExpected Output:\n\n```\ndebug: Starting\ndebug: Processing\ndebug: Finishing\ndebug: Extra line\nerror: Failed!\nerror: Retrying...\n```\n\nTest Case 4:\n\nInput:\n\n```\nfun makeAccumulator(label) {\n  var sum = 0;\n  var count = 0;\n\n  fun accumulate(value) {\n    sum = sum + value;\n    count = count + 1;\n\n    print label;\n    print count;\n    print sum;\n    print sum;\n\n    if (count \u003e 3) {\n      print \"reset\";\n      sum = 0;\n      count = 0;\n    }\n\n    return sum;\n  }\n\n  return accumulate;\n}\n\nvar acc1 = makeAccumulator(\"First:\");\nvar acc2 = makeAccumulator(\"Second:\");\n\nacc1(2);\nacc1(6);\nacc1(3);\nacc1(4);\n\nacc2(6);\nacc2(4);\n```\n\nExpected Output:\n\n```\nFirst:\n1\n2\n2\nFirst:\n2\n8\n8\nFirst:\n3\n11\n11\nFirst:\n4\n15\n15\nreset\nSecond:\n1\n6\n6\nSecond:\n2\n10\n10\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/closure/open_closure_in_function.lox)","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll add support for closures to your lox interpreter.","name":"Closures","position":66,"position-within-course":66,"position-within-extension":9,"primary-extension-slug":"functions","secondary-extension-slugs":[],"slug":"gg6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"744d6391-37fa-465d-82d9-54b45995aa97","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":1,"cpp":1,"nim":null,"php":null,"zig":null,"dart":null,"java":2,"mojo":null,"odin":null,"ruby":null,"rust":16,"gleam":1,"ocaml":1,"scala":null,"swift":null,"csharp":null,"elixir":null,"fsharp":null,"kotlin":null,"python":3,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":null,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for global and local scope in your lox interpreter.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 10.6: Local functions \u0026 Closures](https://craftinginterpreters.com/functions.html#local-functions-and-closures).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with global and local scope.\n\nFor example, if `test.lox` contains the following\n\n```\nvar a = 20;\n{\n  var a = 30;\n  print a;\n}\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\n30\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nvar a = 20;\n{\n  print a;\n  var a = 42;\n  print a;\n}\nprint a;\n```\n\nExpected Output:\n\n```\n20\n42\n20\n```\n\nTest Case 2:\n\nInput:\n\n```\nvar count = 3;\n\nfun tick() {\n  if (count \u003e 0) {\n    print count;\n    count = count - 1;\n    return false;\n  }\n  print \"Blast off!\";\n  return true;\n}\n\nwhile (!tick()) {}\n```\n\nExpected Output:\n\n```\n3\n2\n1\nBlast off!\n```\n\nTest Case 3:\n\nInput:\n\n```\nvar counter = 99;\n{\n  counter = counter + 5;\n  {\n    counter = counter + 5;\n    print counter;\n  }\n}\nprint counter;\n{\n  var counter = 99;\n  print counter;\n}\nprint counter;\n```\n\nExpected Output:\n\n```\n109\n109\n99\n109\n```\n\nTest Case 4:\n\nInput:\n\n```\nvar x = 1;\nvar y = 2;\n\nfun printBoth() {\n  if (x \u003c y) {\n    print \"x is less than y:\";\n    print x;\n    print y;\n  } else {\n    print \"x is not less than y:\";\n    print x;\n    print y;\n  }\n}\n\n{\n  var x = 10;\n  {\n    var y = 20;\n\n    var i = 0;\n    while (i \u003c 3) {\n      x = x + 1;\n      y = y - 1;\n      print \"Local x: \";\n      print x;\n      print \"Local y: \";\n      print y;\n      i = i + 1;\n    }\n\n    if (x \u003e y) {\n      print \"Local x \u003e y\";\n    }\n\n    printBoth();\n  }\n}\n```\n\nExpected Output:\n\n```\nLocal x:\n11\nLocal y:\n19\nLocal x:\n12\nLocal y:\n18\nLocal x:\n13\nLocal y:\n17\nx is less than y:\n1\n2\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/closure/open_closure_in_function.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for global and local scope to your lox interpreter.","name":"Function scope","position":65,"position-within-course":65,"position-within-extension":8,"primary-extension-slug":"functions","secondary-extension-slugs":[],"slug":"bz4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"40762972-17ae-4998-baaf-d253b45acf51","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":5,"go":33,"cpp":4,"nim":null,"php":null,"zig":10,"dart":null,"java":5,"mojo":null,"odin":null,"ruby":null,"rust":91,"gleam":1,"ocaml":2,"scala":null,"swift":null,"csharp":7,"elixir":null,"fsharp":null,"kotlin":4,"python":60,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":4,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for handling runtime errors while evaluating the binary operators `+` \u0026 `-`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 7.3: Runtime Errors](https://craftinginterpreters.com/evaluating-expressions.html#runtime-errors).\n\n### Tests\n\nThe tester will test your program using a `test.lox` file that contains an expression with the binary operators `+` or `-`. This expression\nwill contain usages of the `+` or `-` operator that should throw a runtime error.\n\nThe binary operators `+` \u0026 `-` will throw a runtime error if the operands are not both numbers or both strings.\n\nFor example, if `test.lox` contains the following:\n\n```\n17 + \"bar\"\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh evaluate test.lox\nOperands must be two numbers or two strings.\n[line 1]\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\n| Input | Expected output |\n| :---: | :-------------: |\n| `\"foo\" + true` | `Operands must be numbers.` |\n| `42 - true` | `Operands must be numbers.` |\n| `true + false` | `Operands must be numbers.` |\n| `\"foo\" - \"bar\"` | `Operands must be numbers. `|\n\nThe tester will assert that the exit code is 70, signifying a runtime error. Note that this is different from the expected exit code for a syntax error, which is 65.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/evaluate.lox)\n- Error messages should be printed to `stderr`, not `stdout`.\n- The tester won't check the exact error message in this stage, it will only check that the program exits with code 70.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for handling runtime errors while evaluating the binary operators `+` \u0026 `-`.","name":"Runtime Errors: Binary Operators (2/2)","position":37,"position-within-course":37,"position-within-extension":12,"primary-extension-slug":"evaluating-expressions","secondary-extension-slugs":[],"slug":"cq1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"6a821bc0-e0d7-46ac-8845-aff582c16a05","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{},"concept-slugs":[],"description-markdown-template":"Before starting this stage, make sure you've read the \"Welcome\" section of the book that contains these chapters:\n\n- [Introduction](https://craftinginterpreters.com/introduction.html) (chapter 1)\n- [A Map of the Territory](https://craftinginterpreters.com/a-map-of-the-territory.html) (chapter 2)\n- [The Lox Language](https://craftinginterpreters.com/the-lox-language.html) (chapter 3)\n\nThese chapters don't involve writing code, so they won't be covered in this challenge. This challenge will start\nfrom chapter 4, [Scanning](https://craftinginterpreters.com/scanning.html).\n\n---\n\nIn this stage, you'll implement basic support for the `tokenize` command.\n\n### The `tokenize` command\n\nThe `tokenize` command tokenizes a Lox program and prints the tokens to stdout. We'll use this for testing\nall stages in the [Scanning](https://craftinginterpreters.com/scanning.html) chapter.\n\nIf there's a file named `test.lox` with the following contents:\n\n```\nvar language = \"lox\";\n```\n\nThe `tokenize` command will return the following:\n\n```\n$ ./your_program.sh tokenize test.lox\nVAR var null\nIDENTIFIER language null\nEQUAL = null\nSTRING \"lox\" lox\nSEMICOLON ; null\nEOF  null\n```\n\nThis output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning).\n\nEach line corresponds to a token in the file (Image from [Section 4.2: Lexemes \u0026 Tokens](https://craftinginterpreters.com/scanning.html#lexemes-and-tokens)):\n\n![img](https://craftinginterpreters.com/image/scanning/lexemes.png)\n\nThis is the format for each line:\n\n```\n\u003ctoken_type\u003e \u003clexeme\u003e \u003cliteral\u003e\n```\n\n- `\u003ctoken_type\u003e`: The type of the token.\n  - Examples: `VAR`, `IDENTIFIER`, `STRING`, `EOF` etc.\n- `\u003clexeme\u003e`: The actual sequence of characters that formed the token.\n  - Examples: `var`, `breakfast`, `\"bagels\"` etc.\n  - For an `EOF` token, the lexeme is an empty string.\n- `\u003cliteral\u003e`: The literal value of the token.\n  - For most tokens this is `null`.\n  - For `STRING`/`NUMBER` tokens, it holds the value of the string/number.\n\nThe `EOF` token is a special token that represents the end of the file. All calls to `tokenize` will include an `EOF` token at the end.\n\n### Tests\n\nThe tester will write an empty file to `test.lox`. It'll then run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nEOF  null\n```\n\nSince the file is empty, only one token is expected in the output: `EOF`. The tester will verify that `EOF\u003cspace\u003e\u003cspace\u003enull` is printed to stdout.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning)\n- There are two spaces between `EOF` and `null`. This is because the `\u003clexeme\u003e` part is an empty string for the `EOF` token.","difficulty":"very_easy","is-paid":false,"marketing-markdown":"In this stage, you'll implement basic support for the `tokenize` command which we'll use in all stages that are part of the [Scanning](https://craftinginterpreters.com/scanning.html) chapter.","name":"Scanning: Empty file","position":1,"position-within-course":1,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ry8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"4b1a33f4-0b34-43a5-8d7d-1ad632513729","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":4,"go":34,"cpp":3,"nim":null,"php":null,"zig":8,"dart":null,"java":5,"mojo":null,"odin":null,"ruby":null,"rust":129,"gleam":4,"ocaml":7,"scala":null,"swift":null,"csharp":7,"elixir":null,"fsharp":null,"kotlin":4,"python":51,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":6,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for evaluating expressions inside parentheses.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 7.2.2: Evaluating parentheses](https://craftinginterpreters.com/evaluating-expressions.html#evaluating-parentheses).\n\n### Tests\n\nThe tester will test your program using a `test.lox` file that contains an expression with parentheses.\n\nFor example, if `test.lox` contains the following:\n\n```\n(\"hello world!\")\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh evaluate test.lox\nhello world!\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\n| Input | Expected output |\n| :---: | :-------------: |\n| `(\"hello world!\")` | `hello world!` |\n| `(true)` | `true` |\n| `(10.40)` | `10.4` |\n| `((false))` | `false` |\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/evaluate.lox)\n- String literals \u0026 number literals must be formatted using the same rules as the previous stage.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for evaluating expressions inside parentheses.","name":"Parentheses","position":28,"position-within-course":28,"position-within-extension":3,"primary-extension-slug":"evaluating-expressions","secondary-extension-slugs":[],"slug":"oq9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"e1502ca2-784f-4804-9478-3b2c293cd2ca","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":6,"go":27,"cpp":6,"nim":null,"php":null,"zig":9,"dart":null,"java":4,"mojo":null,"odin":null,"ruby":null,"rust":103,"gleam":2,"ocaml":6,"scala":null,"swift":null,"csharp":8,"elixir":null,"fsharp":null,"kotlin":2,"python":25,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":1,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for scopes in your interpreter. Scopes are created by blocks, and they are used to group variables together. We will test variables in local scopes, nested scopes, shadowing of variables, and accessing variables outside of the scope where they are defined.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 8.5: Scope](https://craftinginterpreters.com/statements-and-state.html#scope).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain the assignment operation.\n\nFor example, if `test.lox` contains the following\n\n```\n{\n    var world = \"before\";\n    {\n        var world = \"after\";\n        print world;\n    }\n    print world;\n}\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\nafter\nbefore\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nvar baz = (91 * 16) - 61;\n{\n    var world = \"quz\" + \"89\";\n    print world;\n}\nprint baz;\n```\n\nExpected Output:\n\n```\nquz89\n1395\n```\n\nTest Case 2:\n\nInput:\n\n```\n{\n    var quz = \"before\";\n    {\n        var quz = \"after\";\n        print quz;\n    }\n    print quz;\n}\n```\n\nExpected Output:\n\n```\nafter\nbefore\n```\n\nTest Case 3:\n\nInput:\n\n```\nvar bar = \"global bar\";\nvar world = \"global world\";\nvar hello = \"global hello\";\n{\n  var bar = \"outer bar\";\n  var world = \"outer world\";\n  {\n    var bar = \"inner bar\";\n    print bar;\n    print world;\n    print hello;\n  }\n  print bar;\n  print world;\n  print hello;\n}\nprint bar;\nprint world;\nprint hello;\n```\n\nExpected Output:\n\n```\ninner bar\nouter world\nglobal hello\nouter bar\nouter world\nglobal hello\nglobal bar\nglobal world\nglobal hello\n```\n\nTest Case 4:\n\nInput:\n\n```\n{\n  var hello = \"outer hello\";\n  {\n    var hello = \"inner hello\";\n    print hello;\n  }\n  print hello;\n}\nprint hello;\n```\n\nExpected Output:\n\n```\ninner hello\nouter hello\nUndefined variable 'hello'.\n[line 9]\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0. Accessing a variable outside of its scope should throw a runtime error, the exit code in that case should be 70.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/string/literals.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for scopes in your interpreter.","name":"Scopes","position":48,"position-within-course":48,"position-within-extension":10,"primary-extension-slug":"statements-and-state","secondary-extension-slugs":[],"slug":"fb4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"6cab1a7d-77e4-4039-b320-e55407e00bc8","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":8,"go":31,"cpp":10,"nim":null,"php":null,"zig":7,"dart":null,"java":15,"mojo":null,"odin":null,"ruby":null,"rust":111,"gleam":2,"ocaml":6,"scala":null,"swift":null,"csharp":12,"elixir":null,"fsharp":null,"kotlin":2,"python":35,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":4,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for the `if` statement in your interpreter. The `if` statement is used to conditionally execute statements based on a boolean condition.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 9.2: Conditional execution](https://craftinginterpreters.com/control-flow.html#conditional-execution).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with `if` statements.\n\nFor example, if `test.lox` contains the following\n\n```\nif (true) print \"good\";\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\ngood\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nif (true) print \"bar\";\n```\n\nExpected Output:\n\n```\nbar\n```\n\nTest Case 2:\n\nInput:\n\n```\nif (true) {\n  print \"block body\";\n}\n```\n\nExpected Output:\n\n```\nblock body\n```\n\nTest Case 3:\n\nInput:\n\n```\nvar a = false;\nif (a = true) {\n  print (a == true);\n}\n```\n\nExpected Output:\n\n```\ntrue\n```\n\nTest Case 4:\n\nInput:\n\n```\nvar stage = \"unknown\";\nvar age = 50;\nif (age \u003c 18) { stage = \"child\"; }\nif (age \u003e= 18) { stage = \"adult\"; }\nprint stage;\n\nvar isAdult = age \u003e= 18;\nif (isAdult) { print \"eligible for voting: true\"; }\nif (!isAdult) { print \"eligible for voting: false\"; }\n```\n\nExpected Output:\n\n```\nadult\neligible for voting: true\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/if/if.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for the `if` statement in your interpreter.","name":"If statements","position":49,"position-within-course":49,"position-within-extension":1,"primary-extension-slug":"control-flow","secondary-extension-slugs":[],"slug":"ne3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"01a7704c-6368-459c-be9a-54cf31d82078","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":84,"go":436,"cpp":105,"nim":null,"php":2,"zig":81,"dart":null,"java":85,"mojo":null,"odin":null,"ruby":null,"rust":913,"gleam":51,"ocaml":44,"scala":null,"swift":null,"csharp":39,"elixir":null,"fsharp":null,"kotlin":46,"python":637,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":140,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for scanning other single-character tokens, namely `,`, `.`, `-`, `+`, `;` and `*`.\n`/` is not covered here, it's covered in later stages.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 4.5: Recognizing Lexemes](https://craftinginterpreters.com/scanning.html#recognizing-lexemes).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain parentheses, braces combined with all the new single-character tokens.\n\nFor example, if `test.lox` contains the following:\n\n```\n({*.,+*})\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nLEFT_PAREN ( null\nLEFT_BRACE { null\nSTAR * null\nDOT . null\nCOMMA , null\nPLUS + null\nSTAR * null\nRIGHT_BRACE } null\nRIGHT_PAREN ) null\nEOF  null\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning)\n- When scanning for tokens, it's valid to have \"unbalanced\" parentheses or braces. When we get to parsing expressions in later stages, these cases will be highlighted as errors.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for scanning other single-character tokens.","name":"Scanning: Other single-character tokens","position":4,"position-within-course":4,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"xc5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"c8348349-015e-4e3c-99b2-f266dee9bd6c","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":3,"go":18,"cpp":5,"nim":null,"php":null,"zig":7,"dart":null,"java":4,"mojo":null,"odin":null,"ruby":null,"rust":67,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":5,"elixir":null,"fsharp":null,"kotlin":3,"python":31,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":3,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for handling runtime errors while accessing variables that haven't been declared yet.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 8.2: Global Variables](https://craftinginterpreters.com/statements-and-state.html#global-variables).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that access variables that haven't been declared yet.\n\nFor example, if `test.lox` contains the following\n\n```\nprint a;\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\nUndefined variable 'a'.\n[line 1]\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nprint 22;\nprint x;\n```\n\nExpected Output:\n\n```\n22\nUndefined variable 'x'.\n[line 2]\n```\n\nTest Case 2:\n\nInput:\n\n```\nvar baz = 96;\nprint hello;\n```\n\nExpected Output:\n\n```\nUndefined variable 'hello'.\n[line 2]\n```\n\nTest Case 3:\n\nInput:\n\n```\nvar hello = 85;\nvar result = (hello + bar) / world;\nprint result;\n```\n\nExpected Output:\n\n```\nUndefined variable 'bar'.\n[line 2]\n```\n\nTest Case 4:\n\nInput:\n\n```\nvar quz = 20;\nvar world = 51;\nvar hello = 56;\nprint quz + world + he\n```\n\nExpected Output:\n\n```\nUndefined variable 'he'.\n[line 4]\n```\n\nThe tester will assert that the exit code is 70, signifying a runtime error. Note that this is different from the expected exit code for a syntax error, which is 65.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/variable/in_nested_block.lox)\n- Error messages should be printed to `stderr`, not `stdout`.\n- The tester won't check the exact error message in this stage, it will only check that the program exits with code 70.","difficulty":"easy","is-paid":false,"marketing-markdown":"In this stage, you'll add support for declaring variables using the `var` statement.","name":"Variables: Runtime Errors","position":43,"position-within-course":43,"position-within-extension":5,"primary-extension-slug":"statements-and-state","secondary-extension-slugs":[],"slug":"sv7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"850181f4-2fd3-4edb-a733-660aee0689b1","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":2,"go":13,"cpp":2,"nim":null,"php":null,"zig":4,"dart":null,"java":4,"mojo":null,"odin":null,"ruby":null,"rust":38,"gleam":1,"ocaml":2,"scala":null,"swift":null,"csharp":3,"elixir":null,"fsharp":null,"kotlin":2,"python":17,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for the logical AND operator in your interpreter. The logical AND operator combines two conditions and returns the first falsy value. If all values are truthy, it returns the last value.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 9.3: Logical Operators](https://craftinginterpreters.com/control-flow.html#logical-operators).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with the logical AND operator.\n\nFor example, if `test.lox` contains the following\n\n```\nprint false and \"ok\";\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\nfalse\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nif (false and \"bad\") print \"foo\";\nif (nil and \"bad\") print \"foo\";\n\nif (true and \"hello\") print \"hello\";\nif (97 and \"baz\") print \"baz\";\nif (\"baz\" and \"baz\") print \"baz\";\nif (\"\" and \"bar\") print \"bar\";\n```\n\nExpected Output:\n\n```\nhello\nbaz\nbaz\nbar\n```\n\nTest Case 2:\n\nInput:\n\n```\nprint false and 1;\nprint true and 1;\nprint 23 and \"hello\" and false;\n\nprint 23 and true;\nprint 23 and \"hello\" and 23;\n```\n\nExpected Output:\n\n```\nfalse\n1\nfalse\ntrue\n23\n```\n\nTest Case 3:\n\nInput:\n\n```\nvar a = \"quz\";\nvar b = \"quz\";\n(a = true) and (b = false) and (a = \"bad\");\nprint a;\nprint b;\n```\n\nExpected Output:\n\n```\ntrue\nfalse\n```\n\nTest Case 4:\n\nInput:\n\n```\nvar stage = \"unknown\";\nvar age = 14;\nif (age \u003c 18) { stage = \"child\"; }\nif (age \u003e= 18) { stage = \"adult\"; }\nprint stage;\n\nvar isAdult = age \u003e= 18;\nif (isAdult) { print \"eligible for voting: true\"; }\nif (!isAdult) { print \"eligible for voting: false\"; }\n```\n\nExpected Output:\n\n```\nchild\neligible for voting: false\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/logical_operator/and.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for the logical AND operator in your interpreter.","name":"Logical AND operator","position":54,"position-within-course":54,"position-within-extension":6,"primary-extension-slug":"control-flow","secondary-extension-slugs":[],"slug":"jx4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"681d5083-83e8-4141-9821-61d0515e879b","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":6,"go":40,"cpp":6,"nim":null,"php":null,"zig":10,"dart":null,"java":13,"mojo":null,"odin":null,"ruby":null,"rust":140,"gleam":1,"ocaml":9,"scala":null,"swift":null,"csharp":10,"elixir":null,"fsharp":null,"kotlin":6,"python":38,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":5,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for assigning values to variables using the `=` operator. You need to only support variables that have already been declared on the left side of the assignment.\nNote that assignment is right associative, so `a = b = 1` is equivalent to `a = (b = 1)`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 8.4: Assignment](https://craftinginterpreters.com/statements-and-state.html#assignment).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain the assignment operation.\n\nFor example, if `test.lox` contains the following\n\n```\nvar a;\nvar b = 2;\nvar a = b = 1;\nprint a;\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\n1\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nvar quz;\nquz = 1;\nprint quz;\nprint quz = 2;\nprint quz;\n```\n\nExpected Output:\n\n```\n1\n2\n2\n```\n\nTest Case 2:\n\nInput:\n\n```\nvar hello = 93;\nvar bar = 93;\nbar = hello;\nhello = bar;\nprint hello + bar;\n```\n\nExpected Output:\n\n```\n186\n```\n\nTest Case 3:\n\nInput:\n\n```\nvar quz;\nvar hello;\n\nquz = hello = 16 + 34 * 92;\nprint quz;\nprint hello;\n```\n\nExpected Output:\n\n```\n3144\n3144\n```\n\nTest Case 4:\n\nInput:\n\n```\nvar hello = 65;\nvar baz;\nvar quz;\n\nhello = baz = quz = hello * 2;\nprint hello;\nprint baz;\nprint baz;\n```\n\nExpected Output:\n\n```\n130\n130\n130\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/string/literals.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for the assignment operation (=).","name":"Assignment operation","position":46,"position-within-course":46,"position-within-extension":8,"primary-extension-slug":"statements-and-state","secondary-extension-slugs":[],"slug":"pl3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"af56e9bc-7173-448b-a938-a8e6adc3cbc5","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":61,"go":268,"cpp":52,"nim":null,"php":2,"zig":42,"dart":null,"java":54,"mojo":null,"odin":null,"ruby":null,"rust":627,"gleam":25,"ocaml":29,"scala":null,"swift":null,"csharp":27,"elixir":null,"fsharp":null,"kotlin":27,"python":390,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":88,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for scanning negation \u0026 inequality operators.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 4.5.2: Operators](https://craftinginterpreters.com/scanning.html#operators).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain inequality \u0026 negation operators mixed with previously introduced tokens.\n\nFor example, if `test.lox` contains the following:\n\n```\n!!===\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nBANG ! null\nBANG_EQUAL != null\nEQUAL_EQUAL == null\nEOF  null\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning)\n- When scanning for tokens, it's valid to have \"unbalanced\" parentheses or braces. When we get to parsing expressions in later stages, these cases will be highlighted as errors.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for scanning negation \u0026 inequality operators.","name":"Scanning: Negation \u0026 inequality operators","position":7,"position-within-course":7,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"bu3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"73add769-2749-4329-8600-56ded13fa581","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":5,"go":5,"cpp":3,"nim":null,"php":null,"zig":2,"dart":null,"java":1,"mojo":null,"odin":null,"ruby":null,"rust":19,"gleam":2,"ocaml":null,"scala":null,"swift":null,"csharp":1,"elixir":null,"fsharp":null,"kotlin":null,"python":6,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":1,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for detecting and handling syntax errors in user defined functions in your lox interpreter.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 10.3: Function Declarations](https://craftinginterpreters.com/functions.html#function-declarations).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with user defined functions with arguments.\n\nFor example, if `test.lox` contains the following\n\n```\nclock(;\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\n[line 2] Error at ';': Expect expression.\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nprint clock(;\n```\n\nExpected Output:\n\n```\n[line 1] Error at ';': Expect expression.\n```\n\nTest Case 2:\n\nInput:\n\n```\nprint clock)));\n```\n\nExpected Output:\n\n```\n[line 1] Error at ')': Expect ';' after value.\n```\n\nTest Case 3:\n\nInput:\n\n```\nfun f() 74;\nprint f();\n```\n\nExpected Output:\n\n```\n[line 2] Error at '74': Expect '{' before function body.\n```\n\nTest Case 4:\n\nInput:\n\n```\nfun foo(a, b c, d, e, f) {}\nfoo();\n```\n\nExpected Output:\n\n```\n[line 2] Error at 'c': Expect ')' after parameters.\n```\n\nThe tester will assert that the exit code of your program is 65, when there is a compilation error.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/function/body_must_be_block.lox)\n- Error messages should be printed to `stderr`, not `stdout`.\n- The tester won't check the exact error message in this stage, it will only check that the program exits with code 65.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for detecting and handling syntax errors.","name":"Syntax errors","position":61,"position-within-course":61,"position-within-extension":4,"primary-extension-slug":"functions","secondary-extension-slugs":[],"slug":"px4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"7ec79f14-dc3c-49ca-a7c1-5b70a03bbd5e","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":6,"go":13,"cpp":6,"nim":null,"php":null,"zig":3,"dart":null,"java":7,"mojo":null,"odin":null,"ruby":null,"rust":64,"gleam":2,"ocaml":2,"scala":null,"swift":null,"csharp":7,"elixir":null,"fsharp":null,"kotlin":1,"python":21,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":1,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for return statements in functions in your lox interpreter.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 10.5: Return Statements](https://craftinginterpreters.com/functions.html#return-statements).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with return statements in functions.\n\nFor example, if `test.lox` contains the following\n\n```\nfun foo() { return 10; }\nprint foo();\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\n10\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nfun fib(n) {\n  if (n \u003c 2) return n;\n  return fib(n - 2) + fib(n - 1);\n}\n\nvar start = clock();\nprint fib(32) == 2178309;\nprint (clock() - start) \u003c 5; // 5 seconds\n```\n\nExpected Output:\n\n```\ntrue\ntrue\n```\n\nTest Case 2:\n\nInput:\n\n```\nfun f() {\n  if (false) return \"no\"; else return \"ok\";\n}\n\nprint f();\n```\n\nExpected Output:\n\n```\nok\n```\n\nTest Case 3:\n\nInput:\n\n```\nfun f() {\n  while (!true) return \"ok\";\n}\n\nprint f();\n```\n\nExpected Output:\n\n```\nnil\n```\n\nTest Case 4:\n\nInput:\n\n```\nfun f() {\n  return;\n  print \"bad\";\n}\n\nprint f();\n```\n\nExpected Output:\n\n```\nnil\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/function/local_recursion.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for return statements in functions to your lox interpreter.","name":"Return statements","position":62,"position-within-course":62,"position-within-extension":5,"primary-extension-slug":"functions","secondary-extension-slugs":[],"slug":"rd2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"120074d6-1fd8-4275-9f3a-4d08bf53d275","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":7,"go":23,"cpp":5,"nim":null,"php":null,"zig":8,"dart":null,"java":8,"mojo":null,"odin":null,"ruby":null,"rust":90,"gleam":1,"ocaml":5,"scala":null,"swift":null,"csharp":10,"elixir":null,"fsharp":null,"kotlin":3,"python":23,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for the `for` statement in your interpreter. The `for` statement executes a block of code repeatedly using a “initializer” clause, a “condition” clause and an “increment” clause.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 9.5: For Loops](https://craftinginterpreters.com/control-flow.html#for-loops).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with `if` statements.\n\nFor example, if `test.lox` contains the following\n\n```\nfor (var baz = 0; baz \u003c 3;) print baz = baz + 1;\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\n1\n2\n3\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nfor (var baz = 0; baz \u003c 3;) print baz = baz + 1;\n```\n\nExpected Output:\n\n```\n1\n2\n3\n```\n\nTest Case 2:\n\nInput:\n\n```\nfor (var world = 0; world \u003c 3; world = world + 1) {\n  print world;\n}\n```\n\nExpected Output:\n\n```\n0\n1\n2\n```\n\nTest Case 3:\n\nInput:\n\n```\nvar world = 0;\nfor (; world \u003c 2; world = world + 1) print world;\n\nfor (var foo = 0; foo \u003c 2;) {\n  print foo;\n  foo = foo + 1;\n}\n```\n\nExpected Output:\n\n```\n0\n1\n0\n1\n```\n\nTest Case 4:\n\nInput:\n\n```\nvar quz = \"after\";\n{\n  var quz = \"before\";\n\n  for (var quz = 0; quz \u003c 1; quz = quz + 1) {\n    print quz;\n    var quz = -1;\n    print quz;\n  }\n}\n\n{\n  for (var quz = 0; quz \u003e 0; quz = quz + 1) {}\n\n  var quz = \"after\";\n  print quz;\n\n  for (quz = 0; quz \u003c 1; quz = quz + 1) {\n    print quz;\n  }\n}\n```\n\nExpected Output:\n\n```\n0\n-1\nafter\n0\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/for/syntax.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for `for` statements in your interpreter.","name":"For statements","position":56,"position-within-course":56,"position-within-extension":8,"primary-extension-slug":"control-flow","secondary-extension-slugs":[],"slug":"bw6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"d26b12ba-11d1-477a-b2f1-d6653ace7b0c","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":7,"go":22,"cpp":6,"nim":null,"php":null,"zig":7,"dart":null,"java":10,"mojo":null,"odin":null,"ruby":null,"rust":92,"gleam":2,"ocaml":4,"scala":null,"swift":null,"csharp":9,"elixir":null,"fsharp":null,"kotlin":1,"python":23,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":1,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for `while` statements in your interpreter. `while` statements are used to execute a block of code repeatedly while a condition is true.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 9.4: While loops](https://craftinginterpreters.com/control-flow.html#while-loops).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with `while` statements.\n\nFor example, if `test.lox` contains the following\n\n```\nvar foo = 0;\nwhile (foo \u003c 3) print foo = foo + 1;\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\n1\n2\n3\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nvar foo = 0;\nwhile (foo \u003c 3) print foo = foo + 1;\n```\n\nExpected Output:\n\n```\n1\n2\n3\n```\n\nTest Case 2:\n\nInput:\n\n```\nvar quz = 0;\nwhile (quz \u003c 3) {\n  print quz;\n  quz = quz + 1;\n}\n```\n\nExpected Output:\n\n```\n0\n1\n2\n```\n\nTest Case 3:\n\nInput:\n\n```\nwhile (false) {\n  print \"should not print\";\n}\n\nvar product = 1;\nvar i = 1;\n\nwhile (i \u003c= 5) {\n  product = product * i;\n  i = i + 1;\n}\n\nprint \"Product of numbers 1 to 5: \"; print product;\n```\n\nExpected Output:\n\n```\nProduct of numbers 1 to 5:\n120\n```\n\nTest Case 4:\n\nInput:\n\n```\nvar n = 10;\nvar fm = 0;\nvar fn = 1;\nvar index = 0;\n\nwhile (index \u003c n) {\n  print fm;\n  var temp = fm;\n  fm = fn;\n  fn = temp + fn;\n  index = index + 1;\n}\n```\n\nExpected Output:\n\n```\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/while/syntax.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for `while` statements in your interpreter.","name":"While statements","position":55,"position-within-course":55,"position-within-extension":7,"primary-extension-slug":"control-flow","secondary-extension-slugs":[],"slug":"qy3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"757aafff-f07e-4c6c-979f-ad08db25c41f","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":3,"cpp":null,"nim":null,"php":null,"zig":1,"dart":null,"java":1,"mojo":null,"odin":null,"ruby":null,"rust":8,"gleam":2,"ocaml":null,"scala":null,"swift":null,"csharp":2,"elixir":null,"fsharp":null,"kotlin":null,"python":5,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":null,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for the `else-if` statement in your interpreter. The `else-if` statement is used to conditionally execute statements when the `if` condition is false.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 9.2: Conditional execution](https://craftinginterpreters.com/control-flow.html#conditional-execution).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with `if` statements.\n\nFor example, if `test.lox` contains the following\n\n```\nif (false) print \"if branch\"; else if (false) print \"else-if branch\";\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nif (true) print \"if branch\"; else if (false) print \"else-if branch\";\n```\n\nExpected Output:\n\n```\nif branch\n```\n\nTest Case 2:\n\nInput:\n\n```\nif (true) {\n  print \"hello\";\n} else if (true) print \"hello\";\n\nif (true) print \"hello\"; else if (true) {\n  print \"hello\";\n}\n```\n\nExpected Output:\n\n```\nhello\nhello\n```\n\nTest Case 3:\n\nInput:\n\n```\nvar age = 88;\nvar stage = \"unknown\";\nif (age \u003c 18) { stage = \"child\"; }\nelse if (age \u003e= 18) { stage = \"adult\"; }\nelse if (age \u003e= 65) { stage = \"senior\"; }\nelse if (age \u003e= 100) { stage = \"centenarian\"; }\nprint stage;\n```\n\nExpected Output:\n\n```\nadult\n```\n\nTest Case 4:\n\nInput:\n\n```\nvar age = 67;\n\nvar isAdult = age \u003e= 18;\nif (isAdult) { print \"eligible for voting: true\"; }\nelse { print \"eligible for voting: false\"; }\n\nif (age \u003c 16) { print \"eligible for driving: false\"; }\nelse if (age \u003c 18) { print \"eligible for driving: learner's permit\"; }\nelse { print \"eligible for driving: full license\"; }\n\nif (age \u003c 21) { print \"eligible for drinking (US): false\"; }\nelse { print \"eligible for drinking (US): true\"; }\n```\n\nExpected Output:\n\n```\neligible for voting: true\neligible for driving: full license\neligible for drinking (US): true\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/if/else.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for the `else-if` statement in your interpreter.","name":"Else-if statements","position":51,"position-within-course":51,"position-within-extension":3,"primary-extension-slug":"control-flow","secondary-extension-slugs":[],"slug":"fh8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"06d082f2-3f57-4887-9ac7-2e789984ed8d","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":40,"go":161,"cpp":34,"nim":null,"php":2,"zig":25,"dart":null,"java":43,"mojo":null,"odin":null,"ruby":null,"rust":379,"gleam":19,"ocaml":14,"scala":null,"swift":null,"csharp":17,"elixir":null,"fsharp":null,"kotlin":13,"python":215,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":27,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for scanning lexical errors, which span multiple lines.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 4.5.1: Lexical Errors](https://craftinginterpreters.com/scanning.html#lexical-errors).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain lexical errors spanning multiple lines.\n\nFor example, if `test.lox` contains the following:\n\n```\n#\u003c|SPACE|\u003e(\n)\u003c|TAB|\u003e@\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\n[line 1] Error: Unexpected character: #\n[line 2] Error: Unexpected character: @\nLEFT_PAREN ( null\nRIGHT_PAREN ) null\nEOF  null\n```\n\nErrors should be printed to the stderr stream, starting with the `[line N]` prefix. If lexical errors were present,\nyour program must exit with exit code 65.\n\nThe tester will assert that:\n\n- The stderr stream contains one line for each lexical error (if present)\n  - Each line must match the format `[line N] Error: Unexpected character: \u003ccharacter\u003e`\n- The stdout stream contains one line for each valid token (even if other lexical errors are present)\n- Your program exits with exit code 65 if lexical errors are present, and exit code 0 if not\n\nLine numbers should start at 1.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning)\n- Since stdout and stderr are separate streams, the relative order of errors vs. valid tokens doesn't matter. You're free to print\n  errors first, errors last, or errors interleaved with valid tokens.\n- Only lines that start with `[line N]` are considered errors, so you can still print other lines to stderr for debugging purposes.\n- When scanning for tokens, it's valid to have \"unbalanced\" parentheses or braces. When we get to parsing expressions in later stages, these cases will be highlighted as errors.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for scanning multi-line errors.","name":"Scanning: Multi-line errors","position":11,"position-within-course":11,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"tz7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"54fb7e27-0480-42e0-8466-8d3a86e0381b","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":15,"go":81,"cpp":16,"nim":null,"php":null,"zig":21,"dart":null,"java":23,"mojo":null,"odin":null,"ruby":null,"rust":269,"gleam":6,"ocaml":13,"scala":null,"swift":null,"csharp":16,"elixir":null,"fsharp":null,"kotlin":15,"python":112,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":10,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage you'll implement support for the `evaluate` command and handle evaluating the `true`, `false`, and `nil` literals.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 7.2.1: Evaluating Literals](https://craftinginterpreters.com/evaluating-expressions.html#evaluating-literals).\n\n### The `evaluate` command\n\nIn the previous stages, the tester used the `parse` command to test your parser implementation. In this extension, the tester will need to test\nyour evaluator implementation, so it'll use a different command instead: `evaluate`.\n\nThe `evaluate` command accepts a path to a file (`test.lox` for example) and prints out the result of evaluating the file to stdout.\n\nFor example, if `test.lox` contains the following:\n\n```\n2 + 3\n```\n\nThe `evaluate` command will return the following:\n\n```\n$ ./your_program.sh evaluate test.lox\n5\n```\n\nThis output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/evaluate.lox).\n\nFor the same file, here's what the output from `parse` would've been:\n\n```\n$ ./your_program.sh parse test.lox\n(+ 2.0 3.0)\n```\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain the boolean values `true` \u0026 `false`, and the `nil` literal.\n\nFor example, if `test.lox` contains the following:\n\n```\ntrue\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh evaluate test.lox\ntrue\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\n| Input | Expected output |\n| :---: | :-------------: |\n| `true` | `true` |\n| `false` | `false` |\n| `nil` | `nil` |\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/evaluate.lox)\n- For the `nil` literal, the tester will check that the program prints `nil`.","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for evaluating boolean values and the nil literal.","name":"Literals: Booleans \u0026 Nil","position":26,"position-within-course":26,"position-within-extension":1,"primary-extension-slug":"evaluating-expressions","secondary-extension-slugs":[],"slug":"iz6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"7384c95d-a1af-4908-a5c1-63dc0084c5cd","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":null,"go":2,"cpp":null,"nim":null,"php":null,"zig":null,"dart":null,"java":null,"mojo":null,"odin":null,"ruby":null,"rust":6,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":null,"elixir":null,"fsharp":null,"kotlin":null,"python":6,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":null,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for nested `if` statements in your interpreter. Nested `if` statements are `if` statements that are inside the body of another `if` statement.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 9.2: Conditional execution](https://craftinginterpreters.com/control-flow.html#conditional-execution).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with `if` statements.\n\nFor example, if `test.lox` contains the following\n\n```\nif (true) if (true) print \"nested true\";\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\nnested true\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nif (true) if (true) print \"nested true\";\n```\n\nExpected Output:\n\n```\nnested true\n```\n\nTest Case 2:\n\nInput:\n\n```\nif (true) {\n  if (false) print \"quz\"; else print \"quz\";\n}\n```\n\nExpected Output:\n\n```\nquz\n```\n\nTest Case 3:\n\nInput:\n\n```\nvar stage = \"unknown\";\nvar age = 29;\nif (age \u003c 18) {\n    if (age \u003c 13) { stage = \"child\"; }\n    else if (age \u003c 16) { stage = \"young teenager\"; }\n    else { stage = \"teenager\"; }\n}\nelse if (age \u003c 65) {\n    if (age \u003c 30) { stage = \"young adult\"; }\n    else if (age \u003c 50) { stage = \"adult\"; }\n    else { stage = \"middle-aged adult\"; }\n}\nelse { stage = \"senior\"; }\nprint stage;\n\nvar isAdult = age \u003e= 18;\nif (isAdult) {\n    print \"eligible for voting: true\";\n    if (age \u003c 25) {\n        print \"first-time voter: likely\";\n    }\n    else { print \"first-time voter: unlikely\"; }\n}\nelse { print \"eligible for voting: false\"; }\n\nif (age \u003c 16) { print \"eligible for driving: false\"; }\nelse if (age \u003c 18) {\n    print \"eligible for driving: learner's permit\";\n    if (age \u003c 17) { print \"supervised driving required\"; }\n    else { print \"unsupervised driving allowed with restrictions\"; }\n}\nelse { print \"eligible for driving: full license\"; }\n\nif (age \u003c 21) { print \"eligible for drinking (US): false\"; }\nelse {\n    print \"eligible for drinking (US): true\";\n    if (age \u003c 25) { print \"remember: drink responsibly!\"; }\n}\n```\n\nExpected Output:\n\n```\nyoung adult\neligible for voting: true\nfirst-time voter: unlikely\neligible for driving: full license\neligible for drinking (US): true\n```\n\nTest Case 4:\n\nInput:\n\n```\nif (true) if (false) print \"world\"; else print \"baz\";\n```\n\nExpected Output:\n\n```\nbaz\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/if/dangling_else.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for nested `if` statements in your interpreter.","name":"Nested if statements","position":52,"position-within-course":52,"position-within-extension":4,"primary-extension-slug":"control-flow","secondary-extension-slugs":[],"slug":"xj4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"93cab264-dbe3-449c-9be7-d366d58987f7","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":6,"go":46,"cpp":7,"nim":null,"php":null,"zig":13,"dart":null,"java":8,"mojo":null,"odin":null,"ruby":null,"rust":151,"gleam":4,"ocaml":10,"scala":null,"swift":null,"csharp":6,"elixir":null,"fsharp":null,"kotlin":4,"python":48,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":8,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for parsing comparison operators: `\u003e`, `\u003c`, `\u003e=` \u0026 `\u003c=`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 6.2: Recursive Descent Parsing](https://craftinginterpreters.com/parsing-expressions.html#recursive-descent-parsing).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain comparison operators, combined with previously introduced tokens.\n\nFor example, if `test.lox` contains the following:\n\n```\n83 \u003c 99 \u003c 115\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh parse test.lox\n(\u003c (\u003c 83.0 99.0) 115.0)\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/parse.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for parsing comparison operators `\u003e`, `\u003c`, `\u003e=` \u0026 `\u003c=`.","name":"Comparison operators","position":23,"position-within-course":23,"position-within-extension":8,"primary-extension-slug":"parsing-expressions","secondary-extension-slugs":[],"slug":"uh4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"817629a6-3345-46bc-be8b-cbb014e5a2f8","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":5,"go":42,"cpp":6,"nim":null,"php":null,"zig":10,"dart":null,"java":7,"mojo":null,"odin":null,"ruby":null,"rust":128,"gleam":4,"ocaml":7,"scala":null,"swift":null,"csharp":6,"elixir":null,"fsharp":null,"kotlin":3,"python":43,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":6,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for parsing equality operators: `==` \u0026 `!=`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 6.2: Recursive Descent Parsing](https://craftinginterpreters.com/parsing-expressions.html#recursive-descent-parsing).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain comparison operators, combined with previously introduced tokens.\n\nFor example, if `test.lox` contains the following:\n\n```\n\"baz\" == \"baz\"\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh parse test.lox\n(== baz baz)\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/parse.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for parsing equality operators `==` \u0026 `!=`.","name":"Equality operators","position":24,"position-within-course":24,"position-within-extension":9,"primary-extension-slug":"parsing-expressions","secondary-extension-slugs":[],"slug":"ht8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"9368ef25-0c1b-4a30-baec-61a6d36541a1","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":15,"go":60,"cpp":15,"nim":null,"php":null,"zig":23,"dart":null,"java":22,"mojo":null,"odin":null,"ruby":null,"rust":231,"gleam":8,"ocaml":10,"scala":null,"swift":null,"csharp":15,"elixir":null,"fsharp":null,"kotlin":11,"python":100,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":11,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for handling syntax errors in expressions.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 6.3: Syntax Errors](https://craftinginterpreters.com/parsing-expressions.html#syntax-errors).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain syntax errors.\n\nFor example, if `test.lox` contains the following:\n\n```\n(72 +)\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh parse test.lox\n[line 1] Error at ')': Expect expression.\n```\n\nThe tester will assert that the exit code is 65.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/parse.lox)\n- Error messages should be printed to `stderr`, not `stdout`.\n- The tester won't check the exact error message in this stage, it will only check that the program exits with code 65.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for handling syntax errors in expressions.","name":"Syntactic errors","position":25,"position-within-course":25,"position-within-extension":10,"primary-extension-slug":"parsing-expressions","secondary-extension-slugs":[],"slug":"wz8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"b6a920d1-fcb2-4e3d-8035-6c134dccb11d","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":5,"go":40,"cpp":4,"nim":null,"php":null,"zig":12,"dart":null,"java":7,"mojo":null,"odin":null,"ruby":null,"rust":143,"gleam":5,"ocaml":7,"scala":null,"swift":null,"csharp":7,"elixir":null,"fsharp":null,"kotlin":2,"python":62,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":6,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for evaluating binary operators `*` and `/`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 7.2.5: Evaluating binary operators](https://craftinginterpreters.com/evaluating-expressions.html#evaluating-binary-operators).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain expressions with the arithmetic operators `*` and `/`.\n\nFor example, if `test.lox` contains the following:\n\n```\n(18 * 3 / (3 * 6))\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh evaluate test.lox\n3\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\n| Input | Expected output |\n| :---: | :-------------: |\n| `42 / 5` | `8.4` |\n| `18 * 3 / (3 * 6)` | `3` |\n| `(10.40 * 2) / 2` | `10.4` |\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/evaluate.lox)\n- In this stage, you can assume we will not test for error cases. Runtime errors will be introduced in later stages. For now, all arithmetic operations will involve only two numbers.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for evaluating binary operators `*` and `/`.","name":"Arithmetic Operators (1/2)","position":30,"position-within-course":30,"position-within-extension":5,"primary-extension-slug":"evaluating-expressions","secondary-extension-slugs":[],"slug":"bp3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"d8d415fc-1fdd-4498-a6c8-9b931946fc96","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":42,"go":251,"cpp":52,"nim":null,"php":1,"zig":52,"dart":null,"java":54,"mojo":null,"odin":null,"ruby":null,"rust":660,"gleam":26,"ocaml":28,"scala":null,"swift":null,"csharp":26,"elixir":null,"fsharp":null,"kotlin":26,"python":333,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":65,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for scanning number literals.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 4.6.2: Number literals](https://craftinginterpreters.com/scanning.html#number-literals).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain number literals mixed with previously introduced tokens.\n\nFor example, if `test.lox` contains the following:\n\n```\n42\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nNUMBER 42 42.0\nEOF  null\n```\n\nJust like strings, number literals have a \"literal value\" attached. Note that the literal value for an integer is represented as \"42.0\" (with a decimal point). This\nmatches the [book's format](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning/numbers.lox).\n\nYou'll also need to handle numbers with a decimal point, for example if `test.lox` contains the following:\n\n```\n1234.1234\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nNUMBER 1234.1234 1234.1234\nEOF  null\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning/numbers.lox)\n- Although the `\u003cLITERAL\u003e` field for an integer is represented as \"42.0\" (with a decimal point), the `\u003cLEXEME\u003e` field will contain the integer's value without the decimal point since\n  it represents the actual characters that matched the token.\n- When scanning for tokens, it's valid to have \"unbalanced\" parentheses or braces. When we get to parsing expressions in later stages, these cases will be highlighted as errors.","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for scanning number literals.","name":"Scanning: Number literals","position":13,"position-within-course":13,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"kj0","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"63846b5b-ac4a-4931-ba8d-748e4f7e99ac","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":6,"go":37,"cpp":4,"nim":null,"php":null,"zig":9,"dart":null,"java":5,"mojo":null,"odin":null,"ruby":null,"rust":116,"gleam":1,"ocaml":5,"scala":null,"swift":null,"csharp":7,"elixir":null,"fsharp":null,"kotlin":5,"python":52,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":5,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for handling runtime errors while evaluating the binary operators `*` \u0026 `/`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 7.3: Runtime Errors](https://craftinginterpreters.com/evaluating-expressions.html#runtime-errors).\n\n### Tests\n\nThe tester will test your program using a `test.lox` file that contains an expression with the binary operators `*` or `/`. This expression\nwill contain a usage of the `*` or `/` operator that should throw a runtime error.\n\nThe binary operators `*` \u0026 `/` will throw a runtime error if the operands are not both numbers.\n\nFor example, if `test.lox` contains the following:\n\n```\n\"foo\" / 42\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh evaluate test.lox\nOperands must be numbers.\n[line 1]\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\n| Input | Expected output |\n| :---: | :-------------: |\n| `\"foo\" * 42` | `Operands must be numbers.` |\n| `true / 2` | `Operands must be numbers.` |\n| `(\"foo\" * \"bar\")` | `Operands must be numbers.` |\n| `false / true` | `Operands must be numbers. `|\n\nThe tester will assert that the exit code is 70, signifying a runtime error. Note that this is different from the expected exit code for a syntax error, which is 65.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/evaluate.lox)\n- Error messages should be printed to `stderr`, not `stdout`.\n- The tester won't check the exact error message in this stage, it will only check that the program exits with code 70.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for handling runtime errors while evaluating the binary operators `*` \u0026 `/`.","name":"Runtime Errors: Binary Operators (1/2)","position":36,"position-within-course":36,"position-within-extension":11,"primary-extension-slug":"evaluating-expressions","secondary-extension-slugs":[],"slug":"yu6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"8bebcfa3-5e1f-400b-a138-aa1d20d52900","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":10,"go":55,"cpp":9,"nim":null,"php":null,"zig":16,"dart":null,"java":12,"mojo":null,"odin":null,"ruby":null,"rust":204,"gleam":5,"ocaml":11,"scala":null,"swift":null,"csharp":9,"elixir":null,"fsharp":null,"kotlin":7,"python":80,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":8,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for evaluating unary operators `-` and `!`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 7.2.3: Evaluating unary expressions](https://craftinginterpreters.com/evaluating-expressions.html#evaluating-unary-expressions).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain expressions with unary operators.\n\nFor example, if `test.lox` contains the following:\n\n```\n-(73)\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh evaluate test.lox\n-73\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\n| Input | Expected output |\n| :---: | :-------------: |\n| `-73` | `-73` |\n| `!true` | `false` |\n| `!10.40` | `false` |\n| `!((false))` | `true` |\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/evaluate.lox)\n- For truthyness and falsyness, we will follow the convention introduced in the book, where `false` and `nil` are falsy, and everything else is truthy.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for evaluating unary operators `-` and `!`.","name":"Unary Operators: Negation \u0026 Not","position":29,"position-within-course":29,"position-within-extension":4,"primary-extension-slug":"evaluating-expressions","secondary-extension-slugs":[],"slug":"dc1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"e306ad8c-eadf-4d11-9d6f-97881933b1ec","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":5,"go":36,"cpp":4,"nim":null,"php":null,"zig":11,"dart":null,"java":9,"mojo":null,"odin":null,"ruby":null,"rust":123,"gleam":3,"ocaml":8,"scala":null,"swift":null,"csharp":6,"elixir":null,"fsharp":null,"kotlin":1,"python":48,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":6,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for parsing the addition operator (`+`) \u0026 the subtraction operator (`-`).\n\n### Book reference\n\nThe code for this stage is implemented in [Section 6.2: Recursive Descent Parsing](https://craftinginterpreters.com/parsing-expressions.html#recursive-descent-parsing).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain additive algebraic operators, combined with previously introduced tokens.\n\nFor example, if `test.lox` contains the following:\n\n```\n52 + 80 - 94\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh parse test.lox\n(- (+ 52.0 80.0) 94.0)\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/parse.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for parsing additive algebraic operators `+` and `-`.","name":"Arithmetic operators (2/2)","position":22,"position-within-course":22,"position-within-extension":7,"primary-extension-slug":"parsing-expressions","secondary-extension-slugs":[],"slug":"yf2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"91c62821-f965-4aa7-832c-dcb5bbac4f76","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":4,"go":29,"cpp":3,"nim":null,"php":null,"zig":5,"dart":null,"java":2,"mojo":null,"odin":null,"ruby":null,"rust":84,"gleam":null,"ocaml":3,"scala":null,"swift":null,"csharp":4,"elixir":null,"fsharp":null,"kotlin":2,"python":31,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":4,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for initializing variables with the value passed to the `var` statement, or initializing them with `nil` if no value is passed.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 8.2: Global Variables](https://craftinginterpreters.com/statements-and-state.html#global-variables).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain the `var` statement.\n\nFor example, if `test.lox` contains the following\n\n```\nvar a;\nprint a;\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\nnil\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nvar foo;\nprint foo;\n```\n\nExpected Output:\n\n```\nnil\n```\n\nTest Case 2:\n\nInput:\n\n```\nvar baz = \"foo\";\nvar bar;\nprint bar;\n```\n\nExpected Output:\n\n```\nnil\n```\n\nTest Case 3:\n\nInput:\n\n```\nvar baz = 69;\nvar world;\nvar quz;\nprint world;\n```\n\nExpected Output:\n\n```\nnil\n```\n\nTest Case 4:\n\nInput:\n\n```\nvar quz = 73 + 26 * 20;\nprint quz;\nvar hello = 26 * 20;\nprint quz + hello;\nvar foo;\nprint foo;\n```\n\nExpected Output:\n\n```\n593\n1113\nnil\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/variable/in_nested_block.lox)","difficulty":"easy","is-paid":false,"marketing-markdown":"In this stage, you'll add support for initializing variables.","name":"Variables: Initialize variables","position":44,"position-within-course":44,"position-within-extension":6,"primary-extension-slug":"statements-and-state","secondary-extension-slugs":[],"slug":"bc1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"efce16f5-e004-41b2-9495-654ad01b5683","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":9,"go":47,"cpp":9,"nim":null,"php":null,"zig":14,"dart":null,"java":10,"mojo":null,"odin":null,"ruby":null,"rust":196,"gleam":6,"ocaml":10,"scala":null,"swift":null,"csharp":11,"elixir":null,"fsharp":null,"kotlin":8,"python":82,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":7,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for evaluating number and string literals.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 7.2.1: Evaluating Literals](https://craftinginterpreters.com/evaluating-expressions.html#evaluating-literals).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain number literals and string literals.\n\nFor example, if `test.lox` contains the following:\n\n```\n\"hello world!\"\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh evaluate test.lox\nhello world!\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\n| Input | Expected output |\n| :---: | :-------------: |\n| `\"hello world!\"` | `hello world!` |\n| `10.40` | `10.4` |\n| `10` | `10` |\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/evaluate.lox)\n- For the string literals, the tester will check that the program prints the string without quotes.\n- For the number literals, the tester will check that the program prints the number with the minimum number of decimal places without losing precision. (For example, 10.40 should be printed as 10.4).","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for evaluating number and string literals.","name":"Literals: Strings \u0026 Numbers","position":27,"position-within-course":27,"position-within-extension":2,"primary-extension-slug":"evaluating-expressions","secondary-extension-slugs":[],"slug":"lv1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"13f81ffa-4aaa-4e16-96fe-c628b86ea98f","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":62,"go":312,"cpp":70,"nim":null,"php":2,"zig":56,"dart":null,"java":69,"mojo":null,"odin":null,"ruby":null,"rust":781,"gleam":27,"ocaml":39,"scala":null,"swift":null,"csharp":31,"elixir":null,"fsharp":null,"kotlin":34,"python":434,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":97,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for scanning the division operator \u0026 comments.\nComments start with `//`, and the division operator is `/`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 4.6: Longer Lexemes](https://craftinginterpreters.com/scanning.html#longer-lexemes).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain `/` \u0026 `//` mixed with previously introduced tokens.\n\nFor example, if `test.lox` contains the following:\n\n```\n()// Comment\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nLEFT_PAREN ( null\nRIGHT_PAREN ) null\nEOF  null\n```\n\nSimilarly, if `test.lox` contains the following:\n\n```\n/()\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nSLASH / null\nLEFT_PAREN ( null\nRIGHT_PAREN ) null\nEOF  null\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning)\n- There's no token type for comments, your scanner just needs to ignore any characters after `//`.\n- When scanning for tokens, it's valid to have \"unbalanced\" parentheses or braces. When we get to parsing expressions in later stages, these cases will be highlighted as errors.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for scanning the division operator \u0026 comments.","name":"Scanning: Division operator \u0026 comments","position":9,"position-within-course":9,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ml2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"3693ac86-15d4-4220-8241-5ddc4ce025d0","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":7,"go":21,"cpp":7,"nim":null,"php":null,"zig":4,"dart":null,"java":13,"mojo":null,"odin":null,"ruby":null,"rust":82,"gleam":3,"ocaml":4,"scala":null,"swift":null,"csharp":10,"elixir":null,"fsharp":null,"kotlin":3,"python":26,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for native functions in your lox interpreter.\n\nYou can just define a single native function for now, we will go with `clock()` which returns the number of seconds elapsed since midnight January 1, 1970 UTC.\n\nThe return type for `clock()` can be a floating point number or an integer, the tester will cast it to an integer and then check if it is in a reasonable range.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 10.2: Native Functions](https://craftinginterpreters.com/functions.html#native-functions).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with native functions.\n\nFor example, if `test.lox` contains the following\n\n```\nprint clock();\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\n1731411035\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nprint clock() + 75;\n```\n\nExpected Output:\n\n```\n1731411035\n```\n\nTest Case 2:\n\nInput:\n\n```\nprint clock() / 1000;\n```\n\nExpected Output:\n\n```\n1731410\n```\n\nTest Case 3:\n\nInput:\n\n```\nvar startTime = clock();\nvar timeoutSeconds = 2;\n\n// Check if less than 2 seconds have elapsed\nif ((clock() \u003e= startTime) and (clock() \u003c= (startTime + timeoutSeconds))) {\n  print \"Operation in progress...\";\n} else {\n  print \"Operation timed out!\";\n}\n```\n\nExpected Output:\n\n```\nOperation in progress...\n```\n\nTest Case 4:\n\nInput:\n\n```\n// Countdown from 3 seconds\nvar startTime = clock();\nvar totalDuration = 3; // 3 seconds countdown\nvar lastCheck = startTime;\nvar completed = false;\n\nwhile (!completed) {\n  var currentTime = clock();\n  var elapsedTime = currentTime - startTime;\n  var remainingTime = totalDuration - elapsedTime;\n\n  // Update progress every second\n  if (currentTime \u003e= lastCheck + 1) {\n    if (remainingTime \u003e= 2) {\n      print \"Plenty of time remaining: \";\n      print remainingTime;\n    } else if (remainingTime \u003e= 1) {\n      print \"Getting closer: \";\n      print remainingTime;\n    } else if (remainingTime \u003e 0) {\n      print \"Almost there: \";\n      print remainingTime;\n    }\n    lastCheck = currentTime;\n  }\n\n  // Check for completion\n  if (elapsedTime \u003e= totalDuration) {\n    completed = true;\n    print \"Countdown complete!\";\n  } else if (elapsedTime \u003c 0) {\n    // Handle clock overflow or system time changes\n    print \"Time error detected!\";\n    completed = true;\n  }\n}\n```\n\nExpected Output:\n\n```\nPlenty of time remaining:\n2\nGetting closer:\n1\nCountdown complete!\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/function/print.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add native functions to your lox interpreter.","name":"Native functions","position":58,"position-within-course":58,"position-within-extension":1,"primary-extension-slug":"functions","secondary-extension-slugs":[],"slug":"av4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"78168317-6741-41f5-8b5c-ed35067f4c12","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":5,"go":12,"cpp":5,"nim":null,"php":null,"zig":3,"dart":null,"java":5,"mojo":null,"odin":null,"ruby":null,"rust":54,"gleam":1,"ocaml":2,"scala":null,"swift":null,"csharp":3,"elixir":null,"fsharp":null,"kotlin":1,"python":17,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":null,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for higher order functions in your lox interpreter.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 10.4: Function Objects](https://craftinginterpreters.com/functions.html#function-objects).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with higher order functions.\n\nFor example, if `test.lox` contains the following\n\n```\nvar globalGreeting = \"Hello\";\n\nfun makeGreeter() {\n  fun greet(name) {\n    print globalGreeting + \" \" + name;\n  }\n  return greet;\n}\n\nvar sayHello = makeGreeter();\nsayHello(\"Bob\");\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\nHello Bob\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nvar globalGreeting = \"Hello\";\n\nfun makeGreeter() {\n  fun greet(name) {\n    print globalGreeting + \" \" + name;\n  }\n  return greet;\n}\n\nvar sayHello = makeGreeter();\nsayHello(\"Bob\");\n```\n\nExpected Output:\n\n```\nHello Bob\n```\n\nTest Case 2:\n\nInput:\n\n```\nfun returnArg(arg) {\n  return arg;\n}\n\nfun returnFunCallWithArg(func, arg) {\n  return returnArg(func)(arg);\n}\n\nfun printArg(arg) {\n  print arg;\n}\n\nreturnFunCallWithArg(printArg, \"foo\");\n```\n\nExpected Output:\n\n```\nfoo\n```\n\nTest Case 3:\n\nInput:\n\n```\nfun makeAdder(x) {\n  fun add(y) {\n    return x + y;\n  }\n  return add;\n}\n\nfun applyTwice(f, x) {\n  return f(f(x));\n}\n\nvar addx = makeAdder(2);\nvar addy = makeAdder(2);\n\nprint applyTwice(addx, 2);\nprint applyTwice(addy, 2);\n```\n\nExpected Output:\n\n```\n6\n6\n```\n\nTest Case 4:\n\nInput:\n\n```\nfun makeFilter(min) {\n  fun filter(n) {\n    if (n \u003c min) {\n      return false;\n    }\n    return true;\n  }\n  return filter;\n}\n\n// This function applies a function to a list of numbers\nfun applyToNumbers(f, count) {\n  var n = 0;\n  while (n \u003c count) {\n    if (f(n)) {\n      print n;\n    }\n    n = n + 1;\n  }\n}\n\nvar greaterThanX = makeFilter(55);\nvar greaterThanY = makeFilter(10);\n\nprint \"Numbers \u003e= 55:\";\napplyToNumbers(greaterThanX, 55 + 5);\n\nprint \"Numbers \u003e= 10:\";\napplyToNumbers(greaterThanY, 10 + 5);\n```\n\nExpected Output:\n\n```\nNumbers \u003e= 55:\n55\n56\n57\n58\n59\nNumbers \u003e= 10:\n10\n11\n12\n13\n14\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/function/local_recursion.lox)","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll add support for higher order functions to your lox interpreter.","name":"Higher order functions","position":63,"position-within-course":63,"position-within-extension":6,"primary-extension-slug":"functions","secondary-extension-slugs":[],"slug":"ey3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"af25667e-a0c8-4010-b0db-d7117309d229","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":7,"go":25,"cpp":3,"nim":null,"php":null,"zig":6,"dart":null,"java":3,"mojo":null,"odin":null,"ruby":null,"rust":112,"gleam":4,"ocaml":6,"scala":null,"swift":null,"csharp":8,"elixir":null,"fsharp":null,"kotlin":null,"python":30,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":4,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for handling multiple statements in a single `program`. From here on, we will create test programs that span across multiple statements.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 8.1: Statements](https://craftinginterpreters.com/statements-and-state.html#statements).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain multiple statements.\n\nFor example, if `test.lox` contains the following\n\n```\nprint \"Hello, World!\";\nprint 42;\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\nHello, World!\n42\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nprint \"world\" + \"baz\" + \"bar\";\nprint 27 - 26;\nprint \"bar\" == \"quz\";\n```\n\nExpected Output:\n\n```\nworldbazbar\n1\nfalse\n```\n\nTest Case 2:\n\nInput:\n\n```\nprint \"hello\"; print true;\nprint false;\nprint \"bar\"; print 43;\n```\n\nExpected Output:\n\n```\nhello\ntrue\nfalse\nbar\n43\n```\n\nTest Case 3:\n\nInput:\n\n```\nprint 81;\n    print 81 + 46;\n        print 81 + 46 + 19;\n```\n\nExpected Output:\n\n```\n81\n127\n146\n```\n\nTest Case 4:\n\nInput:\n\n```\nprint true != true;\n\nprint \"36\n10\n78\n\";\n\nprint \"There should be an empty line above this.\";\n```\n\nExpected Output:\n\n```\nfalse\n36\n10\n78\n\nThere should be an empty line above this.\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/string/literals.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for handling multiple statements in a single `program`.","name":"Print: Multiple statements","position":40,"position-within-course":40,"position-within-extension":2,"primary-extension-slug":"statements-and-state","secondary-extension-slugs":[],"slug":"oe4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"7e136175-3456-400f-bba0-dca0e5d282b3","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":85,"go":456,"cpp":112,"nim":null,"php":2,"zig":80,"dart":null,"java":90,"mojo":null,"odin":null,"ruby":null,"rust":955,"gleam":53,"ocaml":45,"scala":null,"swift":null,"csharp":40,"elixir":null,"fsharp":null,"kotlin":50,"python":657,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":147,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for scanning braces.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 4.5: Recognizing Lexemes](https://craftinginterpreters.com/scanning.html#recognizing-lexemes).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain braces combined with parentheses.\n\nFor example, if `test.lox` contains the following:\n\n```{{=\u003c~ ~\u003e=}}\n{{}}\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nLEFT_BRACE { null\nLEFT_BRACE { null\nRIGHT_BRACE } null\nRIGHT_BRACE } null\nEOF  null\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning)\n- When scanning for tokens, it's valid to have \"unbalanced\" braces. When we get to parsing expressions in later stages, these cases will be highlighted as errors.","difficulty":"easy","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for scanning braces.","name":"Scanning: Braces","position":3,"position-within-course":3,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"oe8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"4ed9256c-96b4-4592-a852-e455b9345964","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":56,"go":294,"cpp":59,"nim":null,"php":2,"zig":56,"dart":null,"java":61,"mojo":null,"odin":null,"ruby":null,"rust":734,"gleam":26,"ocaml":34,"scala":null,"swift":null,"csharp":29,"elixir":null,"fsharp":null,"kotlin":32,"python":383,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":77,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for scanning string literals.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 4.6.1: String literals](https://craftinginterpreters.com/scanning.html#string-literals).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain string literals inside double quotes, mixed with previously introduced tokens.\n\nFor example, if `test.lox` contains the following:\n\n```\n\"foo baz\"\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nSTRING \"foo baz\" foo baz\nEOF  null\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\nAs mentioned in the book, the [format for printing out tokens](https://craftinginterpreters.com/scanning.html#location-information) is `\u003cTOKEN_TYPE\u003e \u003cLEXEME\u003e \u003cLITERAL\u003e`. Up until now,\nthe `\u003cLITERAL\u003e` field was always `null`. For strings, the `\u003cLITERAL\u003e` field will contain the string's contents.\n\nIf a string is unterminated, a lexical error should be raised.\n\nFor example, if `test.lox` contains the following:\n\n```\n\"bar\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\n[line 1] Error: Unterminated string.\nEOF  null\n```\n\nThe tester will assert that an error is raised, and that the error string matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning)\n- The `\u003cLEXEME\u003e` field will contain the string's contents including quotes, since it represents the actual characters that matched the token. The `\u003cLITERAL\u003e` field will\n  contain the string's contents without quotes, since it represents the string's value.\n- Lox doesn't support escape sequences within strings, so you can't include a `\"` inside a string.\n- When scanning for tokens, it's valid to have \"unbalanced\" parentheses or braces. When we get to parsing expressions in later stages, these cases will be highlighted as errors.","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for scanning string literals.","name":"Scanning: String literals","position":12,"position-within-course":12,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ue7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"44ae45b2-6396-4d5f-bc5b-a59624975e3f","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":9,"go":43,"cpp":8,"nim":null,"php":null,"zig":12,"dart":null,"java":9,"mojo":null,"odin":null,"ruby":null,"rust":158,"gleam":1,"ocaml":10,"scala":null,"swift":null,"csharp":10,"elixir":null,"fsharp":null,"kotlin":5,"python":46,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":3,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for block syntax in your interpreter. Blocks are enclosed in curly braces `{}` and are used to group statements together. They are also used to create local scopes. We will test scopes in the next stage, in this stage you just need to handle the block syntax.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 8.5.2: Block syntax and semantics](https://craftinginterpreters.com/statements-and-state.html#block-syntax-and-semantics).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain the assignment operation.\n\nFor example, if `test.lox` contains the following\n\n```\n{\n    var foo = \"before\";\n    print foo;\n}\n{\n    var foo = \"after\";\n    print foo;\n}\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\nbefore\nafter\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\n{\n    var hello = \"baz\";\n    print hello;\n}\n```\n\nExpected Output:\n\n```\nbaz\n```\n\nTest Case 2:\n\nInput:\n\n```\n{\n    var world = \"before\";\n    print world;\n}\n{\n    var world = \"after\";\n    print world;\n}\n```\n\nExpected Output:\n\n```\nbefore\nafter\n```\n\nTest Case 3:\n\nInput:\n\n```\n{\n    var hello = 88;\n    {\n        var foo = 88;\n        print foo;\n    }\n    print hello;\n}\n```\n\nExpected Output:\n\n```\n88\n88\n```\n\nTest Case 4:\n\nInput:\n\n```\n{\n    var bar = 11;\n    var world = 11;\n    {\n        print bar + world;\n}\n```\n\nExpected Output:\n\n```\n[line 6] Error at end: Expect '}' .\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0. If there is any blocks that are opened but not closed, it should throw a syntax error, the exit code in that case should be 65.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/string/literals.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for block syntax using curly braces `{}`.","name":"Block syntax","position":47,"position-within-course":47,"position-within-extension":9,"primary-extension-slug":"statements-and-state","secondary-extension-slugs":[],"slug":"vr5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"ff3d6363-0f8c-4464-aca2-9f520222f2b4","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":9,"go":49,"cpp":11,"nim":null,"php":null,"zig":16,"dart":null,"java":10,"mojo":null,"odin":null,"ruby":null,"rust":204,"gleam":7,"ocaml":14,"scala":null,"swift":null,"csharp":7,"elixir":null,"fsharp":null,"kotlin":5,"python":87,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":10,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for parsing the multiplication operator (`*`) \u0026 the division operator (`/`).\n\n### Book reference\n\nThe code for this stage is implemented in [Section 6.2: Recursive Descent Parsing](https://craftinginterpreters.com/parsing-expressions.html#recursive-descent-parsing).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain multiplicative algebraic operators, combined with previously introduced tokens.\n\nFor example, if `test.lox` contains the following:\n\n```\n16 * 38 / 58\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh parse test.lox\n(/ (* 16.0 38.0) 58.0)\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/parse.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for parsing multiplicative algebraic operators `*` and `/`.","name":"Arithmetic operators (1/2)","position":21,"position-within-course":21,"position-within-extension":6,"primary-extension-slug":"parsing-expressions","secondary-extension-slugs":[],"slug":"wa9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"32d005ce-2c9a-4e09-b1cc-f6a8923c89e3","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":79,"go":417,"cpp":104,"nim":null,"php":2,"zig":73,"dart":null,"java":88,"mojo":null,"odin":null,"ruby":null,"rust":993,"gleam":34,"ocaml":45,"scala":null,"swift":null,"csharp":46,"elixir":null,"fsharp":null,"kotlin":49,"python":625,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":132,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for reporting errors when scanning invalid tokens like `$`, `#`, etc.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 4.5.1: Lexical Errors](https://craftinginterpreters.com/scanning.html#lexical-errors).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain unknown tokens mixed with other previously introduced token types.\n\nFor example, if `test.lox` contains the following:\n\n```\n,.$(#\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\n[line 1] Error: Unexpected character: $\n[line 1] Error: Unexpected character: #\nCOMMA , null\nDOT . null\nLEFT_PAREN ( null\nEOF  null\n```\n\nErrors should be printed to the stderr stream, starting with the `[line N]` prefix. If lexical errors were present,\nyour program must exit with exit code 65.\n\nThe tester will assert that:\n\n- The stderr stream contains one line for each lexical error (if present)\n  - Each line must match the format `[line N] Error: Unexpected character: \u003ccharacter\u003e`\n- The stdout stream contains one line for each valid token (even if other lexical errors are present)\n- Your program exits with exit code 65 if lexical errors are present, and exit code 0 if not\n\nSince we haven't introduced the newline character yet, all errors will start with `[line 1]`. We'll get to multi-line errors in later stages.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning)\n- Since stdout and stderr are separate streams, the relative order of errors vs. valid tokens doesn't matter. You're free to print\n  errors first, errors last, or errors interleaved with valid tokens.\n- Only lines that start with `[line N]` are considered errors, so you can still print other lines to stderr for debugging purposes.\n- When scanning for tokens, it's valid to have \"unbalanced\" parentheses or braces. When we get to parsing expressions in later stages, these cases will be highlighted as errors.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for scanning lexical errors.","name":"Scanning: Lexical errors","position":5,"position-within-course":5,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ea6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"3d42afdc-e1e1-4085-b357-ee003faf22b5","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":5,"go":26,"cpp":4,"nim":null,"php":null,"zig":6,"dart":null,"java":4,"mojo":null,"odin":null,"ruby":null,"rust":72,"gleam":1,"ocaml":6,"scala":null,"swift":null,"csharp":3,"elixir":null,"fsharp":null,"kotlin":1,"python":39,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":7,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for evaluating binary operators `+` and `-`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 7.2.5: Evaluating binary operators](https://craftinginterpreters.com/evaluating-expressions.html#evaluating-binary-operators).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain expressions with the arithmetic operators `+` and `-`.\n\nFor example, if `test.lox` contains the following:\n\n```\n20 + 74 - (-(14 - 33))\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh evaluate test.lox\n75\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\n| Input | Expected output |\n| :---: | :-------------: |\n| `70 - 65` | `5` |\n| `69 - 93` | `-24` |\n| `10.40 - 2` | `8.4` |\n| `23 + 28 - (-(61 - 99))` | `13` |\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/evaluate.lox)\n- In this stage, you can assume we will not test for error cases. Runtime errors will be introduced in later stages. For now, all arithmetic operations will involve only two numbers.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for evaluating binary operators `+` and `-`.","name":"Arithmetic Operators (2/2)","position":31,"position-within-course":31,"position-within-extension":6,"primary-extension-slug":"evaluating-expressions","secondary-extension-slugs":[],"slug":"jy2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"02d11292-6464-4bc8-a62a-33e9aa34d021","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":52,"go":258,"cpp":58,"nim":null,"php":2,"zig":39,"dart":null,"java":54,"mojo":null,"odin":null,"ruby":null,"rust":574,"gleam":23,"ocaml":30,"scala":null,"swift":null,"csharp":23,"elixir":null,"fsharp":null,"kotlin":22,"python":361,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":72,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for scanning whitespace characters (tabs, spaces and newlines).\n\n### Book reference\n\nThe code for this stage is implemented in [Section 4.6: Longer Lexemes](https://craftinginterpreters.com/scanning.html#longer-lexemes).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain whitespaces (tabs, spaces and newlines) mixed with previously introduced tokens.\n\nFor example, if `test.lox` contains the following:\n\n```\n(\u003c|TAB|\u003e\n\u003c|SPACE|\u003e)\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nLEFT_PAREN ( null\nRIGHT_PAREN ) null\nEOF  null\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\nNote that the tab, space and newline characters are ignored, so they don't appear as tokens in the output.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning)\n- In the logs, the spaces will be replaced with `\u003c|SPACE|\u003e` and tabs will be replaced with `\u003c|TAB|\u003e` for readability. The `test.lox` file will contain actual space/tab characters.\n- When scanning for tokens, it's valid to have \"unbalanced\" parentheses or braces. When we get to parsing expressions in later stages, these cases will be highlighted as errors.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for scanning whitespace characters.","name":"Scanning: Whitespace","position":10,"position-within-course":10,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"er2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"6fd2b856-1c43-4db9-958f-81c8ef7f4c9b","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":68,"go":330,"cpp":76,"nim":null,"php":2,"zig":60,"dart":null,"java":72,"mojo":null,"odin":null,"ruby":null,"rust":790,"gleam":26,"ocaml":42,"scala":null,"swift":null,"csharp":31,"elixir":null,"fsharp":null,"kotlin":35,"python":477,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":107,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for scanning assignment \u0026 equality operators.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 4.5.2: Operators](https://craftinginterpreters.com/scanning.html#operators).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain equality \u0026 assignment operators mixed with previously introduced tokens.\n\nFor example, if `test.lox` contains the following:\n\n```\n={===}\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nEQUAL = null\nLEFT_BRACE { null\nEQUAL_EQUAL == null\nEQUAL = null\nRIGHT_BRACE } null\nEOF  null\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning)\n- When scanning for tokens, it's valid to have \"unbalanced\" parentheses or braces. When we get to parsing expressions in later stages, these cases will be highlighted as errors.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for scanning the assignment \u0026 equality operators.","name":"Scanning: Assignment \u0026 equality Operators","position":6,"position-within-course":6,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"mp7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"0eb2bc5e-ec70-43bd-bdd9-43964bfa4134","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":34,"go":181,"cpp":39,"nim":null,"php":1,"zig":38,"dart":null,"java":37,"mojo":null,"odin":null,"ruby":null,"rust":524,"gleam":19,"ocaml":26,"scala":null,"swift":null,"csharp":19,"elixir":null,"fsharp":null,"kotlin":20,"python":275,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":47,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for scanning reserved words, which are: `and`, `class`, `else`, `false`, `for`, `fun`, `if`, `nil`, `or`, `print`, `return`, `super`, `this`, `true`, `var`, `while`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 4.7: Reserved Words and Identifiers](https://craftinginterpreters.com/scanning.html#reserved-words-and-identifiers).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain reserved words mixed with other previously introduced token types.\n\nFor example, if `test.lox` contains the following:\n\n```\nand\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nAND and null\nEOF  null\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning)\n- When scanning for tokens, it's valid to have \"unbalanced\" parentheses or braces. When we get to parsing expressions in later stages, these cases will be highlighted as errors.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for scanning reserved words.","name":"Scanning: Reserved words","position":15,"position-within-course":15,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"pq5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"db75f7ae-340b-43a9-8976-051d7fa9d51f","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":4,"go":9,"cpp":1,"nim":null,"php":null,"zig":2,"dart":null,"java":2,"mojo":null,"odin":null,"ruby":null,"rust":37,"gleam":1,"ocaml":null,"scala":null,"swift":null,"csharp":7,"elixir":null,"fsharp":null,"kotlin":null,"python":14,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":1,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for syntactic errors in your interpreter. Syntactic errors are errors that occur when the code is not written in the correct syntax.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 9.5: For Loops](https://craftinginterpreters.com/control-flow.html#for-loops).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with syntactic errors.\n\nFor example, if `test.lox` contains the following\n\n```\nfor (;;) var foo;\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\n[line 1] Error at 'var': Expect expression.\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nif (true) \"ok\"; else var foo;\n```\n\nExpected Output:\n\n```\n[line 1] Error at 'var': Expect expression.\n```\n\nTest Case 2:\n\nInput:\n\n```\nfor (var a = 1; {}; a = a + 1) {}\n```\n\nExpected Output:\n\n```\n[line 2] Error at '{': Expect expression.\n[line 2] Error at ')': Expect ';' after expression.\n```\n\nTest Case 3:\n\nInput:\n\n```\nfor (var a = 1; a \u003c 2; {}) {}\n```\n\nExpected Output:\n\n```\n[line 2] Error at '{': Expect expression.\n```\n\nTest Case 4:\n\nInput:\n\n```\nfor ({}; a \u003c 2; a = a + 1) {}\n```\n\nExpected Output:\n\n```\n[line 2] Error at '{': Expect expression.\n[line 2] Error at ')': Expect ';' after expression.\n```\n\nThe tester will only assert that the exit code is 65, when there is a compilation error.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/if/dangling_else.lox)\n- Error messages should be printed to `stderr`, not `stdout`.\n- The tester won't check the exact error message in this stage, it will only check that the program exits with code 65.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll handle several syntactic errors in your interpreter.","name":"Syntactic errors","position":57,"position-within-course":57,"position-within-extension":9,"primary-extension-slug":"control-flow","secondary-extension-slugs":[],"slug":"vt1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"f4ca754e-590a-4164-9def-acf4c472942d","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":3,"go":11,"cpp":5,"nim":null,"php":null,"zig":3,"dart":null,"java":null,"mojo":null,"odin":null,"ruby":null,"rust":39,"gleam":null,"ocaml":2,"scala":null,"swift":null,"csharp":2,"elixir":null,"fsharp":null,"kotlin":null,"python":13,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":1,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for redeclaring variables using the `var` statement.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 8.2: Global Variables](https://craftinginterpreters.com/statements-and-state.html#global-variables).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain the `var` statement.\n\nFor example, if `test.lox` contains the following\n\n```\nvar a = 1;\nvar a = 2;\nprint a;\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\n2\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nvar baz = \"before\";\nprint baz;\nvar baz = \"after\";\nprint baz;\n```\n\nExpected Output:\n\n```\nbefore\nafter\n```\n\nTest Case 2:\n\nInput:\n\n```\nvar hello = \"after\";\nvar hello = \"before\";\nvar hello = hello;\nprint hello;\n```\n\nExpected Output:\n\n```\nbefore\n```\n\nTest Case 3:\n\nInput:\n\n```\nvar world = 2;\nprint world;\nvar world = 3;\nprint world;\nvar hello = 5;\nprint hello;\nvar world = hello;\nprint world;\n```\n\nExpected Output:\n\n```\n2\n3\n5\n5\n```\n\nTest Case 4:\n\nInput:\n\n```\nvar baz = bar;\n```\n\nExpected Output:\n\n```\nUndefined variable 'bar'.\n[line 1]\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/variable/in_nested_block.lox)","difficulty":"easy","is-paid":false,"marketing-markdown":"In this stage, you'll add support for redeclaring variables.","name":"Variables: Redeclare variables","position":45,"position-within-course":45,"position-within-extension":7,"primary-extension-slug":"statements-and-state","secondary-extension-slugs":[],"slug":"dw9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"8fd30229-a668-48a4-8bf1-994ba3b6fa07","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":3,"go":5,"cpp":2,"nim":null,"php":null,"zig":2,"dart":null,"java":3,"mojo":null,"odin":null,"ruby":null,"rust":28,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":null,"elixir":null,"fsharp":null,"kotlin":1,"python":16,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":null,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for runtime errors in your lox interpreter.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 10.4: Function Objects](https://craftinginterpreters.com/functions.html#function-objects).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with runtime errors.\n\nFor example, if `test.lox` contains the following\n\n```\n85();\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\nCan only call functions and classes.\n[line 1]\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\n\"not a function\"();\n```\n\nExpected Output:\n\n```\nCan only call functions and classes.\n[line 1]\n```\n\nTest Case 2:\n\nInput:\n\n```\nfun f(a, b) {\n  print a;\n  print b;\n}\n\nf(1, 2, 3, 4);\n```\n\nExpected Output:\n\n```\nExpected 2 arguments but got 4.\n[line 6]\n```\n\nTest Case 3:\n\nInput:\n\n```\nfun f(a, b) {}\n\nf(1);\n```\n\nExpected Output:\n\n```\nExpected 2 arguments but got 1.\n[line 3]\n```\n\nTest Case 4:\n\nInput:\n\n```\nfalse();\n```\n\nExpected Output:\n\n```\nCan only call functions and classes.\n[line 1]\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 70.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/function/body_must_be_block.lox)\n- Error messages should be printed to `stderr`, not `stdout`.\n- The tester won't check the exact error message in this stage, it will only check that the program exits with code 70.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add handling for runtime errors in your lox interpreter.","name":"Runtime errors","position":64,"position-within-course":64,"position-within-extension":7,"primary-extension-slug":"functions","secondary-extension-slugs":[],"slug":"fj7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"fb60b12f-628e-45f0-9d65-8ecfaff2ebd3","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":1,"go":6,"cpp":null,"nim":null,"php":null,"zig":2,"dart":null,"java":1,"mojo":null,"odin":null,"ruby":null,"rust":34,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":4,"elixir":null,"fsharp":null,"kotlin":null,"python":10,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for the `else` statement in your interpreter. The `else` statement is used to conditionally execute statements when the `if` condition is false.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 9.2: Conditional execution](https://craftinginterpreters.com/control-flow.html#conditional-execution).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with `if` statements.\n\nFor example, if `test.lox` contains the following\n\n```\nif (true) print \"if branch\"; else print \"else branch\";\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\nif branch\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nif (true) print \"if branch\"; else print \"else branch\";\n```\n\nExpected Output:\n\n```\nif branch\n```\n\nTest Case 2:\n\nInput:\n\n```\nvar age = 21;\nif (age \u003e 18) print \"adult\"; else print \"child\";\n```\n\nExpected Output:\n\n```\nadult\n```\n\nTest Case 3:\n\nInput:\n\n```\nif (false) {\n  print \"if block\";\n} else print \"else statement\";\n\nif (false) print \"if statement\"; else {\n  print \"else block\";\n}\n```\n\nExpected Output:\n\n```\nelse statement\nelse block\n```\n\nTest Case 4:\n\nInput:\n\n```\nvar celsius = 67;\nvar fahrenheit = 0;\nvar isHot = false;\n\n{\n  fahrenheit = celsius * 9 / 5 + 32;\n  print celsius; print fahrenheit;\n\n  if (celsius \u003e 30) {\n    isHot = true;\n    print \"It's a hot day. Stay hydrated!\";\n  } else {\n    print \"It's cold today. Wear a jacket!\";\n  }\n\n  if (isHot) { print \"Remember to use sunscreen!\"; }\n}\n```\n\nExpected Output:\n\n```\n67\n152.6\nIt's a hot day. Stay hydrated!\nRemember to use sunscreen!\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/if/else.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for the `else` statement in your interpreter.","name":"Else statements","position":50,"position-within-course":50,"position-within-extension":2,"primary-extension-slug":"control-flow","secondary-extension-slugs":[],"slug":"st5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"9a4b4e7e-58a4-43e2-bff6-5b10dfc1b99e","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":9,"go":44,"cpp":9,"nim":null,"php":null,"zig":12,"dart":null,"java":12,"mojo":null,"odin":null,"ruby":null,"rust":169,"gleam":2,"ocaml":11,"scala":null,"swift":null,"csharp":12,"elixir":null,"fsharp":null,"kotlin":6,"python":49,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":4,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for declaring variables using the `var` statement. For this, you'll need to add support for the `var` declaration in your AST generator, parser \u0026 interpreter.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 8.2: Global Variables](https://craftinginterpreters.com/statements-and-state.html#global-variables).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain the `var` statement.\n\nFor example, if `test.lox` contains the following\n\n```\nvar a = \"foo\";\nprint a;\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\nfoo\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nvar world = 10;\nprint world;\n```\n\nExpected Output:\n\n```\n10\n```\n\nTest Case 2:\n\nInput:\n\n```\nvar bar = 99;\nvar foo = 99;\nprint bar + foo;\nvar quz = 99;\nprint bar + foo + quz;\n```\n\nExpected Output:\n\n```\n198\n297\n```\n\nTest Case 3:\n\nInput:\n\n```\nvar foo = (8 * (62 + 62)) / 4 + 62;\nprint foo;\n```\n\nExpected Output:\n\n```\n310\n```\n\nTest Case 4:\n\nInput:\n\n```\nvar quz = 76;\nvar baz = quz;\nprint baz + quz;\n```\n\nExpected Output:\n\n```\n152\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/variable/in_nested_block.lox)","difficulty":"easy","is-paid":false,"marketing-markdown":"In this stage, you'll add support for declaring variables using the `var` statement.","name":"Variables: Declare variables","position":42,"position-within-course":42,"position-within-extension":4,"primary-extension-slug":"statements-and-state","secondary-extension-slugs":[],"slug":"yg2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"d0f12aaf-c56f-4aa6-8783-784ee5131f3b","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":57,"go":255,"cpp":56,"nim":null,"php":2,"zig":41,"dart":null,"java":53,"mojo":null,"odin":null,"ruby":null,"rust":598,"gleam":24,"ocaml":30,"scala":null,"swift":null,"csharp":25,"elixir":null,"fsharp":null,"kotlin":28,"python":365,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":86,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for scanning relational operators, which are: `\u003c`, `\u003e`, `\u003c=`, `\u003e=`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 4.5.2: Operators](https://craftinginterpreters.com/scanning.html#operators).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain relational operators mixed with previously introduced tokens.\n\nFor example, if `test.lox` contains the following:\n\n```\n\u003c\u003c=\u003e\u003e=\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nLESS \u003c null\nLESS_EQUAL \u003c= null\nGREATER \u003e null\nGREATER_EQUAL \u003e= null\nEOF  null\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning)\n- When scanning for tokens, it's valid to have \"unbalanced\" parentheses or braces. When we get to parsing expressions in later stages, these cases will be highlighted as errors.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for scanning relational operators.","name":"Scanning: Relational operators","position":8,"position-within-course":8,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"et2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"53d9b650-90c0-4e73-a269-f5f07c2d5bdd","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":9,"go":49,"cpp":8,"nim":null,"php":null,"zig":17,"dart":null,"java":9,"mojo":null,"odin":null,"ruby":null,"rust":168,"gleam":2,"ocaml":8,"scala":null,"swift":null,"csharp":8,"elixir":null,"fsharp":null,"kotlin":3,"python":48,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":8,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for evaluating equality operators `==` and `!=`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 7.2.5: Evaluating binary operators](https://craftinginterpreters.com/evaluating-expressions.html#evaluating-binary-operators).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain expressions with the equality operators `==` and `!=`.\n\nFor example, if `test.lox` contains the following:\n\n```\n156 == (89 + 67)\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh evaluate test.lox\ntrue\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\n| Input | Expected output |\n| :---: | :-------------: |\n| `\"hello\" == \"world\"` | `false` |\n| `\"foo\" != \"bar\"` | `true` |\n| `\"foo\" == \"foo\"` | `true` |\n| `61 == \"61\"` | `false` |\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/evaluate.lox)\n- In this stage, you can assume we will not test for error cases. Runtime errors will be introduced in later stages. For now, all equality operations will involve only two numbers or two strings.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for evaluating equality operators `==` and `!=`.","name":"Equality Operators","position":34,"position-within-course":34,"position-within-extension":9,"primary-extension-slug":"evaluating-expressions","secondary-extension-slugs":[],"slug":"hw7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"7a71f3a9-e1b7-4d81-b34b-e3ead361486e","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":6,"go":14,"cpp":7,"nim":null,"php":null,"zig":4,"dart":null,"java":8,"mojo":null,"odin":null,"ruby":null,"rust":72,"gleam":2,"ocaml":3,"scala":null,"swift":null,"csharp":7,"elixir":null,"fsharp":null,"kotlin":3,"python":23,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":1,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for declaring, defining and interpreting user defined functions with no arguments in your lox interpreter.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 10.3: Function declarations](https://craftinginterpreters.com/functions.html#function-declarations).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with user defined functions with no arguments.\n\nFor example, if `test.lox` contains the following\n\n```\nfun bar() { print 10; }\nbar();\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\n10\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nfun foo() {\n  print 7;\n}\nfoo();\n```\n\nExpected Output:\n\n```\n7\n```\n\nTest Case 2:\n\nInput:\n\n```\nfun f() {}\nf();\n```\n\nExpected Output:\n\n```\n\n```\n\nTest Case 3:\n\nInput:\n\n```\nfun foo() {}\nprint foo;\n```\n\nExpected Output:\n\n```\n\u003cfn foo\u003e\n```\n\nTest Case 4:\n\nInput:\n\n```\nfun cumulative_sum() {\n    var n = 10;  // Fixed value\n    var total = 0;\n    var i = 1;\n    while (i \u003c= n) {\n        total = total + i;\n        i = i + 1;\n    }\n    print \"The cumulative sum from 1 to 10 is: \";\n    print total;\n}\n\ncumulative_sum();\n```\n\nExpected Output:\n\n```\nThe cumulative sum from 1 to 10 is:\n55\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/function/print.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for user defined functions with no arguments to your lox interpreter.","name":"Functions without arguments","position":59,"position-within-course":59,"position-within-extension":2,"primary-extension-slug":"functions","secondary-extension-slugs":[],"slug":"pg8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"95e36860-64a7-40dc-8e04-f38662009006","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":39,"go":216,"cpp":43,"nim":null,"php":1,"zig":51,"dart":null,"java":52,"mojo":null,"odin":null,"ruby":null,"rust":598,"gleam":23,"ocaml":28,"scala":null,"swift":null,"csharp":22,"elixir":null,"fsharp":null,"kotlin":25,"python":311,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":52,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for scanning identifiers.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 4.7: Reserved Words and Identifiers](https://craftinginterpreters.com/scanning.html#reserved-words-and-identifiers).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain identifiers mixed with previously introduced tokens.\n\nFor example, if `test.lox` contains the following:\n\n```\nfoo bar _hello\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nIDENTIFIER foo null\nIDENTIFIER bar null\nIDENTIFIER _hello null\nEOF  null\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning)\n- When scanning for tokens, it's valid to have \"unbalanced\" parentheses or braces. When we get to parsing expressions in later stages, these cases will be highlighted as errors.","difficulty":"hard","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for scanning identifiers.","name":"Scanning: Identifiers","position":14,"position-within-course":14,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ey7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"ab944750-28b0-4f90-a011-54787c46fc1e","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":9,"go":62,"cpp":9,"nim":null,"php":null,"zig":17,"dart":null,"java":15,"mojo":null,"odin":null,"ruby":null,"rust":244,"gleam":12,"ocaml":16,"scala":null,"swift":null,"csharp":7,"elixir":null,"fsharp":null,"kotlin":10,"python":110,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":19,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for parsing the negation operator (`-`) \u0026 the logical not operator (`!`).\n\n### Book reference\n\nThe code for this stage is implemented in [Section 6.2: Recursive Descent Parsing](https://craftinginterpreters.com/parsing-expressions.html#recursive-descent-parsing).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain unary operators, combined with previously introduced tokens.\n\nFor example, if `test.lox` contains the following:\n\n```\n!true\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh parse test.lox\n(! true)\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/parse.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for parsing unary operators `!` and `-`.","name":"Unary Operators","position":20,"position-within-course":20,"position-within-extension":5,"primary-extension-slug":"parsing-expressions","secondary-extension-slugs":[],"slug":"mq1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"8c5c4f27-e6bf-4d87-b526-de84f6f3c67e","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":11,"go":64,"cpp":11,"nim":null,"php":null,"zig":18,"dart":null,"java":16,"mojo":null,"odin":null,"ruby":null,"rust":229,"gleam":4,"ocaml":9,"scala":null,"swift":null,"csharp":11,"elixir":null,"fsharp":null,"kotlin":8,"python":88,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":8,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for handling runtime errors while evaluating the unary operator `-`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 7.3: Runtime Errors](https://craftinginterpreters.com/evaluating-expressions.html#runtime-errors).\n\n### Tests\n\nThe tester will test your program using a `test.lox` file that contains an expression with the unary operator `-`. This expression\nwill contain a usage of the `-` operator that should throw a runtime error.\n\nThe unary operator `-` will throw a runtime error if the operand is not a number.\n\nFor example, if `test.lox` contains the following:\n\n```\n-\"hello world!\"\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh evaluate test.lox\nOperand must be a number.\n[line 1]\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\n| Input | Expected output |\n| :---: | :-------------: |\n| `-\"foo\"` | `Operand must be a number.` |\n| `-true` | `Operand must be a number.` |\n| `-(\"foo\" + \"bar\")` | `Operand must be a number.` |\n| `-false` | `Operand must be a number. `|\n\nThe tester will assert that the exit code is 70, signifying a runtime error. Note that this is different from the expected exit code for a syntax error, which is 65.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/evaluate.lox)\n- Error messages should be printed to `stderr`, not `stdout`.\n- The tester won't check the exact error message in this stage, it will only check that the program exits with code 70.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for handling runtime errors while evaluating the unary operator `-`.","name":"Runtime Errors: Unary Operators","position":35,"position-within-course":35,"position-within-extension":10,"primary-extension-slug":"evaluating-expressions","secondary-extension-slugs":[],"slug":"gj9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"269d597c-f260-49da-8295-23bb3d98458c","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":93,"go":561,"cpp":135,"nim":null,"php":2,"zig":99,"dart":null,"java":120,"mojo":null,"odin":null,"ruby":null,"rust":1150,"gleam":62,"ocaml":52,"scala":null,"swift":null,"csharp":59,"elixir":null,"fsharp":null,"kotlin":62,"python":764,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":164,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for scanning parentheses.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 4.5: Recognizing Lexemes](https://craftinginterpreters.com/scanning.html#recognizing-lexemes).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain parentheses.\n\nFor example, if `test.lox` contains the following:\n\n```\n(()\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh tokenize test.lox\nLEFT_PAREN ( null\nLEFT_PAREN ( null\nRIGHT_PAREN ) null\nEOF  null\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/tree/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/scanning)\n- When scanning for tokens, it's valid to have \"unbalanced\" parentheses. When we get to parsing expressions in later stages, these cases will be highlighted as errors.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for scanning parentheses.","name":"Scanning: Parentheses","position":2,"position-within-course":2,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ol4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"23ab6377-9d89-45fd-9451-8ec260f08a08","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":2,"go":7,"cpp":1,"nim":null,"php":null,"zig":2,"dart":null,"java":5,"mojo":null,"odin":null,"ruby":null,"rust":33,"gleam":1,"ocaml":1,"scala":null,"swift":null,"csharp":2,"elixir":null,"fsharp":null,"kotlin":null,"python":12,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":null,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for declaring, defining and interpreting user defined functions with arguments in your lox interpreter.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 10.3: Function declarations](https://craftinginterpreters.com/functions.html#function-declarations).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with user defined functions with arguments.\n\nFor example, if `test.lox` contains the following\n\n```\nfun foo(a) { print a; }\nfoo(10);\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\n10\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nfun f1(a) {\n  print a;\n}\nf1(76);\n```\n\nExpected Output:\n\n```\n76\n```\n\nTest Case 2:\n\nInput:\n\n```\nfun f3(a, b, c) { print a + b + c; }\nf3(24, 24, 24);\n```\n\nExpected Output:\n\n```\n72\n```\n\nTest Case 3:\n\nInput:\n\n```\nfun f8(a, b, c, d, e, f, g, h) { print a - b + c * d + e - f + g - h; }\nf8(51, 51, 51, 51, 51, 51, 51, 51);\n```\n\nExpected Output:\n\n```\n2601\n```\n\nTest Case 4:\n\nInput:\n\n```\nfun calculateGrade(score, bonus) {\n  var finalScore = score + bonus;\n\n  if (finalScore \u003e= 90) {\n    print \"A\";\n  } else if (finalScore \u003e= 80) {\n    print \"B\";\n  } else if (finalScore \u003e= 70) {\n    print \"C\";\n  } else if (finalScore \u003e= 60) {\n    print \"D\";\n  } else {\n    print \"F\";\n  }\n}\n\nvar score = 81;\nvar bonus = 3;\nprint \"Grade for given score is: \";\ncalculateGrade(score, bonus);\n```\n\nExpected Output:\n\n```\nGrade for given score is:\nB\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/function/parameters.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for user defined functions with arguments to your lox interpreter.","name":"Functions with arguments","position":60,"position-within-course":60,"position-within-extension":3,"primary-extension-slug":"functions","secondary-extension-slugs":[],"slug":"lb6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"5e36ee17-f2f3-4554-889f-38836e7db89c","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":14,"go":96,"cpp":19,"nim":null,"php":null,"zig":20,"dart":null,"java":13,"mojo":null,"odin":null,"ruby":null,"rust":276,"gleam":8,"ocaml":15,"scala":null,"swift":null,"csharp":11,"elixir":null,"fsharp":null,"kotlin":11,"python":108,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":20,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for parsing number literals.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 6.2: Recursive Descent Parsing](https://craftinginterpreters.com/parsing-expressions.html#recursive-descent-parsing).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain number literals, we include both integers and floats.\n\nFor example, if `test.lox` contains the following:\n\n```\n42.47\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh parse test.lox\n42.47\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/parse.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for parsing number literals.","name":"Number literals","position":17,"position-within-course":17,"position-within-extension":2,"primary-extension-slug":"parsing-expressions","secondary-extension-slugs":[],"slug":"ra8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"e9ab63ba-57ce-4cf2-b0f8-9a40e419942e","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":3,"go":25,"cpp":1,"nim":null,"php":null,"zig":7,"dart":null,"java":4,"mojo":null,"odin":null,"ruby":null,"rust":96,"gleam":3,"ocaml":4,"scala":null,"swift":null,"csharp":6,"elixir":null,"fsharp":null,"kotlin":2,"python":35,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":4,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for handling runtime errors while evaluating the relational operators `\u003e`, `\u003c`, `\u003e=` \u0026 `\u003c=`.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 7.3: Runtime Errors](https://craftinginterpreters.com/evaluating-expressions.html#runtime-errors).\n\n### Tests\n\nThe tester will test your program using a `test.lox` file that contains an expression with the relational operator `\u003e`, `\u003c`, `\u003e=` or `\u003c=`. This expression\nwill contain a usage of the relational operator that should throw a runtime error.\n\nThe relational operators `\u003e`, `\u003c`, `\u003e=` \u0026 `\u003c=` will throw a runtime error if the operands are not numbers.\n\nFor example, if `test.lox` contains the following:\n\n```\n17 \u003e \"bar\"\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh evaluate test.lox\nOperands must be numbers.\n[line 1]\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\n| Input | Expected output |\n| :---: | :-------------: |\n| `\"foo\" \u003c false` | `Operands must be numbers.` |\n| `true \u003c 2` | `Operands must be numbers.` |\n| `(\"foo\" + \"bar\") \u003c 42` | `Operands must be numbers.` |\n| `false \u003e true` | `Operands must be numbers. `|\n\nThe tester will assert that the exit code is 70, signifying a runtime error. Note that this is different from the expected exit code for a syntax error, which is 65.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/evaluate.lox)\n- Error messages should be printed to `stderr`, not `stdout`.\n- The tester won't check the exact error message in this stage, it will only check that the program exits with code 70.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for handling runtime errors while evaluating the relational operators `\u003e`, `\u003c`, `\u003e=` \u0026 `\u003c=`.","name":"Runtime Errors: Relational Operators","position":38,"position-within-course":38,"position-within-extension":13,"primary-extension-slug":"evaluating-expressions","secondary-extension-slugs":[],"slug":"ib5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"11738472-e50d-4420-b2e9-52d02838430a","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":12,"go":49,"cpp":14,"nim":null,"php":null,"zig":16,"dart":null,"java":18,"mojo":null,"odin":null,"ruby":null,"rust":210,"gleam":5,"ocaml":12,"scala":null,"swift":null,"csharp":13,"elixir":null,"fsharp":null,"kotlin":8,"python":72,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":7,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for generating output using the `print` statement. For this, you'll need to add support for the `print` statement in your AST generator, parser \u0026 interpreter.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 8.1: Statements](https://craftinginterpreters.com/statements-and-state.html#statements).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain the `print` statement.\n\nFor example, if `test.lox` contains the following\n\n```\nprint \"Hello, World!\";\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\nHello, World!\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\n| Input | Expected output |\n| :---: | :-------------: |\n| `print \"Hello, World!\";` | `Hello, World!` |\n| `print 42;` | `42` |\n| `print true;` | `true` |\n| `print 12 + 24;` | `36` |\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/string/literals.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for generating output using the `print` statement.","name":"Print: Generate output","position":39,"position-within-course":39,"position-within-extension":1,"primary-extension-slug":"statements-and-state","secondary-extension-slugs":[],"slug":"xy1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"936153e1-58cb-4fd8-9f9c-cd1f27b01cc9","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":13,"go":90,"cpp":13,"nim":null,"php":null,"zig":21,"dart":null,"java":16,"mojo":null,"odin":null,"ruby":null,"rust":288,"gleam":12,"ocaml":16,"scala":null,"swift":null,"csharp":10,"elixir":null,"fsharp":null,"kotlin":16,"python":127,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":20,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for parsing parentheses.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 6.2: Recursive Descent Parsing](https://craftinginterpreters.com/parsing-expressions.html#recursive-descent-parsing).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain parentheses, combined with number literals, string literals and booleans.\n\nFor example, if `test.lox` contains the following:\n\n```\n(\"foo\")\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh parse test.lox\n(group foo)\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/parse.lox)\n- Errors for unclosed parenthese are not checked in this stage, they'll be checked in later stages.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for parsing parentheses.","name":"Parentheses","position":19,"position-within-course":19,"position-within-extension":4,"primary-extension-slug":"parsing-expressions","secondary-extension-slugs":[],"slug":"xe6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"abe1b058-5651-467a-a3d3-e4af22573f6d","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":12,"go":63,"cpp":16,"nim":null,"php":null,"zig":22,"dart":null,"java":11,"mojo":null,"odin":null,"ruby":null,"rust":231,"gleam":6,"ocaml":16,"scala":null,"swift":null,"csharp":6,"elixir":null,"fsharp":null,"kotlin":7,"python":90,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":15,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for parsing string literals.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 6.2: Recursive Descent Parsing](https://craftinginterpreters.com/parsing-expressions.html#recursive-descent-parsing).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain string literals, it can contain whitespaces, and numbers too, but everything is inside double quotes.\n\nFor example, if `test.lox` contains the following:\n\n```\n\"hello\"\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh parse test.lox\nhello\n```\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/parse.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for parsing string literals.","name":"String literals","position":18,"position-within-course":18,"position-within-extension":3,"primary-extension-slug":"parsing-expressions","secondary-extension-slugs":[],"slug":"th5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"689c9a0b-0130-4878-9d05-68aa0e0df161","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":8,"go":24,"cpp":7,"nim":null,"php":null,"zig":7,"dart":null,"java":10,"mojo":null,"odin":null,"ruby":null,"rust":95,"gleam":2,"ocaml":5,"scala":null,"swift":null,"csharp":8,"elixir":null,"fsharp":null,"kotlin":2,"python":22,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for the logical OR operator in your interpreter. The logical OR operator combines two conditions and returns the first value that is truthy.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 9.3: Logical Operators](https://craftinginterpreters.com/control-flow.html#logical-operators).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain programs with the logical OR operator.\n\nFor example, if `test.lox` contains the following\n\n```\nprint nil or \"ok\";\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\nok\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\nif (false or \"ok\") print \"baz\";\nif (nil or \"ok\") print \"baz\";\n\nif (false or false) print \"world\";\nif (true or \"world\") print \"world\";\n\nif (24 or \"bar\") print \"bar\";\nif (\"bar\" or \"bar\") print \"bar\";\n```\n\nExpected Output:\n\n```\nbaz\nbaz\nworld\nbar\nbar\n```\n\nTest Case 2:\n\nInput:\n\n```\nprint 41 or true;\nprint false or 41;\nprint false or false or true;\n\nprint false or false;\nprint false or false or false;\nprint true or true or true or true;\n```\n\nExpected Output:\n\n```\n41\n41\ntrue\nfalse\nfalse\ntrue\n```\n\nTest Case 3:\n\nInput:\n\n```\nvar a = \"hello\";\nvar b = \"hello\";\n(a = false) or (b = true) or (a = \"hello\");\nprint a;\nprint b;\n```\n\nExpected Output:\n\n```\nfalse\ntrue\n```\n\nTest Case 4:\n\nInput:\n\n```\nvar stage = \"unknown\";\nvar age = 23;\nif (age \u003c 18) { stage = \"child\"; }\nif (age \u003e= 18) { stage = \"adult\"; }\nprint stage;\n\nvar isAdult = age \u003e= 18;\nif (isAdult) { print \"eligible for voting: true\"; }\nif (!isAdult) { print \"eligible for voting: false\"; }\n```\n\nExpected Output:\n\n```\nadult\neligible for voting: true\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4/test/logical_operator/or.lox)","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll add support for the logical OR operator in your interpreter.","name":"Logical OR operator","position":53,"position-within-course":53,"position-within-extension":5,"primary-extension-slug":"control-flow","secondary-extension-slugs":[],"slug":"wk8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"0fcaec2e-ca62-4f1a-a9b9-5ce9b89922f6","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":9,"go":38,"cpp":5,"nim":null,"php":null,"zig":14,"dart":null,"java":4,"mojo":null,"odin":null,"ruby":null,"rust":140,"gleam":4,"ocaml":7,"scala":null,"swift":null,"csharp":7,"elixir":null,"fsharp":null,"kotlin":2,"python":32,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":4,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for overloading the `+` operator. When the `+` operator is applied to two strings, it should concatenate them.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 7.2.5: Evaluating binary operators](https://craftinginterpreters.com/evaluating-expressions.html#evaluating-binary-operators).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain expressions with the operator `+`.\n\nFor example, if `test.lox` contains the following:\n\n```\n\"hello\" + \" world!\"\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh evaluate test.lox\nhello world!\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\n| Input | Expected output |\n| :---: | :-------------: |\n| `\"hello\" + \" world!\"` | `hello world!` |\n| `\"42\" + \"24\"` | `4224` |\n| `\"foo\" + \"bar\"` | `foobar` |\n\nThe tester will assert that the stdout of your program matches the format above.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/expressions/evaluate.lox)\n- In this stage, you can assume we will not test for error cases. Runtime errors will be introduced in later stages. For now, we will only pass 2 strings to the `+` operator in this stage.","difficulty":"medium","is-paid":false,"marketing-markdown":"In this stage, you'll implement support for overloading the `+` operator. When the `+` operator is applied to two strings, it should concatenate them.","name":"String Concatenation","position":32,"position-within-course":32,"position-within-extension":7,"primary-extension-slug":"evaluating-expressions","secondary-extension-slugs":[],"slug":"jx8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"137e7e9e-daea-4848-9941-c4779d07b252","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":10,"go":28,"cpp":7,"nim":null,"php":null,"zig":9,"dart":null,"java":7,"mojo":null,"odin":null,"ruby":null,"rust":136,"gleam":3,"ocaml":6,"scala":null,"swift":null,"csharp":7,"elixir":null,"fsharp":null,"kotlin":3,"python":39,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":4,"typescript":null},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for handling expression statements. An expression statement lets you place an expression where a statement is expected. They exist to evaluate expressions that have side effects.\n\n### Book reference\n\nThe code for this stage is implemented in [Section 8.1: Statements](https://craftinginterpreters.com/statements-and-state.html#statements).\n\n### Tests\n\nThe tester will run a series of tests with `test.lox` files that contain expressions that have side effects, combined with the `print` statement.\n\nFor example, if `test.lox` contains the following\n\n```\n\"foo\" + \"bar\";\nprint \"baz\";\n```\n\nThe tester will run your program like this:\n\n```\n$ ./your_program.sh run test.lox\nbaz\n```\n\nThe tester will run multiple such tests with randomized expressions, for example:\n\nTest Case 1:\n\nInput:\n\n```\n(37 + 42 - 21) \u003e (76 - 37) * 2;\nprint !false;\n\"baz\" + \"hello\" + \"quz\" + \"bar\" == \"bazhelloquzbar\";\nprint !false;\n```\n\nExpected Output:\n\n```\ntrue\ntrue\n```\n\nTest Case 2:\n\nInput:\n\n```\n27 - 60 \u003e= -99 * 2 / 99 + 76;\ntrue == true;\n(\"world\" == \"bar\") == (\"baz\" != \"hello\");\nprint true;\n```\n\nExpected Output:\n\n```\ntrue\n```\n\nTest Case 3:\n\nInput:\n\n```\nprint \"the expression below is invalid\";\n49 + \"baz\";\nprint \"this should not be printed\";\n```\n\nExpected Output:\n\n```\nthe expression below is invalid\nOperands must be two numbers or two strings.\n[line 2]\n```\n\nTest Case 4:\n\nInput:\n\n```\nprint \"79\" + \"baz\";\nprint false * (18 + 84);\n```\n\nExpected Output:\n\n```\n79baz\nOperands must be numbers.\n[line 2]\n```\n\nThe tester will assert that the stdout of your program matches the format above, and that the exit code is 0.\n\n### Notes\n\n- This output format matches the spec in the [book's repository](https://github.com/munificent/craftinginterpreters/blob/01e6f5b8f3e5dfa65674c2f9cf4700d73ab41cf8/test/string/literals.lox)","difficulty":"easy","is-paid":false,"marketing-markdown":"In this stage, you'll add support for handling expression statements.","name":"Expression statements","position":41,"position-within-course":41,"position-within-extension":3,"primary-extension-slug":"statements-and-state","secondary-extension-slugs":[],"slug":"fi3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"7ff282c1-4f73-4bdc-899a-aa23cc6b5ea5","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"language":{"data":{"id":"3236a60c-e348-4db7-9e6a-e2826b38d991","type":"language"}}}},{"id":"1377d08e-6b49-4f44-8898-854380829b7d","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"language":{"data":{"id":"a58f0983-d67d-47e6-97e7-c02aec9ec269","type":"language"}}}},{"id":"1e9c5139-c4cc-43eb-ae6d-f2bbcf82b592","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"language":{"data":{"id":"5ddd40dd-1539-4214-a40c-cc7a9e5edf35","type":"language"}}}},{"id":"1dd4a65c-26f3-49a2-88e9-66d4c927b346","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"language":{"data":{"id":"c9b581c8-6977-4f1b-9c8b-e1ee5fd7a10f","type":"language"}}}},{"id":"ce2c0acd-7508-47fd-810e-2ccc53c9180d","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"language":{"data":{"id":"1dbc76cc-c216-4776-a605-3a5784b801a9","type":"language"}}}},{"id":"9683864f-a7dc-4dc2-a548-539e902557e8","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"language":{"data":{"id":"eafb6f56-30a3-49d8-90b1-a2e051db26cf","type":"language"}}}},{"id":"69f3180a-cb86-410e-9d4f-80b3d7b3dc6e","type":"languages","attributes":{"name":"OCaml","slug":"ocaml","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"7d612b2f-78a0-4b08-a4b1-02ef3966634a","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"language":{"data":{"id":"69f3180a-cb86-410e-9d4f-80b3d7b3dc6e","type":"language"}}}},{"id":"49575809-f39c-44c7-898a-c36009e71f22","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"language":{"data":{"id":"fb72dae0-177a-45cc-a63e-71f9dd3184ac","type":"language"}}}},{"id":"f56c8221-db91-48b1-b929-fb78d453e1f2","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"language":{"data":{"id":"7e07ab8f-2bc0-4b20-bc72-1cd9c7e200ed","type":"language"}}}},{"id":"420be207-49f8-4a14-86a6-133e51d1e904","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"language":{"data":{"id":"0c3ceaee-af5c-44d2-ab88-87acc929944b","type":"language"}}}},{"id":"1a11d5df-ba90-48cc-868c-ae75d8a8c759","type":"course-language-configurations","attributes":{"alpha-tester-usernames":["JWShroyer"],"release-status":"alpha"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"language":{"data":{"id":"db982ec4-d37d-44c7-abf1-dc76e121daaf","type":"language"}}}},{"id":"45090591-8e28-470d-b2ff-7c034a377012","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"language":{"data":{"id":"4cd22891-8eaa-4f67-8b58-30b0403e59aa","type":"language"}}}},{"id":"de5b4c5a-9736-49ed-8cbb-43d8c24247db","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"language":{"data":{"id":"8ee02441-697a-4e6d-8015-44e472b0c1b8","type":"language"}}}},{"id":"7f9efcab-92ac-47e0-b56d-f1602080c96c","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"14b48251-1145-42ce-aa51-cca9f1928b5f","type":"course"}},"language":{"data":{"id":"16121c66-8a81-452d-8c3a-f9fa221e7936","type":"language"}}}},{"id":"ba8bd309-d5c2-4cd8-bb02-6b807a3007f1","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension you'll add [persistence][redis-persistence] support to your Redis implementation.\n\nAlong the way you'll learn about Redis's [RDB file format][rdb-file-format] and more.\n\n[redis-persistence]: https://redis.io/docs/manual/persistence/\n[rdb-file-format]: https://github.com/sripathikrishnan/redis-rdb-tools/blob/548b11ec3c81a603f5b321228d07a61a0b940159/docs/RDB_File_Format.textile\n","name":"RDB Persistence","position":1,"slug":"persistence-rdb"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}}}},{"id":"814de3a8-3096-4ff2-a095-3c7321401203","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension you'll add support for [Replication][redis-replication] to your Redis implementation.\n\nAlong the way you'll learn about how Redis's leader-follower replication works, the [PSYNC][redis-psync-command] command and more.\n\n[redis-replication]: https://redis.io/docs/management/replication/\n[redis-psync-command]: https://redis.io/commands/psync/\n","name":"Replication","position":2,"slug":"replication"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}}}},{"id":"4741d8fa-a14e-4216-aff9-67fc565e80fd","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension you'll add support for [Transactions][redis-transactions] to your Redis implementation.\n\nAlong the way, you'll learn about the [MULTI][multi-command], [EXEC][exec-command], and [DISCARD][discard-command] commands, as well as how Redis handles transactions atomically.\n\n[redis-transactions]: https://redis.io/docs/latest/develop/interact/transactions/\n[multi-command]: https://redis.io/commands/multi/\n[exec-command]: https://redis.io/commands/exec/\n[discard-command]: https://redis.io/commands/discard/","name":"Transactions","position":4,"slug":"transactions"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}}}},{"id":"f3799dc0-a8a2-436a-97a3-03dee6a3ef29","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension you'll add support for the [Stream][redis-streams-data-type] data type to your Redis implementation.\n\nAlong the way you'll learn about commands like [XADD][xadd-command], [XRANGE][xrange-command] and more.\n\n[redis-streams-data-type]: https://redis.io/docs/data-types/streams/\n[xadd-command]: https://redis.io/commands/xadd/\n[xrange-command]: https://redis.io/commands/xrange/","name":"Streams","position":3,"slug":"streams"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}}}},{"id":"d957009e-11d3-49a0-a5e5-858764a804d6","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":5,"go":96,"cpp":6,"nim":null,"php":2,"zig":3,"dart":null,"java":33,"mojo":null,"odin":null,"ruby":3,"rust":72,"gleam":null,"ocaml":null,"scala":1,"swift":null,"csharp":8,"elixir":1,"fsharp":null,"kotlin":2,"python":63,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":28,"typescript":12},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for reading multiple keys from an RDB file.\n\nThe tester will create an RDB file with multiple keys and execute your program like this:\n\n```bash\n$ ./your_program.sh --dir \u003cdir\u003e --dbfilename \u003cfilename\u003e\n```\n\nIt'll then send a `KEYS *` command to your server.\n\n```bash\n$ redis-cli KEYS \"*\"\n```\n\nThe response to `KEYS *` should be a RESP array with the keys as elements.\n\nFor example, let's say the RDB file contains two keys: `foo` and `bar`. The expected response will be:\n\n```\n*2\\r\\n$3\\r\\nfoo\\r\\n$3\\r\\nbar\\r\\n\n```\n\n- `*2\\r\\n` indicates that the array has two elements\n- `$3\\r\\nfoo\\r\\n` indicates that the first element is a bulk string with the value `foo`\n- `$3\\r\\nbar\\r\\n` indicates that the second element is a bulk string with the value `bar`\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for reading multiple keys from an RDB file. You'll do this by extending the `KEYS *` command to support multiple keys.\n","name":"Read multiple keys","position":11,"position-within-course":11,"position-within-extension":4,"primary-extension-slug":"persistence-rdb","secondary-extension-slugs":[],"slug":"jw4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"d05f8785-6b11-4ee8-86dc-8bc68c1a8dfd","type":"course-stages","attributes":{"approved-comments-count":8,"community-solution-counts":{"c":355,"go":2820,"cpp":504,"nim":null,"php":76,"zig":153,"dart":null,"java":930,"mojo":null,"odin":null,"ruby":163,"rust":2872,"gleam":56,"ocaml":16,"scala":32,"swift":null,"csharp":477,"elixir":161,"fsharp":null,"kotlin":66,"python":1575,"racket":null,"clojure":47,"crystal":10,"haskell":67,"reasonml":null,"commonlisp":null,"javascript":663,"typescript":234},"concept-slugs":["network-protocols","tcp-overview","go-tcp-server","rust-tcp-server","python-tcp-server"],"description-markdown-template":"In this stage, you'll respond to multiple\n[PING](https://redis.io/commands/ping) commands sent by the same connection.\n\nA Redis server starts to listen for the next command as soon as it's done responding to the previous one. This allows\nRedis clients to send multiple commands using the same connection.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then send multiple PING commands using the same connection. For example, it might send:\n\n```bash\n$ echo -e \"PING\\nPING\" | redis-cli\n```\n\nThe tester will expect to receive multiple `+PONG\\r\\n` responses (one for each command sent).\n\n{{#lang_is_javascript}}\nIn most languages, you'd need to run a loop that reads input from a connection and sends a\nresponse back. In JavaScript however, if you're listening to the\n[`data`](https://nodejs.org/api/net.html#net_event_data) event, this should be automatically handled for you. **It\nis very likely that the code you had for the previous stage will pass this stage without any changes!**\n{{/lang_is_javascript}}\n\n{{^lang_is_javascript}}\nYou'll need to run a loop that reads input from a connection and sends a\nresponse back.\n{{/lang_is_javascript}}\n\n### Notes\n\n- Just like the previous stage, you can hardcode `+PONG\\r\\n` as the response for this stage. We'll get to parsing\n client input in later stages.\n- The PING commands will be sent using the same connection. We'll get to handling multiple connections in later stages.","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll respond to multiple\n[PING](https://redis.io/commands/ping) commands sent by the same client.","name":"Respond to multiple PINGs","position":3,"position-within-course":3,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"wy1","tester-source-code-url":"https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_ping_pong.go#L35"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"0cb57a50-22ff-4292-9c34-8b6a86a1ed2d","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":40,"go":642,"cpp":93,"nim":null,"php":10,"zig":19,"dart":null,"java":175,"mojo":null,"odin":null,"ruby":19,"rust":533,"gleam":32,"ocaml":5,"scala":6,"swift":null,"csharp":60,"elixir":43,"fsharp":null,"kotlin":16,"python":340,"racket":null,"clojure":6,"crystal":3,"haskell":9,"reasonml":null,"commonlisp":null,"javascript":146,"typescript":105},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for responding to the [INFO](https://redis.io/commands/info/) command as a master.\n\nThe `INFO` command returns information and statistics about a Redis server. In this stage, we'll add support for the `replication` section of the `INFO` command.\n\n### The replication section\n\nWhen you run the `INFO` command against a Redis server, you'll see something like this:\n\n```\n$ redis-cli INFO replication\n# Replication\nrole:master\nconnected_slaves:0\nmaster_replid:8371b4fb1155b71f4a04d3e1bc3e18c4a990aeeb\nmaster_repl_offset:0\nsecond_repl_offset:-1\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:\n```\n\nThe reply to this command is a [Bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings) where each line is a key value pair, separated by \":\".\n\nHere are what some of the important fields mean:\n\n- `role`: The role of the server (`master` or `slave`)\n- `connected_slaves`: The number of connected replicas\n- `master_replid`: The replication ID of the master (we'll get to this in later stages)\n- `master_repl_offset`: The replication offset of the master (we'll get to this in later stages)\n\nIn this stage, you'll only need to support the `role` key. We'll add support for other keys in later stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port \u003cPORT\u003e\n```\n\nIt'll then send the `INFO` command with `replication` as an argument.\n\n```bash\n$ redis-cli -p \u003cPORT\u003e info replication\n```\n\nYour program should respond with a [Bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings) where each line\nis a key value pair separated by `:`. The tester will only look for the `role` key, and assert that the value is `master`.\n\n### Notes\n\n- In the response for the `INFO` command, you only need to support the `role` key for this stage. We'll add support for the other keys in later stages.\n- The `# Replication` heading in the response is optional, you can ignore it.\n- The response to `INFO` needs to be encoded as a [Bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings).\n  - An example valid response would be `$11\\r\\nrole:master\\r\\n` (the string `role:master` encoded as a [Bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings))\n- The `INFO` command can be used without any arguments, in which case it returns all sections available. In this stage, we'll\n  always send `replication` as an argument to the `INFO` command, so you only need to support the `replication` section.\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for the INFO command on the master.\n","name":"The INFO command","position":15,"position-within-course":15,"position-within-extension":2,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"ye5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"e8014b7b-294f-4a32-8e01-abe1edd05a76","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":6,"go":131,"cpp":17,"nim":null,"php":1,"zig":4,"dart":null,"java":46,"mojo":null,"odin":null,"ruby":3,"rust":106,"gleam":null,"ocaml":1,"scala":null,"swift":null,"csharp":6,"elixir":4,"fsharp":null,"kotlin":3,"python":68,"racket":null,"clojure":null,"crystal":null,"haskell":2,"reasonml":null,"commonlisp":null,"javascript":22,"typescript":10},"concept-slugs":[],"description-markdown-template":"**🚧 We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\n\u003c!--\nIn this stage you will implement WAIT, when some replicas are connected to Master, and there have been commands propagated from master to replica. So the offset is NOT 0. In this case, the Master has to figure out how many replicas the previous write command has been successfully propagated to.\n(The replicas will finish the sync handshake with Master, and process any commands you send it, but they WON'T send periodic ACKs, so you need to basically send a REPLCONF GETACK to get their current offset. )\n--\u003e\n\n### Tests\n\nThe tester will execute your program as a master like this:\n\n```\n./your_program.sh\n```\n\nIt'll then start **multiple** replicas that connect to your server. Each will complete the handshake and expect to receive an empty RDB file.\n\nThe tester will then connect to your master as a Redis client (not one of the replicas) and send multiple write commands interleaved\nwith `WAIT` commands:\n\n```bash\n$ redis-cli SET foo 123\n$ redis-cli WAIT 1 500 # (must wait until either 1 replica has processed previous commands or 500ms have passed)\n\n$ redis-cli SET bar 456\n$ redis-cli WAIT 2 500 # (must wait until either 2 replicas have processed previous commands or 500ms have passed)\n```\n\n### Notes\n\n- The `WAIT` command should return when either (a) the specified number of replicas have acknowledged the command, or (b) the timeout expires.\n- The `WAIT` command should always return the number of replicas that have acknowledged the command, even if the timeout expires.\n- The returned number of replicas might be lesser than or greater than the expected number of replicas specified in the `WAIT` command.\n","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll finish implementing the WAIT command on your master.\n","name":"WAIT with multiple commands","position":31,"position-within-course":31,"position-within-extension":18,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"na2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"60597a54-c9a0-4236-b213-dbf13bac60e8","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":7,"go":129,"cpp":24,"nim":null,"php":2,"zig":3,"dart":null,"java":43,"mojo":null,"odin":null,"ruby":2,"rust":101,"gleam":3,"ocaml":2,"scala":1,"swift":null,"csharp":9,"elixir":5,"fsharp":null,"kotlin":3,"python":69,"racket":null,"clojure":1,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":36,"typescript":6},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend your implementation to support propagating commands to multiple replicas.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port \u003cPORT\u003e\n```\n\nIt'll then start **multiple** replicas that connect to your server and execute the following commands:\n\n1. `PING` (expecting `+PONG\\r\\n` back)\n2. `REPLCONF listening-port \u003cPORT\u003e` (expecting `+OK\\r\\n` back)\n3. `REPLCONF capa psync2` (expecting `+OK\\r\\n` back)\n4. `PSYNC ? -1` (expecting `+FULLRESYNC \u003cREPL_ID\u003e 0\\r\\n` back)\n\nEach replica will expect to receive an RDB file from the master after the handshake is complete.\n\nIt'll then send `SET` commands to the master from a client (a separate Redis client, not the replicas).\n\n```bash\n$ redis-cli SET foo 1\n$ redis-cli SET bar 2\n$ redis-cli SET baz 3\n```\n\nIt'll then assert that each replica received those commands, in order.\n","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll complete your implementation of Redis replication.\n","name":"Multi Replica Command Propagation","position":25,"position-within-course":25,"position-within-extension":12,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"hd5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"50c19ea5-8e08-4aaf-9113-8d92414b68b5","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":39,"go":609,"cpp":89,"nim":null,"php":8,"zig":17,"dart":null,"java":162,"mojo":null,"odin":null,"ruby":18,"rust":507,"gleam":29,"ocaml":4,"scala":5,"swift":null,"csharp":54,"elixir":40,"fsharp":null,"kotlin":14,"python":322,"racket":null,"clojure":6,"crystal":3,"haskell":7,"reasonml":null,"commonlisp":null,"javascript":121,"typescript":101},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend your [INFO](https://redis.io/commands/info/) command to run on a replica.\n\n### The `--replicaof` flag\n\nBy default, a Redis server assumes the \"master\" role. When the `--replicaof` flag is passed, the server assumes the \"slave\" role instead.\n\nHere's an example usage of the `--replicaof` flag:\n\n```\n./your_program.sh --port 6380 --replicaof \"localhost 6379\"\n```\n\nIn this example, we're starting a Redis server in replica mode. The server itself will listen for connections on port 6380, but it'll\nalso connect to a master (another Redis server) running on localhost port 6379 and replicate all changes from the master.\n\nWe'll learn more about how this replication works in later stages. For now, we'll focus on adding support for the `--replicaof` flag, and\nextending the `INFO` command to support returning `role: slave` when the server is a replica.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port \u003cPORT\u003e --replicaof \"\u003cMASTER_HOST\u003e \u003cMASTER_PORT\u003e\"\n```\n\nIt'll then send the `INFO` command with `replication` as an argument to your server.\n\n```bash\n$ redis-cli -p \u003cPORT\u003e info replication\n```\n\nYour program should respond with a [Bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings) where each line\nis a key value pair separated by `:`. The tester will only look for the `role` key, and assert that the value is `slave`.\n\n### Notes\n\n- Your program still needs to pass the previous stage tests, so if `--replicaof` isn't specified, you should default to the `master` role.\n- Just like the last stage, you only need to support the `role` key in the response for this stage. We'll add support for the other keys in later stages.\n- You don't need to actually connect to the master server specified via `--replicaof` in this stage. We'll get to that in later stages.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for the --replicaof arg and INFO command on the replica.\n","name":"The INFO command on a replica","position":16,"position-within-course":16,"position-within-extension":3,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"hc6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"b93e1af8-d7eb-44da-9440-2a33fe920965","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":2,"go":66,"cpp":6,"nim":null,"php":null,"zig":1,"dart":null,"java":16,"mojo":null,"odin":null,"ruby":5,"rust":38,"gleam":1,"ocaml":1,"scala":null,"swift":null,"csharp":4,"elixir":2,"fsharp":null,"kotlin":5,"python":29,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":10,"typescript":6},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for the `EXEC` command when the `MULTI` command has not been called.\n\n### The EXEC command\n\nThe [EXEC](https://redis.io/docs/latest/commands/exec/) command executes all commands queued in a transaction.\n\nIt returns an array of the responses of the queued commands.\n\nExample usage:\n\n```bash\n$ redis-cli\n\u003e MULTI\nOK\n\u003e SET foo 41\nQUEUED\n\u003e INCR foo\nQUEUED\n\u003e EXEC\n1) OK\n2) (integer) 42\n```\n\n### EXEC without MULTI\n\nIf `EXEC` is executed without having called `MULTI`, it returns an error.\n\nExample usage:\n\n```bash\n$ redis-cli EXEC\n(error) ERR EXEC without MULTI\n```\n\nThe returned value is a [Simple error](https://redis.io/docs/latest/develop/reference/protocol-spec/#simple-errors), the\nexact bytes are `-ERR EXEC without MULTI\\r\\n`.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client and run the following commands:\n\n```bash\n$ redis-cli EXEC\n```\n\nThe tester will expect \"-ERR EXEC without MULTI\\r\\n\" as the response.\n\n### Notes\n\n- In this stage you only need to implement `EXEC` when `MULTI` hasn't been called.\n- We'll test handling `EXEC` after `MULTI` in later stages.\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll start implementing the EXEC command.\n","name":"The EXEC command","position":49,"position-within-course":49,"position-within-extension":5,"primary-extension-slug":"transactions","secondary-extension-slugs":[],"slug":"lo4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"0de30170-2ef7-4c8b-b6e9-8f20cf455b74","type":"course-stages","attributes":{"approved-comments-count":10,"community-solution-counts":{"c":78,"go":1304,"cpp":177,"nim":null,"php":20,"zig":48,"dart":null,"java":377,"mojo":null,"odin":null,"ruby":60,"rust":1099,"gleam":57,"ocaml":7,"scala":13,"swift":null,"csharp":151,"elixir":87,"fsharp":null,"kotlin":30,"python":775,"racket":null,"clojure":12,"crystal":5,"haskell":23,"reasonml":null,"commonlisp":null,"javascript":353,"typescript":236},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for setting a key with an expiry.\n\nThe expiry for a key can be provided using the \"PX\" argument to the [SET](https://redis.io/commands/set) command. The expiry is provided in milliseconds.\n\n```bash\n$ redis-cli SET foo bar px 100 # Sets the key \"foo\" to \"bar\" with an expiry of 100 milliseconds\nOK\n```\n\nAfter the key has expired, a `GET` command for that key should return a \"null bulk string\" (`$-1\\r\\n`).\n\n{{#lang_is_haskell}}\nThe [time](https://hackage.haskell.org/package/time) package is available\nto use as a dependency.\n{{/lang_is_haskell}}\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then send a `SET` command to your server to set a key with an expiry:\n\n```bash\n$ redis-cli SET foo bar px 100\n```\n\nIt'll then immediately send a `GET` command to retrieve the value:\n\n```bash\n$ redis-cli GET foo\n```\n\nIt'll expect the response to be `bar` (encoded as a RESP bulk string).\n\nIt'll then wait for the key to expire and send another `GET` command:\n\n```bash\n$ sleep 0.2 \u0026\u0026 redis-cli GET foo\n```\n\nIt'll expect the response to be `$-1\\r\\n` (a \"null bulk string\").\n\n### Notes\n\n- Just like command names, command arguments are also case-insensitive. So `PX`, `px` and `pX` are all valid.\n- The keys, values and expiry times used in the tests will be random, so you won't be able to hardcode a response to pass this stage.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for setting a key with an expiry. The\nexpiry is provided using the \"PX\" argument to the\n[SET](https://redis.io/commands/set) command.","name":"Expiry","position":7,"position-within-course":7,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"yz1","tester-source-code-url":"https://github.com/codecrafters-io/redis-tester/blob/master/internal/test_expiry.go"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"5865049b-3a9e-4901-b39e-997d7f946ae2","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":5,"go":71,"cpp":4,"nim":null,"php":1,"zig":2,"dart":null,"java":19,"mojo":null,"odin":null,"ruby":6,"rust":45,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":2,"elixir":3,"fsharp":null,"kotlin":4,"python":53,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":14,"typescript":9},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add extend support to `XREAD` to allow querying multiple streams.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nFirst, an entry will be added to a couple of streams.\n\n```bash\n$ redis-cli XADD stream_key 0-1 temperature 95\n$ redis-cli XADD other_stream_key 0-2 humidity 97\n```\n\nIt'll then send an `XREAD` command to your server with multiple streams.\n\n```bash\n$ redis-cli XREAD streams stream_key other_stream_key 0-0 0-1\n```\n\nYour server should respond with the following:\n\n```text\n*2\\r\\n\n*2\\r\\n\n$10\\r\\nstream_key\\r\\n\n*1\\r\\n\n*2\\r\\n\n$3\\r\\n0-1\\r\\n\n*2\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n95\\r\\n\n*2\\r\\n\n$16\\r\\nother_stream_key\\r\\n\n*1\\r\\n\n*2\\r\\n\n$3\\r\\n0-2\\r\\n\n*2\\r\\n\n$8\\r\\nhumidity\\r\\n\n$2\\r\\n97\\r\\n\n```\n\nThis is the RESP encoded representation of the following.\n\n```json\n[\n  [\n    \"stream_key\",\n    [\n      [\n        \"0-1\",\n        [\n          \"temperature\",\n          \"95\"\n        ]\n      ]\n    ]\n  ],\n  [\n    \"other_stream_key\",\n    [\n      [\n        \"0-2\",\n        [\n          \"humidity\",\n          \"97\"\n        ]\n      ]\n    ]\n  ]\n]\n```\n\n### Notes\n- In the response, the items are separated onto new lines for readability. The tester expects all of these to be in one line.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add extend support to `XREAD` to allow querying multiple streams.\n","name":"Query multiple streams using XREAD","position":41,"position-within-course":41,"position-within-extension":10,"primary-extension-slug":"streams","secondary-extension-slugs":[],"slug":"ru9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"c5812c56-12ef-4236-abc7-52e491ff96dd","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":2,"go":60,"cpp":6,"nim":null,"php":null,"zig":1,"dart":null,"java":17,"mojo":null,"odin":null,"ruby":4,"rust":25,"gleam":1,"ocaml":null,"scala":null,"swift":null,"csharp":6,"elixir":2,"fsharp":null,"kotlin":4,"python":26,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":10,"typescript":4},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for executing a transaction that contains multiple commands.\n\n### Executing a transaction\n\nWhen the [EXEC](https://redis.io/docs/latest/commands/exec/) command is sent within a transaction,\nall commands queued in that transaction are executed.\n\nThe response to [EXEC](https://redis.io/docs/latest/commands/exec/) is an array of the responses of the queued commands.\n\nExample:\n\n```bash\n$ redis-cli\n\u003e MULTI\nOK\n\u003e SET foo 41\nQUEUED\n\u003e INCR foo\nQUEUED\n\u003e EXEC\n1) OK\n2) (integer) 42\n```\n\nIn the above example, `OK` is the response of the `SET` command, and `42` is the response of the `INCR` command.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client, and send multiple commands using the same connection:\n\n```bash\n$ redis-cli MULTI\n\u003e SET foo 6 (expecting \"+QUEUED\\r\\n\")\n\u003e INCR foo (expecting \"+QUEUED\\r\\n\")\n\u003e INCR bar (expecting \"+QUEUED\\r\\n\")\n\u003e GET bar (expecting \"+QUEUED\\r\\n\")\n\u003e EXEC (expecting an array of responses for the queued commands)\n```\n\nSince the transaction was executed, the key `foo` should exist and have the value `7`.\n\nThe tester will verify this by running a GET command:\n\n```bash\n$ redis-cli GET foo (expecting \"7\" encoded as a bulk string)\n```\n","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll implement executing a successful transaction.\n","name":"Executing a transaction","position":52,"position-within-course":52,"position-within-extension":8,"primary-extension-slug":"transactions","secondary-extension-slugs":[],"slug":"fy6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"bcd70ccf-41b5-42db-87a3-e7b619336d3c","type":"course-stages","attributes":{"approved-comments-count":7,"community-solution-counts":{},"concept-slugs":["network-protocols","tcp-overview","go-tcp-server","rust-tcp-server","python-tcp-server"],"description-markdown-template":"In this stage, you'll implement a TCP server that listens on port 6379.\n\n[TCP](https://en.wikipedia.org/wiki/Transmission_Control_Protocol) is the underlying protocol used by protocols like HTTP, SSH and others\nyou're probably familiar with. Redis clients \u0026 servers use TCP to communicate with each other.\n\nDon't worry if you're unfamiliar with the TCP protocol, or what Redis clients \u0026 servers are. You'll learn more about this in the\nnext stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then try to connect to your TCP server on port 6379. If the connection succeeds, you'll pass this stage.\n\n### Notes\n\n- 6379 is the default port that Redis uses.\n- If you already have a Redis server running on your machine and listening on port 6379, you'll see a \"port already in use\" error when running your code. Try stopping the existing Redis server and running your code again.\n\n{{#reader_is_bot}}\n- In this stage, you can assume that you only need to handle a single client. We'll get to handling multiple clients \u0026 multiple requests per client in later stages.\n{{/reader_is_bot}}","difficulty":"very_easy","is-paid":false,"marketing-markdown":"In this stage, you'll start a TCP server on port 6379, which is the\ndefault port that Redis uses.","name":"Bind to a port","position":1,"position-within-course":1,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"jm1","tester-source-code-url":"https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_bind.go#L11"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"be936dce-f863-4441-953a-cf4ba1b043d1","type":"course-stages","attributes":{"approved-comments-count":9,"community-solution-counts":{"c":253,"go":2130,"cpp":362,"nim":null,"php":55,"zig":117,"dart":null,"java":723,"mojo":null,"odin":null,"ruby":125,"rust":2300,"gleam":39,"ocaml":11,"scala":22,"swift":null,"csharp":350,"elixir":142,"fsharp":null,"kotlin":56,"python":1217,"racket":null,"clojure":29,"crystal":9,"haskell":29,"reasonml":null,"commonlisp":null,"javascript":340,"typescript":136},"concept-slugs":["network-protocols","tcp-overview","go-tcp-server","rust-tcp-server","python-tcp-server"],"description-markdown-template":"In this stage, you'll add support for multiple concurrent clients.\n\nIn addition to handling multiple commands from the same client, Redis servers are also designed to handle multiple clients at once.\n\n{{#lang_is_javascript}}\nIn most languages, you'd need to either use threads or implement an\n[Event Loop](https://en.wikipedia.org/wiki/Event_loop) to do this. In JavaScript however, since [the concurrency\nmodel itself is based on an event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop), most\nstandard library functions are designed to support this kind of concurrent behaviour out of the box. **It is very\nlikely that the code you had for the previous stage will pass this stage without any changes!**\n{{/lang_is_javascript}}\n\n{{^lang_is_javascript}}\nTo implement this, you'll need to either use threads, or, if you're feeling\nadventurous, an [Event Loop](https://en.wikipedia.org/wiki/Event_loop) (like\nthe official Redis implementation does).\n{{/lang_is_javascript}}\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then send two PING commands concurrently using two different connections:\n\n```bash\n# These two will be sent concurrently so that we test your server's ability to handle concurrent clients.\n$ redis-cli PING\n$ redis-cli PING\n```\n\nThe tester will expect to receive two `+PONG\\r\\n` responses.\n\n### Notes\n\n- Since the tester client _only_ sends the PING command at the moment, it's okay to\n  ignore what the client sends and hardcode a response. We'll get to parsing\n  client input in later stages.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for multiple concurrent clients to your\nRedis server. To achieve this you'll use an [Event\nLoop](https://en.wikipedia.org/wiki/Event_loop),\nlike the official Redis implementation does.","name":"Handle concurrent clients","position":4,"position-within-course":4,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"zu2","tester-source-code-url":"https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_ping_pong.go#L56"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"b78bedca-aa40-4682-b278-c4f65ec3fb57","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":2,"go":51,"cpp":7,"nim":null,"php":null,"zig":null,"dart":null,"java":12,"mojo":null,"odin":null,"ruby":4,"rust":21,"gleam":1,"ocaml":null,"scala":null,"swift":null,"csharp":5,"elixir":2,"fsharp":null,"kotlin":2,"python":24,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":10,"typescript":7},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for queuing commands within a transaction.\n\n### Queuing commands\n\nAfter [MULTI](https://redis.io/docs/latest/commands/multi/) is executed, any further commands\nfrom a connection are queued until [EXEC](https://redis.io/docs/latest/commands/exec/) is executed.\n\nThe response to all of these commands is `+QUEUED\\r\\n` (That's `QUEUED` encoded as a [Simple String](https://redis.io/docs/latest/develop/reference/protocol-spec/#simple-strings)).\n\nExample:\n\n```bash\n$ redis-cli\n\u003e MULTI\nOK\n\u003e SET foo 41\nQUEUED\n\u003e INCR foo\nQUEUED\n\n... (and so on, until EXEC is executed)\n```\n\nWhen commands are queued, they should not be executed or alter the database in any way.\n\nIn the example above, until `EXEC` is executed, the key `foo` will not exist.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client, and send multiple commands using the same connection:\n\n```bash\n$ redis-cli\n\u003e MULTI\n\u003e SET foo 41 (expecting \"+QUEUED\\r\\n\")\n\u003e INCR foo (expecting \"+QUEUED\\r\\n\")\n```\n\nSince these commands were only \"queued\", the key `foo` should not exist yet. The tester will verify this by creating\nanother connection and sending this command:\n\n```bash\n$ redis-cli GET foo (expecting `$-1\\r\\n` as the response)\n```\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement queueing commands to a transaction.\n","name":"Queueing commands","position":51,"position-within-course":51,"position-within-extension":7,"primary-extension-slug":"transactions","secondary-extension-slugs":[],"slug":"rs9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"18cfe18f-5f5a-483a-af2c-50510bfbb4b4","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":28,"go":401,"cpp":65,"nim":null,"php":6,"zig":7,"dart":null,"java":127,"mojo":null,"odin":null,"ruby":9,"rust":327,"gleam":16,"ocaml":1,"scala":2,"swift":null,"csharp":36,"elixir":19,"fsharp":null,"kotlin":11,"python":220,"racket":null,"clojure":4,"crystal":2,"haskell":4,"reasonml":null,"commonlisp":null,"javascript":81,"typescript":52},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for receiving the [`PSYNC`](https://redis.io/commands/psync/) command from the replica.\n\n### Handshake (continued from previous stage)\n\nAs a recap, there are three parts to the handshake:\n\n- The master receives a `PING` from the replica (You've already implemented this)\n- The master receives `REPLCONF` twice from the replica (You've already implemented this)\n- The master receives `PSYNC` from the replica (**This stage**)\n\nAfter the replica sends `REPLCONF` twice, it'll send a `PSYNC ? -1` command to the master.\n\n- The first argument is `?`\n  - This is the replication ID of the master, it is `?` because this is the first time the replica is connecting to the master.\n- The second argument is `-1`\n  - This is the replication offset, it is `-1` because this is the first time the replica is connecting to the master.\n\nThe final command you receive will look something like this:\n\n```\n*3\\r\\n$5\\r\\nPSYNC\\r\\n$1\\r\\n?\\r\\n$2\\r\\n-1\\r\\n\n```\n\n(That's `[\"PSYNC\", \"?\", \"-1\"]` encoded as a RESP Array)\n\nThe master needs to respond with `+FULLRESYNC \u003cREPL_ID\u003e 0\\r\\n` (\"FULLRESYNC \u003cREPL_ID\u003e 0\" encoded as a RESP Simple String). Here's what\nthe response means:\n\n- `FULLRESYNC` means that the master cannot perform incremental replication with the replica, and will thus start a \"full\" resynchronization.\n- `\u003cREPL_ID\u003e` is the replication ID of the master. You've already set this in the \"Replication ID \u0026 Offset\" stage.\n  - As an example, you can hardcode `8371b4fb1155b71f4a04d3e1bc3e18c4a990aeeb` as the replication ID.\n- `0` is the replication offset of the master. You've already set this in the \"Replication ID \u0026 Offset\" stage.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port \u003cPORT\u003e\n```\n\nIt'll then connect to your TCP server as a replica and execute the following commands:\n\n1. `PING` (expecting `+PONG\\r\\n` back)\n2. `REPLCONF listening-port \u003cPORT\u003e` (expecting `+OK\\r\\n` back)\n3. `REPLCONF capa eof capa psync2` (expecting `+OK\\r\\n` back)\n4. `PSYNC ? -1` (expecting `+FULLRESYNC \u003cREPL_ID\u003e 0\\r\\n` back)\n\n**Notes**:\n\n- In the response, `\u003cREPL_ID\u003e` needs to be replaced with the replication ID of the master which you've initialized in previous stages.\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for accepting PSYNC, and starting a FULLRESYNC.\n","name":"Receive handshake (2/2)","position":22,"position-within-course":22,"position-within-extension":9,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"vm3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"6bea003b-4417-4073-adbe-d94b5cd2aac5","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":39,"go":570,"cpp":82,"nim":null,"php":7,"zig":15,"dart":null,"java":159,"mojo":null,"odin":null,"ruby":16,"rust":475,"gleam":29,"ocaml":4,"scala":6,"swift":null,"csharp":52,"elixir":33,"fsharp":null,"kotlin":13,"python":296,"racket":null,"clojure":5,"crystal":3,"haskell":7,"reasonml":null,"commonlisp":null,"javascript":111,"typescript":91},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend your `INFO` command to return two additional values: `master_replid` and `master_repl_offset`.\n\n### The replication ID and offset\n\nEvery Redis master has a replication ID: it is a large pseudo random string. This is set when the master is booted. Every time\na master instance restarts from scratch, its replication ID is reset.\n\nEach master also maintains a \"replication offset\" corresponding to how many bytes of commands have been added to the replication\nstream. We'll learn more about this offset in later stages. For now, just know that the value starts from `0` when a master is\nbooted and no replicas have connected yet.\n\nIn this stage, you'll initialize a replication ID and offset for your master:\n\n- The ID can be any pseudo random alphanumeric string of 40 characters.\n  - For the purposes of this challenge, you don't need to actually generate a random string, you can hardcode it instead.\n  - As an example, you can hardcode `8371b4fb1155b71f4a04d3e1bc3e18c4a990aeeb` as the replication ID.\n- The offset is to be 0.\n\nThese two values should be returned as part of the INFO command output, under the `master_replid` and `master_repl_offset` keys respectively.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh\n```\n\nIt'll then send the `INFO` command with `replication` as an argument to your server.\n\n```bash\n$ redis-cli INFO replication\n```\n\nYour program should respond with a [Bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings) where each line\nis a key value pair separated by `:`. The tester will look for the following keys:\n\n- `master_replid`, which should be a 40 character alphanumeric string\n- `master_repl_offset`, which should be `0`\n\n### Notes\n\n- Your code should still pass the previous stage tests, so the `role` key still needs to be returned\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for reading a key from an RDB file that contains a single key-value pair. You'll do this by implementing the `KEYS *` command.\n","name":"Initial Replication ID and Offset","position":17,"position-within-course":17,"position-within-extension":4,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"xc1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"eaa21f07-c13b-47a5-b365-0839d534377f","type":"course-stages","attributes":{"approved-comments-count":7,"community-solution-counts":{"c":13,"go":252,"cpp":33,"nim":null,"php":3,"zig":8,"dart":null,"java":93,"mojo":null,"odin":null,"ruby":11,"rust":219,"gleam":7,"ocaml":5,"scala":5,"swift":null,"csharp":26,"elixir":18,"fsharp":null,"kotlin":9,"python":154,"racket":null,"clojure":2,"crystal":null,"haskell":5,"reasonml":null,"commonlisp":null,"javascript":50,"typescript":40},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for reading a single key from an RDB file.\n\n### RDB file format\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n#### RDB file format overview\n\nHere are the different sections of the RDB file, in order:\n\n1.  Header section\n2.  Metadata section\n3.  Database section\n4.  End of file section\n\nRDB files use special encodings to store different types of data. The ones relevant to this stage are \"size encoding\" and \"string encoding.\" These are explained near the end of this page.\n\nThe following breakdown of the RDB file format is based on [Redis RDB File Format](https://rdb.fnordig.de/file_format.html) by Jan-Erik Rediger. We’ve only included the parts that are relevant to this stage.\n\n#### Header section\n\nRDB files begin with a header section, which looks something like this:\n```\n52 45 44 49 53 30 30 31 31  // Magic string + version number (ASCII): \"REDIS0011\".\n```\n\nThe header contains the magic string `REDIS`, followed by a four-character RDB version number. In this challenge, the test RDB files all use version 11. So, the header is always `REDIS0011`.\n\n#### Metadata section\n\nNext is the metadata section. It contains zero or more \"metadata subsections,\" which each specify a single metadata attribute. Here's an example of a metadata subsection that specifies `redis-ver`:\n```\nFA                             // Indicates the start of a metadata subsection.\n09 72 65 64 69 73 2D 76 65 72  // The name of the metadata attribute (string encoded): \"redis-ver\".\n06 36 2E 30 2E 31 36           // The value of the metadata attribute (string encoded): \"6.0.16\".\n```\n\nThe metadata name and value are always string encoded.\n\n#### Database section\n\nNext is the database section. It contains zero or more \"database subsections,\" which each describe a single database. Here's an example of a database subsection:\n```\nFE                       // Indicates the start of a database subsection.\n00                       /* The index of the database (size encoded).\n                            Here, the index is 0. */\n\nFB                       // Indicates that hash table size information follows.\n03                       /* The size of the hash table that stores the keys and values (size encoded).\n                            Here, the total key-value hash table size is 3. */\n02                       /* The size of the hash table that stores the expires of the keys (size encoded).\n                            Here, the number of keys with an expiry is 2. */\n```\n\n```\n00                       /* The 1-byte flag that specifies the value’s type and encoding.\n                            Here, the flag is 0, which means \"string.\" */\n06 66 6F 6F 62 61 72     // The name of the key (string encoded). Here, it's \"foobar\".\n06 62 61 7A 71 75 78     // The value (string encoded). Here, it's \"bazqux\".\n```\n\n```\nFC                       /* Indicates that this key (\"foo\") has an expire,\n                            and that the expire timestamp is expressed in milliseconds. */\n15 72 E7 07 8F 01 00 00  /* The expire timestamp, expressed in Unix time,\n                            stored as an 8-byte unsigned long, in little-endian (read right-to-left).\n                            Here, the expire timestamp is 1713824559637. */\n00                       // Value type is string.\n03 66 6F 6F              // Key name is \"foo\".\n03 62 61 72              // Value is \"bar\".\n```\n\n```\nFD                       /* Indicates that this key (\"baz\") has an expire,\n                            and that the expire timestamp is expressed in seconds. */\n52 ED 2A 66              /* The expire timestamp, expressed in Unix time,\n                            stored as an 4-byte unsigned integer, in little-endian (read right-to-left).\n                            Here, the expire timestamp is 1714089298. */\n00                       // Value type is string.\n03 62 61 7A              // Key name is \"baz\".\n03 71 75 78              // Value is \"qux\".\n```\n\nHere's a more formal description of how each key-value pair is stored:\n\n1. Optional expire information (one of the following):\n    * Timestamp in seconds:\n          1.  `FD`\n          2.  Expire timestamp in seconds (4-byte unsigned integer)\n    * Timestamp in milliseconds:\n          1.  `FC`\n          2.  Expire timestamp in milliseconds (8-byte unsigned long)\n2. Value type (1-byte flag)\n3. Key (string encoded)\n4. Value (encoding depends on value type)\n\n#### End of file section\n\nThis section marks the end of the file. It looks something like this:\n```\nFF                       /* Indicates that the file is ending,\n                            and that the checksum follows. */\n89 3b b7 4e f8 0f 77 19  // An 8-byte CRC64 checksum of the entire file.\n```\n\n#### Size encoding\n\nSize-encoded values specify the size of something. Here are some examples:\n- The database indexes and hash table sizes are size encoded.\n- String encoding begins with a size-encoded value that specifies the number of characters in the string.\n- List encoding begins with a size-encoded value that specifies the number of elements in the list.\n\nThe first two bits of a size-encoded value indicate how the value should be parsed. Here's a guide (bits are shown in both hexadecimal and binary):\n```\n/* If the first two bits are 0b00:\n   The size is the remaining 6 bits of the byte.\n   In this example, the size is 10: */\n0A\n00001010\n\n/* If the first two bits are 0b01:\n   The size is the next 14 bits\n   (remaining 6 bits in the first byte, combined with the next byte),\n   in big-endian (read left-to-right).\n   In this example, the size is 700: */\n42 BC\n01000010 10111100\n\n/* If the first two bits are 0b10:\n   Ignore the remaining 6 bits of the first byte.\n   The size is the next 4 bytes, in big-endian (read left-to-right).\n   In this example, the size is 17000: */\n80 00 00 42 68\n10000000 00000000 00000000 01000010 01101000\n\n/* If the first two bits are 0b11:\n   The remaining 6 bits specify a type of string encoding.\n   See string encoding section. */\n```\n\n#### String encoding\n\nA string-encoded value consists of two parts:\n1.  The size of the string (size encoded).\n2.  The string.\n\nHere's an example:\n```\n/* The 0x0D size specifies that the string is 13 characters long.\n   The remaining characters spell out \"Hello, World!\". */\n0D 48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21\n```\n\nFor sizes that begin with `0b11`, the remaining 6 bits indicate a type of string format:\n```\n/* The 0xC0 size indicates the string is an 8-bit integer.\n   In this example, the string is \"123\". */\nC0 7B\n\n/* The 0xC1 size indicates the string is a 16-bit integer.\n   The remaining bytes are in little-endian (read right-to-left).\n   In this example, the string is \"12345\". */\nC1 39 30\n\n/* The 0xC2 size indicates the string is a 32-bit integer.\n   The remaining bytes are in little-endian (read right-to-left),\n   In this example, the string is \"1234567\". */\nC2 87 D6 12 00\n\n/* The 0xC3 size indicates that the string is compressed with the LZF algorithm.\n   You will not encounter LZF-compressed strings in this challenge. */\nC3 ...\n```\n\u003c/details\u003e\n\n\n### The `KEYS` command\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\nThe [`KEYS command`](https://redis.io/docs/latest/commands/keys/) returns all the keys that match a given pattern, as a RESP array:\n```\n$ redis-cli SET foo bar\nOK\n$ redis-cli SET baz qux\nOK\n$ redis-cli KEYS \"f*\"\n1) \"foo\"\n```\n\nWhen the pattern is `*`, the command returns all the keys in the database:\n```\n$ redis-cli KEYS \"*\"\n1) \"baz\"\n2) \"foo\"\n```\n\nIn this stage, you must add support for the `KEYS` command. However, you only need to support the `*` pattern.\n\u003c/details\u003e\n\n### Tests\n\nThe tester will create an RDB file with a single key and execute your program like this:\n```\n$ ./your_program.sh --dir \u003cdir\u003e --dbfilename \u003cfilename\u003e\n```\n\nIt'll then send a `KEYS \"*\"` command to your server.\n```\n$ redis-cli KEYS \"*\"\n```\n\nYour server must respond with a RESP array that contains the key from the RDB file:\n```\n*1\\r\\n$3\\r\\nfoo\\r\\n\n```\n\n### Notes\n\n- The RDB file provided by `--dir` and `--dbfilename` might not exist. If the file doesn't exist, your program must treat the database as empty.\n- RDB files use both little-endian and big-endian to store numbers. See the [MDN article on endianness](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) to learn more.\n- To generate an RDB file, use the [`SAVE` command](https://redis.io/docs/latest/commands/save/).\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for reading a key from an RDB file that contains a single key-value pair. You'll do this by implementing the `KEYS *` command.\n","name":"Read a key","position":9,"position-within-course":9,"position-within-extension":2,"primary-extension-slug":"persistence-rdb","secondary-extension-slugs":[],"slug":"jz6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"d781cafe-db04-4354-86e8-e78a761d0bf0","type":"course-stages","attributes":{"approved-comments-count":3,"community-solution-counts":{"c":19,"go":436,"cpp":65,"nim":null,"php":4,"zig":21,"dart":null,"java":160,"mojo":null,"odin":null,"ruby":17,"rust":360,"gleam":15,"ocaml":4,"scala":6,"swift":null,"csharp":45,"elixir":28,"fsharp":null,"kotlin":16,"python":251,"racket":null,"clojure":2,"crystal":null,"haskell":9,"reasonml":null,"commonlisp":null,"javascript":104,"typescript":90},"concept-slugs":[],"description-markdown-template":"Welcome to the RDB Persistence Extension! In this extension, you'll add support for reading [RDB files](https://redis.io/docs/management/persistence/) (Redis Database files).\n\nIn this stage, you'll add support for two configuration parameters related to RDB persistence, as well as the [CONFIG GET](https://redis.io/docs/latest/commands/config-get/) command.\n\n### RDB files\n\nAn RDB file is a point-in-time snapshot of a Redis dataset. When RDB persistence is enabled, the Redis server syncs its in-memory state with an RDB file, by doing the following:\n\n1. On startup, the Redis server loads the data from the RDB file.\n2. While running, the Redis server periodically takes new snapshots of the dataset, in order to update the RDB file.\n\n### `dir` and `dbfilename`\n\nThe configuration parameters `dir` and `dbfilename` specify where an RDB file is stored:\n- `dir` - the path to the directory where the RDB file is stored (example: `/tmp/redis-data`)\n- `dbfilename` - the name of the RDB file (example: `rdbfile`)\n\n### The `CONFIG GET` command\n\nThe [`CONFIG GET`](https://redis.io/docs/latest/commands/config-get/) command returns the values of configuration parameters.\n\nIt takes in one or more configuration parameters and returns a [RESP array](https://redis.io/docs/latest/develop/reference/protocol-spec/#arrays) of key-value pairs:\n\n```bash\n$ redis-cli CONFIG GET dir\n1) \"dir\"\n2) \"/tmp/redis-data\"\n```\n\nAlthough `CONFIG GET` can fetch multiple parameters at a time, the tester will only send `CONFIG GET` commands with one parameter at a time.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh --dir /tmp/redis-files --dbfilename dump.rdb\n```\n\nIt'll then send the following commands:\n\n```bash\n$ redis-cli CONFIG GET dir\n$ redis-cli CONFIG GET dbfilename\n```\n\nYour server must respond to each `CONFIG GET` command with a RESP array containing two elements:\n\n1. The parameter **name**, encoded as a [RESP Bulk string](https://redis.io/docs/latest/develop/reference/protocol-spec/#bulk-strings)\n2. The parameter **value**, encoded as a RESP Bulk string\n\nFor example, if the value of `dir` is `/tmp/redis-files`, then the expected response to `CONFIG GET dir` is:\n\n```bash\n*2\\r\\n$3\\r\\ndir\\r\\n$16\\r\\n/tmp/redis-files\\r\\n\n```\n\n### Notes\n\n- You don't need to read the RDB file in this stage, you only need to store `dir` and `dbfilename`. Reading from the file will be covered in later stages.\n- If your repository was created before 5th Oct 2023, it's possible that your `./your_program.sh` script is not passing arguments to your program. To fix this, you'll need to edit `./your_program.sh`. Check the [update CLI args PR](https://github.com/codecrafters-io/build-your-own-redis/pull/89/files) for details on how to do this.\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for reading the config values related to where RDB files are stored. You'll implement the `CONFIG GET` command.\n","name":"RDB file config","position":8,"position-within-course":8,"position-within-extension":1,"primary-extension-slug":"persistence-rdb","secondary-extension-slugs":[],"slug":"zg5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"21a54409-7e6e-420f-b16a-6e3323a0bc7f","type":"course-stages","attributes":{"approved-comments-count":3,"community-solution-counts":{"c":11,"go":191,"cpp":22,"nim":null,"php":1,"zig":6,"dart":null,"java":60,"mojo":null,"odin":null,"ruby":6,"rust":182,"gleam":5,"ocaml":2,"scala":4,"swift":null,"csharp":19,"elixir":14,"fsharp":null,"kotlin":9,"python":113,"racket":null,"clojure":2,"crystal":null,"haskell":5,"reasonml":null,"commonlisp":null,"javascript":32,"typescript":24},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for reading values that have an expiry set.\n\nThe tester will create an RDB file with multiple keys. Some of these keys will have an expiry set, and some won't. The expiry timestamps\nwill also be random, some will be in the past and some will be in the future.\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh --dir \u003cdir\u003e --dbfilename \u003cfilename\u003e\n```\n\nIt'll then send multiple `GET \u003ckey\u003e` commands to your server.\n\n```bash\n$ redis-cli GET \"foo\"\n$ redis-cli GET \"bar\"\n```\n\nWhen a key has expired, the expected response is `$-1\\r\\n` (a \"null bulk string\").\n\nWhen a key hasn't expired, the expected response is a RESP bulk string with the value corresponding to the key.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for reading values that have an expiry set.\n","name":"Read value with expiry","position":13,"position-within-course":13,"position-within-extension":6,"primary-extension-slug":"persistence-rdb","secondary-extension-slugs":[],"slug":"sm4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"a33a85ce-472e-4ebf-a0fe-cef5fc0852df","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":4,"go":87,"cpp":8,"nim":null,"php":2,"zig":2,"dart":null,"java":25,"mojo":null,"odin":null,"ruby":5,"rust":68,"gleam":null,"ocaml":1,"scala":null,"swift":null,"csharp":6,"elixir":2,"fsharp":null,"kotlin":4,"python":58,"racket":null,"clojure":null,"crystal":null,"haskell":1,"reasonml":null,"commonlisp":null,"javascript":18,"typescript":10},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend support to `XREAD` to allow for turning it into a blocking command.\n\n### Understanding blocking\n\n`BLOCK` is one of the optional parameters that could be passed in to the `XREAD` command.\n\nWithout blocking, the current implementation of our command is synchronous. This means that the command can get new data as long as there are items available.\n\nIf we want to wait for new data coming in, we need blocking.\n\nHere's how it works.\n\nLet's use the entries previously shown as an example.\n\n```yaml\nentries:\n  - id: 1526985054069-0 # (ID of the first entry)\n    temperature: 36 # (A key value pair in the first entry)\n    humidity: 95 # (Another key value pair in the first entry)\n\n  - id: 1526985054079-0 # (ID of the second entry)\n    temperature: 37 # (A key value pair in the first entry)\n    humidity: 94 # (Another key value pair in the first entry)\n\n  # ... (and so on)\n```\n\nOn one instance of the redis-cli, we'd add an entry and send  a blocking `XREAD` command.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 1000 streams some_key 1526985054069-0\n```\n\nThen, on another instance of the redis-cli, we add another entry.\n\n```bash\n$ other-redis-cli XADD some_key 1526985054079-0 temperature 37 humidity 94\n\"1526985054079-0\"\n```\n\nIf the command was sent within 1000 milliseconds, the redis-cli will respond with the added entry.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 1000 streams some_key 1526985054069-0\n1) 1) \"some_key\"\n   2) 1) 1) 1526985054079-0\n         2) 1) temperature\n            2) 37\n            3) humidity\n            4) 94\n```\n\nIf not, the response would be a null representation of a bulk string.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 1000 streams some_key 1526985054069-0\n(nil)\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nFirst, an entry will be added to a stream.\n\n```bash\n$ redis-cli XADD stream_key 0-1 temperature 96\n```\n\nIt'll then send an `XREAD` command to your server with the `BLOCK` command.\n\n```bash\n$ redis-cli XREAD block 1000 streams stream_key 0-1\n```\n\nOn another instance of the redis-cli, another entry will be added in 500 milliseconds after sending the `XREAD` command.\n\n```bash\n$ redis-cli XADD stream_key 0-2 temperature 95\n```\n\nYour server should respond with the following:\n\n```text\n*1\\r\\n\n*2\\r\\n\n$10\\r\\stream_key\\r\\n\n*1\\r\\n\n*2\\r\\n\n$3\\r\\n0-2\\r\\n\n*2\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n96\\r\\n\n```\n\nThis is the RESP encoded representation of the following.\n\n```json\n[\n  [\n    \"stream_key\",\n    [\n      \"0-2\",\n      [\n        \"temperature\",\n        \"96\"\n      ]\n    ]\n  ]\n]\n```\n\nIt'll send another `XREAD` command to your server with the `BLOCK` command but this time, it'll wait for 2000 milliseconds before checking the response of your server.\n\n```bash\n$ redis-cli XREAD block 1000 streams stream_key 0-2\n```\n\nYour server should respond with `$-1\\r\\n` which is a `null` representation of a RESP bulk string.\n\n### Notes\n- In the response, the items are separated onto new lines for readability. The tester expects all of these to be in one line.\n","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll add extend support to `XREAD` to allow querying multiple streams.\n","name":"Blocking reads","position":42,"position-within-course":42,"position-within-extension":11,"primary-extension-slug":"streams","secondary-extension-slugs":[],"slug":"bs1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"2da8be61-1a94-44d6-8256-ed08eb3728a7","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":3,"go":79,"cpp":9,"nim":null,"php":null,"zig":2,"dart":null,"java":24,"mojo":null,"odin":null,"ruby":5,"rust":51,"gleam":1,"ocaml":1,"scala":null,"swift":null,"csharp":8,"elixir":2,"fsharp":null,"kotlin":5,"python":34,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":13,"typescript":7},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for the `INCR` command.\n\n### The INCR command\n\nThe [INCR](https://redis.io/docs/latest/commands/incr/) command is used to increment the value of a key by 1.\n\nExample usage:\n\n```bash\n$ redis-cli SET foo 5\n\"OK\"\n$ redis-cli INCR foo\n(integer) 6\n$ redis-cli INCR foo\n(integer) 7\n```\n\nIf the key doesn't exist, the value will be set to 1.\n\nWe'll split the implementation of this command into three stages:\n\n- Key exists and has a numerical value (**This stage**)\n- Key doesn't exist (later stages)\n- Key exists but doesn't have a numerical value (later stages)\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client and run the following commands:\n\n```bash\n$ redis-cli\n\u003e SET foo 41 (expecting \"+OK\" as the response)\n\u003e INCR foo (expecting \":42\\r\\n\" as the response)\n```\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll start implementing the INCR command.\n","name":"The INCR command (1/3)","position":45,"position-within-course":45,"position-within-extension":1,"primary-extension-slug":"transactions","secondary-extension-slugs":[],"slug":"si4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"1f7c3b4e-1ae7-42d5-8a69-e6aeff2d80d4","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":3,"go":61,"cpp":3,"nim":null,"php":null,"zig":1,"dart":null,"java":16,"mojo":null,"odin":null,"ruby":5,"rust":27,"gleam":null,"ocaml":1,"scala":null,"swift":null,"csharp":2,"elixir":1,"fsharp":null,"kotlin":5,"python":28,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":12,"typescript":6},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for handling the `INCR` command when a key exists but doesn't have a numerical value.\n\n### Recap\n\nThe implementation of [`INCR`](https://redis.io/docs/latest/commands/incr/) is split into three stages:\n\n- Key exists and has a numerical value (previous stages)\n- Key doesn't exist (previous stages)\n- Key exists but doesn't have a numerical value (**This stage**)\n\nWhen a key exists but doesn't have a numerical value, `INCR` will return an error. Example:\n\n```bash\n$ redis-cli SET foo xyz\n\"OK\"\n$ redis-cli INCR foo\n(error) ERR value is not an integer or out of range\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client and run the following commands:\n\n```bash\n$ redis-cli\n\u003e SET foo xyz (expecting \"+OK\\r\\n\" as the response)\n\u003e INCR foo (expecting \"-ERR value is not an integer or out of range\\r\\n\" as the response)\n```\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll finish implementing the INCR command.\n","name":"The INCR command (3/3)","position":47,"position-within-course":47,"position-within-extension":3,"primary-extension-slug":"transactions","secondary-extension-slugs":[],"slug":"mk1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"f6f86066-6625-407c-9be6-b042512d4bbf","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":2,"go":70,"cpp":7,"nim":null,"php":null,"zig":1,"dart":null,"java":21,"mojo":null,"odin":null,"ruby":5,"rust":41,"gleam":1,"ocaml":1,"scala":null,"swift":null,"csharp":5,"elixir":2,"fsharp":null,"kotlin":4,"python":27,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":12,"typescript":6},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for the DISCARD command.\n\n### The DISCARD command\n\n[DISCARD](https://redis.io/docs/latest/commands/discard/) is used to abort a transactions. It discards all commands queued in a transaction,\nand returns `+OK\\r\\n`.\n\nExample:\n\n```bash\n$ redis-cli\n\u003e MULTI\nOK\n\u003e SET foo 41\nQUEUED\n\u003e DISCARD\nOK\n\u003e DISCARD\n(error) ERR DISCARD without MULTI\n```\n\nIn the above example, note that the first `DISCARD` returns `OK`, but the second `DISCARD` returns an error since the transaction was aborted.\n\n### DISCARD\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client, and send multiple commands using the same connection:\n\n```bash\n$ redis-cli\n\u003e MULTI\n\u003e SET foo 41 (expecting \"+QUEUED\\r\\n\")\n\u003e INCR foo (expecting \"+QUEUED\\r\\n\")\n\u003e DISCARD (expecting \"+OK\\r\\n\")\n\u003e GET foo (expecting \"$-1\\r\\n\" as the response)\n\u003e DISCARD (expecting \"-ERR DISCARD without MULTI\\r\\n\" as the response)\n```\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll implement the DISCARD command.\n","name":"The DISCARD command","position":53,"position-within-course":53,"position-within-extension":9,"primary-extension-slug":"transactions","secondary-extension-slugs":[],"slug":"rl9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"d9f4d7fc-fd07-48a6-929c-e464bc225354","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":null,"go":5,"cpp":1,"nim":null,"php":null,"zig":null,"dart":null,"java":6,"mojo":null,"odin":null,"ruby":4,"rust":3,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":4,"elixir":1,"fsharp":null,"kotlin":2,"python":5,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":2,"typescript":2},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for multiple concurrent transactions.\n\n### Multiple transactions\n\nThere can be multiple transactions open (i.e. `MULTI` has been called, but `EXEC` has not been called yet) at the same time. Each\ntransaction gets its own command queue.\n\nFor example, say you started transaction 1 from one connection:\n\n```bash\n$ redis-cli\n\u003e MULTI\nOK\n\u003e SET foo 41\nQUEUED\n\u003e INCR foo\nQUEUED\n```\n\nand started transaction 2 from another connection:\n\n```bash\n$ redis-cli\n\u003e MULTI\nOK\n\u003e INCR foo\nQUEUED\n```\n\nIf you then run `EXEC` in transaction 1, you should see the following:\n\n```bash\n\u003e EXEC\n1) OK\n2) (integer) 42\n```\n\n`OK` is the response to `SET foo 41`, and `42` is the response to `INCR foo`.\n\nAnd for transaction 2, running `EXEC` should return:\n\n```bash\n\u003e EXEC\n1) (integer) 43\n```\n\n43 is the response to `INCR foo`. The key `foo` was updated to `42` by transaction 1, and `INCR foo` further increments it to `43`.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as multiple Redis clients, and send multiple commands from each connection:\n\n```bash\n$ redis-cli MULTI\n\u003e INCR foo\n\u003e EXEC\n```\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement multiple concurrent transactions.\n","name":"Multiple transactions","position":55,"position-within-course":55,"position-within-extension":11,"primary-extension-slug":"transactions","secondary-extension-slugs":[],"slug":"jf8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"a20d9772-2831-49a8-b7e6-19c0a0337c11","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":21,"go":364,"cpp":61,"nim":null,"php":4,"zig":9,"dart":null,"java":94,"mojo":null,"odin":null,"ruby":11,"rust":264,"gleam":12,"ocaml":2,"scala":3,"swift":null,"csharp":30,"elixir":16,"fsharp":null,"kotlin":9,"python":187,"racket":null,"clojure":3,"crystal":2,"haskell":3,"reasonml":null,"commonlisp":null,"javascript":57,"typescript":43},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for propagating write commands to a single replica as a master.\n\n### Command propagation\n\nAfter the replication handshake is complete and the master has sent the RDB file to the replica, the\nmaster starts propagating commands to the replica.\n\nWhen a master receives a \"write\" command from a client, it propagates the command to the replica. The\nreplica processes the command and updates its state. More on how this propagation works in the\n\"Replication connection\" section below.\n\nCommands like `PING`, `ECHO` etc. are not considered \"write\" commands, so they aren't propagated. Commands like\n`SET`, `DEL` etc. are considered \"write\" commands, so they are propagated.\n\n### Replication connection\n\nCommand propagation happens over the replication connection. This is the same connection that was used for the handshake.\n\nPropagated commands are sent as RESP arrays. For example, if the master receives `SET foo bar` as a command from a client,\nit'll send `*3\\r\\n$3\\r\\nSET\\r\\n$3\\r\\nfoo\\r\\n$3\\r\\nbar\\r\\n` to all connected replicas over their respective replication connections.\n\nReplicas process commands received over the replication connection just like they would process commands received from a client,\nbut with one difference: Replicas don't send responses back to the master. They just process the command silently and update their\nstate.\n\nSimilarly, the master doesn't wait for a response from the replica when propagating commands. It just keeps sending commands as they\ncome in.\n\nThere is one exception to this \"no response\" rule, the `REPLCONF GETACK` command. We'll learn about this in later stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port \u003cPORT\u003e\n```\n\nIt'll then connect to your TCP server as a replica and execute the following commands:\n\n1. `PING` (expecting `+PONG\\r\\n` back)\n2. `REPLCONF listening-port \u003cPORT\u003e` (expecting `+OK\\r\\n` back)\n3. `REPLCONF capa eof capa psync2` (expecting `+OK\\r\\n` back)\n4. `PSYNC ? -1` (expecting `+FULLRESYNC \u003cREPL_ID\u003e 0\\r\\n` back)\n\nThe tester will then wait for your server to send an RDB file.\n\nOnce the RDB file is received, the tester will send series of write commands to your program (as a separate Redis client, not the replica).\n\n```bash\n$ redis-cli SET foo 1\n$ redis-cli SET bar 2\n$ redis-cli SET baz 3\n```\n\nIt'll then assert that these commands were propagated to the replica, in order. The tester will\nexpect to receive these commands (encoded as RESP arrays) on the replication connection (the one used for the handshake).\n\n### Notes\n\n- A true implementation would buffer the commands so that they can be sent to the replica after it loads the RDB file. For the\n  purposes of this challenge, you can assume that the replica is ready to receive commands immediately after receiving the RDB file.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for finishing the sync handshake from the master side, by sending a RDB file.\n","name":"Single-replica propagation","position":24,"position-within-course":24,"position-within-extension":11,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"zn8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"89567813-ac65-471e-91f3-63bccdbd604f","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":1,"go":12,"cpp":2,"nim":null,"php":null,"zig":null,"dart":null,"java":6,"mojo":null,"odin":null,"ruby":2,"rust":3,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":2,"elixir":null,"fsharp":null,"kotlin":3,"python":12,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":4,"typescript":1},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for handling failures within a transaction.\n\n### Failures within transactions\n\nWhen executing a transaction, if a command fails, the error is captured and returned within the response for `EXEC`. All other commands in\nthe transaction are still executed.\n\nYou can read more about this behaviour [in the official Redis docs](https://redis.io/docs/latest/develop/interact/transactions/#errors-inside-a-transaction).\n\nExample:\n\n```bash\n$ redis-cli\n\u003e MULTI\nOK\n\u003e SET foo xyz\nQUEUED\n\u003e INCR foo\nQUEUED\n\u003e SET bar 7\n\u003e EXEC\n1) OK\n2) (error) ERR value is not an integer or out of range\n3) OK\n```\n\nIn the example above, note that the error for the `INCR` command was returned as the second array element. The third command (`SET bar 7`) was\nstill executed successfully.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client, and send multiple commands using the same connection:\n\n```bash\n$ redis-cli\n\u003e SET foo abc\nOK\n\u003e SET bar 41\nOK\n\u003e MULTI\nOK\n\u003e INCR foo\nQUEUED\n\u003e INCR bar\nQUEUED\n\u003e EXEC\n1) (error) ERR value is not an integer or out of range\n2) (integer) 42\n```\n\nThe expected response for `EXEC` is a [RESP array](https://redis.io/docs/latest/develop/reference/protocol-spec/#arrays) of\nthe responses of the queued commands. The exact bytes will be:\n\n```bash\n*2\\r\\n-ERR value is not an integer or out of range\\r\\n:42\\r\\n\n```\n\nThe tester will also verify that the last command was successfully executed and that the key `bar` exists:\n\n```bash\n$ redis-cli\n\u003e GET foo (expecting \"$3\\r\\nabc\\r\\n\" as the response)\n\u003e GET bar (expecting \"$2\\r\\n42\\r\\n\" as the response)\n```\n\n### Notes\n\n- There are a subset of command failures (like syntax errors) that will cause a transaction to be aborted entirely. We won't\n  cover those in this challenge.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement handling failures while executing a transaction.\n","name":"Failures within transactions","position":54,"position-within-course":54,"position-within-extension":10,"primary-extension-slug":"transactions","secondary-extension-slugs":[],"slug":"sg9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"0935950c-3566-4685-9eaf-6583cfef0f7c","type":"course-stages","attributes":{"approved-comments-count":11,"community-solution-counts":{"c":729,"go":4916,"cpp":1101,"nim":null,"php":221,"zig":270,"dart":null,"java":2432,"mojo":null,"odin":null,"ruby":304,"rust":4916,"gleam":316,"ocaml":36,"scala":81,"swift":null,"csharp":1008,"elixir":328,"fsharp":null,"kotlin":127,"python":3542,"racket":null,"clojure":89,"crystal":22,"haskell":113,"reasonml":null,"commonlisp":null,"javascript":2056,"typescript":980},"concept-slugs":["network-protocols","tcp-overview","go-tcp-server","rust-tcp-server","python-tcp-server"],"description-markdown-template":"In this stage, you'll implement support for the [PING](https://redis.io/commands/ping) command.\n\nRedis clients communicate with Redis servers by sending \"[commands](https://redis.io/commands/)\". For each command, a Redis server sends a response back to the client.\nCommands and responses are both encoded using the [Redis protocol](https://redis.io/topics/protocol) (we'll learn more about this in later stages).\n\n[PING](https://redis.io/commands/ping/) is one of the simplest Redis commands. It's used to check whether a Redis server is healthy.\n\nThe response for the `PING` command is `+PONG\\r\\n`. This is the string \"PONG\" encoded using the [Redis protocol](https://redis.io/docs/reference/protocol-spec/).\n\nIn this stage, we'll cut corners by ignoring client input and hardcoding `+PONG\\r\\n` as a response. We'll learn to parse client input in later stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then send a `PING` command to your server and expect a `+PONG\\r\\n` response.\n\n```bash\n$ redis-cli PING\n```\n\nYour server should respond with `+PONG\\r\\n`, which is \"PONG\" encoded as a [RESP simple string](https://redis.io/docs/reference/protocol-spec/#resp-simple-strings).\n\n### Notes\n\n- You can ignore the data that the tester sends you for this stage. We'll get to parsing\nclient input in later stages. For now, you can just hardcode `+PONG\\r\\n` as the response.\n- You can also ignore handling multiple clients and handling multiple PING commands in the stage, we'll get to that in later stages.\n- The exact bytes your program will receive won't be just `PING`, you'll receive something like this: `*1\\r\\n$4\\r\\nPING\\r\\n`,\nwhich is the Redis protocol encoding of the `PING` command. We'll learn more about this in later stages.","difficulty":"easy","is-paid":false,"marketing-markdown":"In this stage, you'll respond to the\n[PING](https://redis.io/commands/ping) command. You'll use [the Redis\nprotocol](https://redis.io/topics/protocol) to encode the reply.\n","name":"Respond to PING","position":2,"position-within-course":2,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"rg2","tester-source-code-url":"https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_ping_pong.go#L9"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"338ce517-2e10-40b7-b12b-39a0b385b913","type":"course-stages","attributes":{"approved-comments-count":3,"community-solution-counts":{"c":11,"go":187,"cpp":26,"nim":null,"php":1,"zig":5,"dart":null,"java":57,"mojo":null,"odin":null,"ruby":7,"rust":165,"gleam":1,"ocaml":2,"scala":null,"swift":null,"csharp":13,"elixir":7,"fsharp":null,"kotlin":6,"python":103,"racket":null,"clojure":null,"crystal":null,"haskell":2,"reasonml":null,"commonlisp":null,"javascript":36,"typescript":18},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend your `REPLCONF GETACK` implementation to respond with the number of bytes of commands processed by the replica.\n\n### Offset tracking\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n  As we saw in previous stages, when a replica receives a command from the master, it processes it and updates its state. In addition to processing\n  commands, the replica also keeps a running count of the number of bytes of commands it has processed.\n\n  This count is called the \"offset\". When a master sends a `REPLCONF GETACK` command to a replica, the replica is expected to respond with\n  `REPLCONF ACK \u003coffset\u003e`. The returned `\u003coffset\u003e` should only include the number of bytes of commands processed **before** receiving the `REPLCONF GETACK` command.\n\n  As an example:\n\n  - Let's say a replica connects to a master and completes the handshake.\n  - The master then sends a `REPLCONF GETACK *` command.\n      - The replica should respond with `REPLCONF ACK 0`.\n      - The returned offset is 0 since no commands have been processed yet (before receiving the `REPLCONF GETACK` command)\n  - The master then sends `REPLCONF GETACK *` again.\n      - The replica should respond with `REPLCONF ACK 37`.\n      - The returned offset is 37 since the first `REPLCONF GETACK` command was processed, and it was 37 bytes long.\n      - The RESP encoding for the `REPLCONF GETACK` command looks like this: ``*3\\r\\n$8\\r\\nreplconf\\r\\n$6\\r\\ngetack\\r\\n$1\\r\\n*\\r\\n` (that's 37 bytes long)\n  - The master then sends a `PING` command to the replica (masters do this periodically to notify replicas that the master is still alive).\n      - The replica must silently process the `PING` command and update its offset. It should not send a response back to the master.\n  - The master then sends `REPLCONF GETACK *` again (this is the third REPLCONF GETACK command received by the replica)\n      - The replica should respond with `REPLCONF ACK 88`.\n      - The returned offset is 88 (37 + 37 + 14)\n          - 37 for the first `REPLCONF GETACK` command\n          - 37 for the second `REPLCONF GETACK` command\n          - 14 for the `PING` command\n      - Note that the third `REPLCONF GETACK` command is not included in the offset, since the value should\n      only include the number of bytes of commands processed **before** receiving the current `REPLCONF GETACK` command.\n  - ... and so on\n\n\u003c/details\u003e\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port \u003cPORT\u003e --replicaof \"\u003cHOST\u003e \u003cPORT\u003e\"\n```\n\nJust like in the previous stages, your replica should complete the handshake with the master and receive an empty RDB file.\n\nThe master will then propagate a series of commands to your replica. These commands will be interleaved with `REPLCONF GETACK *` commands.\n\n```bash\nREPLCONF getack * # expecting REPLCONF ACK 0, since 0 bytes have been processed\n\nping # master sending a ping command to notify the replica that it's still alive\nREPLCONF getack * # expecting REPLCONF ACK 51 (37 for the first REPLCONF command + 14 for the ping command)\n\nset foo 1 # propagated from master to replica\nset bar 2 # propagated from master to replica\nREPLCONF getack * # expecting REPLCONF ACK 109 (51 + 29 for the first set command + 29 for the second set command)\n```\n\n### Notes\n\n- The offset should only include the number of bytes of commands processed **before** receiving the current `REPLCONF GETACK` command.\n- Although masters don't propagate `PING` commands when received from clients (since they aren't \"write\" commands),\n  they may send `PING` commands to replicas to notify replicas that the master is still alive.\n- Replicas should update their offset to account for **all** commands propagated from the master, including `PING` and `REPLCONF` itself.\n- The response should be encoded as a [RESP Array](https://redis.io/docs/reference/protocol-spec/#arrays), like\n  this: `*3\\r\\n$8\\r\\nREPLCONF\\r\\n$3\\r\\nACK\\r\\n$3\\r\\n154\\r\\n`.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for returning an ACK back to master as a response to GETACK.\n","name":"ACKs with commands","position":28,"position-within-course":28,"position-within-extension":15,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"yd3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"604ad62c-3e30-4f13-bf7d-05e690417df8","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":34,"go":502,"cpp":76,"nim":null,"php":7,"zig":12,"dart":null,"java":144,"mojo":null,"odin":null,"ruby":14,"rust":424,"gleam":23,"ocaml":2,"scala":5,"swift":null,"csharp":44,"elixir":30,"fsharp":null,"kotlin":12,"python":263,"racket":null,"clojure":5,"crystal":3,"haskell":6,"reasonml":null,"commonlisp":null,"javascript":94,"typescript":71},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement part 2 of the handshake that happens when a replica connects to master.\n\n### Handshake (continued from previous stage)\n\nAs a recap, there are three parts to the handshake:\n\n- The replica sends a `PING` to the master (Previous stage)\n- The replica sends `REPLCONF` twice to the master (**This stage**)\n- The replica sends `PSYNC` to the master (Next stage)\n\nAfter receiving a response to `PING`, the replica then sends 2 [REPLCONF](https://redis.io/commands/replconf/) commands to the master.\n\nThe `REPLCONF` command is used to configure replication. Replicas will send this command to the master twice:\n\n- The first time, it'll be sent like this: `REPLCONF listening-port \u003cPORT\u003e`\n  - This is the replica notifying the master of the port it's listening on\n- The second time, it'll be sent like this: `REPLCONF capa psync2`\n  - This is the replica notifying the master of its capabilities (\"capa\" is short for \"capabilities\")\n  - You can safely hardcode these capabilities for now, we won't need to use them in this challenge.\n\nThese commands should be sent as RESP Arrays, so the exact bytes will look something like this:\n\n```\n# REPLCONF listening-port \u003cPORT\u003e\n*3\\r\\n$8\\r\\nREPLCONF\\r\\n$14\\r\\nlistening-port\\r\\n$4\\r\\n6380\\r\\n\n\n# REPLCONF capa psync2\n*3\\r\\n$8\\r\\nREPLCONF\\r\\n$4\\r\\ncapa\\r\\n$6\\r\\npsync2\\r\\n\n```\n\nFor both commands, the master will respond with `+OK\\r\\n` (\"OK\" encoded as a RESP Simple String).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port \u003cPORT\u003e --replicaof \"\u003cMASTER_HOST\u003e \u003cMASTER_PORT\u003e\"\n```\n\nIt'll then assert that the replica connects to the master and:\n\n- **(a)** sends the `PING` command\n- **(b)** sends the `REPLCONF` command with `listening-port` and `\u003cPORT\u003e` as arguments\n- **(c)** sends the `REPLCONF` command with `capa psync2` as arguments\n\n**Notes**\n\n- The response to `REPLCONF` will always be `+OK\\r\\n` (\"OK\" encoded as a RESP Simple String)\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for continuing the handshake from the Replica side, by sending REPLCONF.\n","name":"Send handshake (2/3)","position":19,"position-within-course":19,"position-within-extension":6,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"eh4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"b158ca17-db53-41d6-8355-c8ea0448a884","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":7,"go":114,"cpp":9,"nim":null,"php":2,"zig":3,"dart":null,"java":33,"mojo":null,"odin":null,"ruby":7,"rust":86,"gleam":1,"ocaml":1,"scala":null,"swift":null,"csharp":7,"elixir":4,"fsharp":null,"kotlin":4,"python":64,"racket":null,"clojure":null,"crystal":null,"haskell":1,"reasonml":null,"commonlisp":null,"javascript":21,"typescript":11},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for validating entry IDs to the `XADD` command.\n\n### Entry IDs\n\nHere's an example of stream entries from the previous stage:\n\n```yaml\nentries:\n  - id: 1526985054069-0 # (ID of the first entry)\n    temperature: 36 # (A key value pair in the first entry)\n    humidity: 95 # (Another key value pair in the first entry)\n\n  - id: 1526985054079-0 # (ID of the second entry)\n    temperature: 37 # (A key value pair in the first entry)\n    humidity: 94 # (Another key value pair in the first entry)\n\n  # ... (and so on)\n```\n\nEntry IDs are always composed of two integers: `\u003cmillisecondsTime\u003e-\u003csequenceNumber\u003e`.\n\nEntry IDs are unique within a stream, and they're guaranteed to be incremental - i.e. an\nentry added later will always have an ID greater than an entry added in the past. More\non this in the next section.\n\n### Specifying entry IDs in XADD\n\nThere are multiple formats in which the ID can be specified in the XADD command:\n\n- Explicit (\"1526919030474-0\") (**This stage**)\n- Auto-generate only sequence number (\"1526919030474-*\") (Next stages)\n- Auto-generate time part and sequence number (\"*\") (Next stages)\n\nIn this stage, we'll only deal with explicit IDs. We'll add support for the other two cases in the next stages.\n\nYour XADD implementation should validate the ID passed in.\n\n- The ID should be greater than the ID of the last entry in the stream.\n  - The `millisecondsTime` part of the ID should be greater than or equal to the `millisecondsTime` of the last entry.\n  - If the `millisecondsTime` part of the ID is equal to the `millisecondsTime` of the last entry, the `sequenceNumber` part of the ID should be greater than the `sequenceNumber` of the last entry.\n- If the stream is empty, the ID should be greater than `0-0`\n\nHere's an example of adding an entry with a valid ID followed by an invalid ID:\n\n```bash\n$ redis-cli XADD some_key 1-1 foo bar\n\"1-1\"\n$ redis-cli XADD some_key 1-1 bar baz\n(error) ERR The ID specified in XADD is equal or smaller than the target stream top item\n```\n\nHere's another such example:\n\n```bash\n$ redis-cli XADD some_key 1-1 foo bar\n\"1-1\"\n$ redis-cli XADD some_key 0-2 bar baz\n(error) ERR The ID specified in XADD is equal or smaller than the target stream top item\n```\n\nThe minimum entry ID that Redis supports is 0-1. Passing in an ID lower than should result in an error.\n\n```bash\n$ redis-cli XADD some_key 0-0 bar baz\n(error) ERR The ID specified in XADD must be greater than 0-0\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll create a few entries usind `XADD`.\n\n```bash\n$ redis-cli XADD stream_key 1-1 foo bar\n\"1-1\"\n$ redis-cli XADD stream_key 1-2 bar baz\n\"1-2\"\n```\n\nIt'll send another `XADD` command with the same time and sequence number as the last entry.\n\n```bash\n$ redis-cli XADD stream_key 1-2 baz foo\n(error) ERR The ID specified in XADD is equal or smaller than the target stream top item\n```\n\nYour server should respond with \"-ERR The ID specified in XADD is equal or smaller than the target stream top item\\r\\n\", which is the error message above encoded as a\n[simple error](https://redis.io/docs/reference/protocol-spec/#simple-errors).\n\nThe tester will then send another `XADD` command with a smaller value for the time and a larger value for the sequence number.\n\n```bash\n$ redis-cli XADD stream_key 0-3 baz foo\n(error) ERR The ID specified in XADD is equal or smaller than the target stream top item\n```\n\nYour server should also respond with the same error message.\n\nAfter that, the tester will send another `XADD` command with `0-0` as the ID.\n\n```bash\n$ redis-cli XADD stream_key 0-0 baz foo\n```\n\nYour server should respond with \"-ERR The ID specified in XADD must be greater than 0-0\\r\\n\", which is the error message above encoded as a\n[RESP simple error](https://redis.io/docs/reference/protocol-spec/#simple-errors).\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll enhance the `XADD` command by extending support for explicit IDs.\n","name":"Validating entry IDs","position":34,"position-within-course":34,"position-within-extension":3,"primary-extension-slug":"streams","secondary-extension-slugs":[],"slug":"hq8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"8eebd154-e24d-454a-bac7-985f539083fb","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":2,"go":75,"cpp":8,"nim":null,"php":null,"zig":2,"dart":null,"java":21,"mojo":null,"odin":null,"ruby":5,"rust":44,"gleam":null,"ocaml":1,"scala":null,"swift":null,"csharp":6,"elixir":2,"fsharp":null,"kotlin":5,"python":31,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":11,"typescript":7},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for the `MULTI` command.\n\n### The MULTI command\n\nThe [MULTI](https://redis.io/docs/latest/commands/multi/) command starts a transaction.\n\nAfter a `MULTI` command is executed, any further commands from the same connection will be \"queued\" but not executed.\n\nExample usage:\n\n```bash\n$ redis-cli\n\u003e MULTI\nOK\n\u003e SET foo 41\nQUEUED\n\u003e INCR foo\nQUEUED\n```\n\nThe queued commands can be executed using [EXEC](https://redis.io/docs/latest/commands/exec/), which we'll cover in later stages.\n\nIn this stage, you'll just add support for handling the `MULTI` command and returning `+OK\\r\\n`. We'll get to queueing commands in later stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client and run the following command:\n\n```bash\n$ redis-cli MULTI\n```\n\nThe tester will expect `+OK\\r\\n` as the response.\n\n### Notes\n\n- We'll test queueing commands \u0026 executing a transaction in later stages.\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll implement the MULTI command.\n","name":"The MULTI command","position":48,"position-within-course":48,"position-within-extension":4,"primary-extension-slug":"transactions","secondary-extension-slugs":[],"slug":"pn0","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"a44742f0-2121-4ae7-b68e-15bc04f13b19","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":101,"go":1458,"cpp":206,"nim":null,"php":25,"zig":54,"dart":null,"java":462,"mojo":null,"odin":null,"ruby":75,"rust":1259,"gleam":74,"ocaml":7,"scala":14,"swift":null,"csharp":170,"elixir":99,"fsharp":null,"kotlin":38,"python":846,"racket":null,"clojure":14,"crystal":4,"haskell":28,"reasonml":null,"commonlisp":null,"javascript":409,"typescript":254},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for the [SET](https://redis.io/commands/set) \u0026\n[GET](https://redis.io/commands/get) commands.\n\nThe `SET` command is used to set a key to a value. The `GET` command is used to retrieve the value of a key.\n\n```bash\n$ redis-cli SET foo bar\nOK\n$ redis-cli GET foo\nbar\n```\n\nThe `SET` command supports a number of extra options like `EX` (expiry time in seconds), `PX` (expiry time in milliseconds) and more. We\nwon't cover these extra options in this stage. We'll get to them in later stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a `SET` command to your server:\n\n```bash\n$ redis-cli SET foo bar\n```\n\nThe tester will expect to receive `+OK\\r\\n` as a response (that's the string `OK` encoded as a [RESP simple string](https://redis.io/docs/reference/protocol-spec/#resp-simple-strings)).\n\nThis command will be followed by a `GET` command:\n\n```bash\n$ redis-cli GET foo\n```\n\nThe tester will expect to receive `$3\\r\\nbar\\r\\n` as a response (that's the string `bar` encoded as a [RESP bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings).\n\n### Notes\n\n- If you implemented a proper Redis protocol parser in the previous stage, you should be able to reuse it in this stage.\n- Just like the previous stage, the values used for keys and values will be random, so you won't be able to hardcode the response to pass this stage.\n- If a key doesn't exist, the `GET` command should return a \"null bulk string\" (`$-1\\r\\n`). We won't explicitly test this in this stage, but you'll need it for the next stage (expiry).","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll need to implement the\n[SET](https://redis.io/commands/set) \u0026\n[GET](https://redis.io/commands/get) commands.","name":"Implement the SET \u0026 GET commands","position":6,"position-within-course":6,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"la7","tester-source-code-url":"https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_get_set.go#L11"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"8db3b652-eb27-4187-b94e-0be9b5141d86","type":"course-stages","attributes":{"approved-comments-count":7,"community-solution-counts":{"c":129,"go":1659,"cpp":235,"nim":null,"php":27,"zig":68,"dart":null,"java":528,"mojo":null,"odin":null,"ruby":82,"rust":1503,"gleam":93,"ocaml":7,"scala":16,"swift":null,"csharp":203,"elixir":115,"fsharp":null,"kotlin":40,"python":932,"racket":null,"clojure":13,"crystal":5,"haskell":34,"reasonml":null,"commonlisp":null,"javascript":490,"typescript":279},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for the [ECHO](https://redis.io/commands/echo) command.\n\n`ECHO` is a command like `PING` that's used for testing and debugging. It accepts a single argument and returns it back as a\nRESP bulk string.\n\n```bash\n$ redis-cli PING # The command you implemented in previous stages\nPONG\n$ redis-cli ECHO hey # The command you'll implement in this stage\nhey\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then send an `ECHO` command with an argument to your server:\n\n```bash\n$ redis-cli ECHO hey\n```\n\nThe tester will expect to receive `$3\\r\\nhey\\r\\n` as a response (that's the string `hey` encoded as a [RESP bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings).\n\n### Notes\n\n- We suggest that you implement a proper Redis protocol parser in this stage. It'll come in handy in later stages.\n- Redis command names are case-insensitive, so `ECHO`, `echo` and `EcHo` are all valid commands.\n- The tester will send a random string as an argument to the `ECHO` command, so you won't be able to hardcode the response to pass this stage.\n- The exact bytes your program will receive won't be just `ECHO hey`, you'll receive something like this: `*2\\r\\n$4\\r\\nECHO\\r\\n$3\\r\\nhey\\r\\n`. That's\n  `[\"ECHO\", \"hey\"]` encoded using the [Redis protocol](https://redis.io/docs/reference/protocol-spec/).\n- You can read more about how \"commands\" are handled in the Redis protocol [here](https://redis.io/docs/reference/protocol-spec/#sending-commands-to-a-redis-server).","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll respond to the\n[ECHO](https://redis.io/commands/echo) command. You'll parse user input\naccording to the [the Redis protocol\nspecification](https://redis.io/topics/protocol).","name":"Implement the ECHO command","position":5,"position-within-course":5,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"qq0","tester-source-code-url":"https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_echo.go#L11"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"6eabe1cd-e995-4f62-b952-a5fc043c3f88","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":7,"go":130,"cpp":14,"nim":null,"php":2,"zig":5,"dart":null,"java":36,"mojo":null,"odin":null,"ruby":7,"rust":105,"gleam":1,"ocaml":1,"scala":null,"swift":null,"csharp":10,"elixir":4,"fsharp":null,"kotlin":4,"python":72,"racket":null,"clojure":null,"crystal":null,"haskell":2,"reasonml":null,"commonlisp":null,"javascript":23,"typescript":12},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for the `TYPE` command.\n\n### The TYPE command\n\nThe [TYPE](https://redis.io/commands/type/) command returns the type of value stored at a given key.\n\nIt returns one of the following types: string, list, set, zset, hash, and stream.\n\nHere's how it works:\n\n```bash\n$ redis-cli SET some_key foo\n\"OK\"\n$ redis-cli TYPE some_key\n\"string\"\n```\n\nIf a key doesn't exist, the return value will be \"none\".\n\n```bash\n$ redis-cli TYPE missing_key\n\"none\"\n```\n\nThe return value is encoded as a [simple string](https://redis.io/docs/reference/protocol-spec/#simple-strings).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then send a `SET` command to your server.\n\n```bash\n$ redis-cli SET some_key foo\n```\n\nIt'll then send a `TYPE` command to your server.\n\n```bash\n$ redis-cli TYPE some_key\n```\n\nYour server should respond with `+string\\r\\n`, which is `string` encoded as a [RESP simple string](https://redis.io/docs/reference/protocol-spec/#simple-strings).\n\nIt'll then send another `TYPE` command with a missing key.\n\n```bash\n$ redis-cli TYPE missing_key\n```\n\nYour server should respond with `+none\\r\\n`, which is `none` encoded as a [RESP simple string](https://redis.io/docs/reference/protocol-spec/#simple-strings).\n\n### Notes\n\n- For now, you only need to handle the \"string\" and \"none\" types. We'll add support for the \"stream\" type in the next stage.\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for the `TYPE` command.\n","name":"The TYPE command","position":32,"position-within-course":32,"position-within-extension":1,"primary-extension-slug":"streams","secondary-extension-slugs":[],"slug":"cc3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"34b20d69-c126-4413-a3ee-4c814954722e","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":2,"go":64,"cpp":6,"nim":null,"php":null,"zig":1,"dart":null,"java":18,"mojo":null,"odin":null,"ruby":5,"rust":31,"gleam":1,"ocaml":1,"scala":null,"swift":null,"csharp":5,"elixir":2,"fsharp":null,"kotlin":5,"python":29,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":11,"typescript":7},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for executing an empty transaction.\n\n### Empty trasactions\n\nIf [EXEC](https://redis.io/docs/latest/commands/exec/) is executed soon after [MULTI](https://redis.io/docs/latest/commands/multi/),\nit returns an empty array.\n\nThe empty array signifies that no commands were queued, and that the transaction was executed successfully.\n\nExample usage:\n\n```bash\n$ redis-cli\n\u003e MULTI\nOK\n\u003e EXEC\n(empty array)\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client and run the following commands:\n\n```bash\n$ redis-cli\n\u003e MULTI (expecting \"+OK\\r\\n\")\n\u003e EXEC (expecting \"*0\\r\\n\" as the response)\n\u003e EXEC (expecting \"-ERR EXEC without MULTI\\r\\n\" as the response)\n```\n","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll implement an empty transaction.\n","name":"Empty transaction","position":50,"position-within-course":50,"position-within-extension":6,"primary-extension-slug":"transactions","secondary-extension-slugs":[],"slug":"we1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"d657d1cf-863c-484c-b65d-6b6e0c0702a2","type":"course-stages","attributes":{"approved-comments-count":3,"community-solution-counts":{"c":14,"go":267,"cpp":42,"nim":null,"php":2,"zig":6,"dart":null,"java":64,"mojo":null,"odin":null,"ruby":10,"rust":197,"gleam":4,"ocaml":1,"scala":null,"swift":null,"csharp":16,"elixir":9,"fsharp":null,"kotlin":7,"python":140,"racket":null,"clojure":1,"crystal":1,"haskell":3,"reasonml":null,"commonlisp":null,"javascript":43,"typescript":30},"concept-slugs":[],"description-markdown-template":"In this stage you'll implement the processing of propagated commands as a replica.\n\n### Command processing\n\nAfter the replica receives a command from the master, it processes it and apply it to its own state. This\nwill work exactly like a regular command sent by a client, except that the replica doesn't send a response\nback to the master.\n\nFor example, if the command `SET foo 1` is propagated to the replica by a master, the replica must update\nits database to set the value of `foo` to `1`. Unlike commands from a regular client though, it must not reply with `+OK\\r\\n`.\n\n### Tests\n\nThe tester will spawn a Redis master, and it'll then execute your program as a replica like this:\n\n```\n./your_program.sh --port \u003cPORT\u003e --replicaof \"\u003cMASTER_HOST\u003e \u003cMASTER_PORT\u003e\"\n```\n\nJust like in the previous stages, your replica should complete the handshake with the master and receive an empty RDB file.\n\nOnce the RDB file is received, the master will propagate a series of write commands to your program.\n\n```bash\nSET foo 1 # propagated from master to replica\nSET bar 2 # propagated from master to replica\nSET baz 3 # propagated from master to replica\n```\n\nThe tester will then issue `GET` commands to your program to check if the commands were processed correctly.\n\n```bash\n$ redis-cli GET foo # expecting `1` back\n$ redis-cli GET bar # expecting `2` back\n# ... and so on\n```\n\n### Notes\n\n- The propagated commands are sent as RESP arrays. So the command `SET foo 1` will be sent as `*3\\r\\n$3\\r\\nSET\\r\\n$3\\r\\nfoo\\r\\n$1\\r\\n1\\r\\n`.\n- It is **not** guaranteed that propagated commands will be sent one at a time. One \"TCP segment\" might contain bytes for multiple commands.\n","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll add support for processing commands received by the replica from the master.\n","name":"Command Processing","position":26,"position-within-course":26,"position-within-extension":13,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"yg4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"883c5d03-9993-4a02-97e8-ca9497d28075","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":7,"go":107,"cpp":9,"nim":null,"php":2,"zig":2,"dart":null,"java":32,"mojo":null,"odin":null,"ruby":7,"rust":86,"gleam":1,"ocaml":1,"scala":null,"swift":null,"csharp":8,"elixir":4,"fsharp":null,"kotlin":4,"python":65,"racket":null,"clojure":null,"crystal":null,"haskell":1,"reasonml":null,"commonlisp":null,"javascript":18,"typescript":10},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend your `XADD` command implementation to support auto-generating the\nsequence number part of the entry ID.\n\n### Specifying entry IDs in XADD\n\nAs a recap, there are multiple formats in which the ID can be specified in the `XADD` command:\n\n- Explicit (\"1526919030473-0\") (Previous stage)\n- Auto-generate only sequence number (\"1526919030474-*\") (**This stage**)\n- Auto-generate time part and sequence number (\"*\") (Next stage)\n\nWe dealt with explicit IDs in the last stage. We'll handle the second case in this stage.\n\nWhen `*` is used for the sequence number, Redis picks the last sequence number used in the\nstream (for the same time part) and increments it by 1.\n\nThe default sequence number is 0. The only exception is when the time part is also 0. In that case, the default sequence number is 1.\n\nHere's an example of adding an entry with `*` as the sequence number:\n\n```bash\n$ redis-cli XADD some_key \"1-*\" foo bar\n\"1-0\" # If there are no entries, the sequence number will be 0\n$ redis-cli XADD some_key \"1-*\" bar baz\n\"1-1\" # Adding another entry will increment the sequence number\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll send an `XADD` command with `*` as the sequence number.\n\n```bash\n$ redis-cli XADD stream_key 0-* foo bar\n```\n\nYour server should respond with `$3\\r\\n0-1\\r\\n`, which is `0-1` encoded as a RESP bulk string.\n\nIt'll then send another `XADD` command with `*` as the sequence number, but this time with a\nrandom number as the time part.\n\n```bash\n$ redis-cli XADD stream_key 5-* foo bar\n```\n\nYour server should respond with `$3\\r\\n5-0\\r\\n`, which is `5-0` encoded as a [RESP bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings)\n\nIt'll send the same command again.\n\n```bash\n$ redis-cli XADD stream_key 5-* bar baz\n```\n\nYour server should respond with `$3\\r\\n5-1\\r\\n`, which is `5-1` encoded as a [RESP bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings)\n\n### Notes\n\n- The tester will use a random number for the time part (we use `5` in the example above).\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll enhance the `XADD` command by adding the option to use `*` as the sequence number.\n","name":"Partially auto-generated IDs","position":35,"position-within-course":35,"position-within-extension":4,"primary-extension-slug":"streams","secondary-extension-slugs":[],"slug":"yh3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"0ff525c9-ab49-4710-8a46-c1a3f4028a2a","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":6,"go":97,"cpp":7,"nim":null,"php":2,"zig":1,"dart":null,"java":26,"mojo":null,"odin":null,"ruby":7,"rust":70,"gleam":1,"ocaml":1,"scala":null,"swift":null,"csharp":7,"elixir":4,"fsharp":null,"kotlin":4,"python":57,"racket":null,"clojure":null,"crystal":null,"haskell":1,"reasonml":null,"commonlisp":null,"javascript":18,"typescript":8},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend your `XADD` command implementation to support auto-generating entry IDs.\n\n### Specifying entry IDs in XADD (Continued...)\n\nAs a recap, there are multiple formats in which the ID can be specified in the `XADD` command:\n\n- Explicit (\"1526919030474-0\") (Previous stages)\n- Auto-generate only sequence number (\"1526919030473-*\") (Previous stages)\n- Auto-generate time part and sequence number (\"*\") (**This stage**)\n\nWe'll now handle the third case.\n\nWhen `*` is used with the `XADD` command, Redis auto-generates a unique auto-incrementing ID for the message being appended to the stream.\n\nRedis defaults to using the current unix time in milliseconds for the time part and 0 for the sequence number. If the\ntime already exists in the stream, the sequence number for that record incremented by one will be used.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then create an entry with `*` as the ID.\n\n```bash\n$ redis-cli XADD stream_key * foo bar\n```\n\nYour server should respond with a string like `$15\\r\\n1526919030474-0\\r\\n`, which is `1526919030474-0` encoded as a RESP bulk string.\n\n### Notes\n\n- The time part of the ID should be the current unix time in **milliseconds**, not seconds.\n- The tester doesn't test the case where a time part already exists in the stream and the sequence\n  number is incremented. This is difficult to test reliably since we'd need to send 2 commands within the same millisecond.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll enhance the `XADD` command by adding the option to use `*` as the entry ID.\n","name":"Fully auto-generated IDs","position":36,"position-within-course":36,"position-within-extension":5,"primary-extension-slug":"streams","secondary-extension-slugs":[],"slug":"xu6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"b1a1b7bb-714f-45ec-83f5-db0c100ec4b7","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":4,"go":71,"cpp":5,"nim":null,"php":2,"zig":2,"dart":null,"java":20,"mojo":null,"odin":null,"ruby":5,"rust":59,"gleam":null,"ocaml":1,"scala":null,"swift":null,"csharp":6,"elixir":1,"fsharp":null,"kotlin":4,"python":49,"racket":null,"clojure":null,"crystal":null,"haskell":1,"reasonml":null,"commonlisp":null,"javascript":13,"typescript":8},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend support to `XREAD` to allow for passing in `$` as the ID for a blocking command.\n\n### Understanding $\n\nUsing `$` as the ID passed to a blocking `XREAD` command signals that we only want new entries. This is similar to passing in the maximum ID we currently have in the stream.\n\nHere's how it works.\n\nLet's use the entries previously shown as an example.\n\n```yaml\nentries:\n  - id: 1526985054069-0 # (ID of the first entry)\n    temperature: 36 # (A key value pair in the first entry)\n    humidity: 95 # (Another key value pair in the first entry)\n\n  - id: 1526985054079-0 # (ID of the second entry)\n    temperature: 37 # (A key value pair in the first entry)\n    humidity: 94 # (Another key value pair in the first entry)\n\n  # ... (and so on)\n```\n\nOn one instance of the redis-cli, we'd add an entry and send a blocking `XREAD` command with `1000` as the time passed in and `$` as the id passed in.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 1000 streams some_key $\n```\n\nThen, on another instance of the redis-cli, we add another entry.\n\n```bash\n$ other-redis-cli XADD some_key 1526985054079-0 temperature 37 humidity 94\n\"1526985054079-0\"\n```\n\nSimilar to the behavior detailed in the earlier stages, if the command was sent within 1000 milliseconds, the redis-cli will respond with the new entry.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 1000 streams some_key 1526985054069-0\n1) 1) \"some_key\"\n   2) 1) 1) 1526985054079-0\n         2) 1) temperature\n            2) 37\n            3) humidity\n            4) 94\n```\n\nIf not, the return type would still be a null representation of a bulk string.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 1000 streams some_key 1526985054069-0\n(nil)\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nFirst, an entry will be added to a stream.\n\n```bash\n$ redis-cli XADD stream_key 0-1 temperature 96\n```\n\nIt'll then send an `XREAD` command to your server with the `BLOCK` command with `0` as the time and `$` as the ID.\n\n```bash\n$ redis-cli XREAD block 0 streams stream_key $\n```\n\nOn another instance of the redis-cli, another entry will be added in 500 milliseconds after sending the `XREAD` command.\n\n```bash\n$ redis-cli XADD stream_key 0-2 temperature 95\n```\n\nYour server should respond with the following:\n\n```text\n*1\\r\\n\n*2\\r\\n\n$10\\r\\stream_key\\r\\n\n*1\\r\\n\n*2\\r\\n\n$3\\r\\n0-2\\r\\n\n*2\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n96\\r\\n\n```\n\nThis is the RESP encoded representation of the following.\n\n```json\n[\n  [\n    \"stream_key\",\n    [\n      \"0-2\",\n      [\n        \"temperature\",\n        \"95\"\n      ]\n    ]\n  ]\n]\n```\n\nIt'll send another `XREAD` command to your server with the `BLOCK` command but this time, it'll wait for 2000 milliseconds before checking the response of your server.\n\n```bash\n$ redis-cli XREAD block 1000 streams stream_key $\n```\n\nYour server should respond with `$-1\\r\\n` which is a `null` representation of a RESP bulk string.\n\n### Notes\n- In the response, the items are separated onto new lines for readability. The tester expects all of these to be in one line.\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add extend support to `XREAD` to allow for passing in `$` as the ID for a blocking command.\n","name":"Blocking reads using $","position":44,"position-within-course":44,"position-within-extension":13,"primary-extension-slug":"streams","secondary-extension-slugs":[],"slug":"xu1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"bddf03cf-4aed-453d-8739-b9f53467422f","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":6,"go":168,"cpp":19,"nim":null,"php":1,"zig":5,"dart":null,"java":53,"mojo":null,"odin":null,"ruby":5,"rust":148,"gleam":null,"ocaml":1,"scala":null,"swift":null,"csharp":15,"elixir":6,"fsharp":null,"kotlin":5,"python":92,"racket":null,"clojure":null,"crystal":null,"haskell":1,"reasonml":null,"commonlisp":null,"javascript":31,"typescript":16},"concept-slugs":[],"description-markdown-template":"**🚧 We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\n\u003c!--\n\nIn this stage you will implement WAIT, when some replicas are connected to Master, but there have been NO commands propagated from master to replica. So offset is essentially 0. In this case, the Master can just return the count of `connected_slaves` asap.  (The replicas will finish the sync handshake with Master, so they are actually connnected.)\n(The master will return the count of `connected_slaves` no matter how many replicas we pass in the WAIT command parameter. As the offset is 0, it knows all replicas are in sync.)\n\n--\u003e\n\n### Tests\n\nThe tester will execute your program as a master like this:\n\n```\n./your_program.sh\n```\n\nIt'll then start **multiple** replicas that connect to your server. Each will complete the handshake and expect to receive an empty RDB file.\n\nIt'll then connect to your master as a Redis client (not one of the replicas) and send commands like this:\n\n```bash\n$ redis-cli WAIT 3 500 # (expecting 7 back)\n$ redis-cli WAIT 7 500 # (expecting 7 back)\n$ redis-cli WAIT 9 500 # (expecting 7 back)\n```\n\nThe response to each of these commands should be encoded as a RESP integer (i.e. `:7\\r\\n`).\n\n### Notes\n\n- Even if WAIT is called with a number lesser than the number of connected replicas, the master should return the count of connected replicas.\n- The number of replicas created in this stage will be random, so you can't hardcode `7` as the response like in the example above.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll continue implementing the WAIT command on your master.\n","name":"WAIT with no commands","position":30,"position-within-course":30,"position-within-extension":17,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"tu8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"59541572-db0e-43a7-9d38-20a7d73ea92d","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":7,"go":123,"cpp":11,"nim":null,"php":2,"zig":4,"dart":null,"java":33,"mojo":null,"odin":null,"ruby":7,"rust":92,"gleam":1,"ocaml":1,"scala":null,"swift":null,"csharp":7,"elixir":4,"fsharp":null,"kotlin":4,"python":66,"racket":null,"clojure":null,"crystal":null,"haskell":1,"reasonml":null,"commonlisp":null,"javascript":19,"typescript":11},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for creating a [Redis stream](https://redis.io/docs/data-types/streams/) using the `XADD` command.\n\n### Redis Streams \u0026 Entries\n\nStreams are one of the data types that Redis supports. A stream is identified by a key, and it contains multiple entries.\n\nEach entry consists of one or more key-value pairs, and is assigned a unique ID.\n\nFor example, if you were using a Redis stream to store real-time data from a temperature \u0026 humidity monitor, the contents of the stream might look like this:\n\n```yaml\nentries:\n  - id: 1526985054069-0 # (ID of the first entry)\n    temperature: 36 # (A key value pair in the first entry)\n    humidity: 95 # (Another key value pair in the first entry)\n\n  - id: 1526985054079-0 # (ID of the second entry)\n    temperature: 37 # (A key value pair in the first entry)\n    humidity: 94 # (Another key value pair in the first entry)\n\n  # ... (and so on)\n```\n\nWe'll take a closer look at the format of entry IDs (`1526985054069-0` and `1526985054079-0` in the example above) in the upcoming stages.\n\n### The XADD command\n\nThe [XADD](https://redis.io/commands/xadd/) command appends an entry to a stream. If a stream doesn't exist already, it is created.\n\nHere's how it works:\n\n```bash\n$ redis-cli XADD stream_key 1526919030474-0 temperature 36 humidity 95\n\"1526919030474-0\" # (ID of the entry created)\n```\n\nThe return value is the ID of the entry created, encoded as a [bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings).\n\n`XADD` supports other optional arguments, but we won't deal with them in this challenge.\n\n`XADD` also supports auto-generating entry IDs. We'll add support for that in later stages. For now, we'll only deal with\nexplicit IDs (like `1526919030474-0` in the example above).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then send an `XADD` command to your server and expect the ID as a response.\n\n```bash\n$ redis-cli XADD stream_key 0-1 foo bar\n\"0-1\"\n```\n\nYour server should respond with `$3\\r\\n0-1\\r\\n`, which is `0-1` encoded as a [RESP bulk string](https://redis.io/docs/reference/protocol-spec/#bulk-strings).\n\nThe tester will then send a `TYPE` command to your server.\n\n```bash\n$ redis-cli TYPE stream_key\n\"stream\"\n```\n\nYour server should respond with `+stream\\r\\n`, which is `stream` encoded as a [RESP simple string](https://redis.io/docs/reference/protocol-spec/#simple-strings).\n\n### Notes\n\n- You still need to handle the \"string\" and \"none\" return values for the `TYPE` command. \"stream\" should only be returned for keys that are streams.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for creating a [Redis stream](https://redis.io/docs/data-types/streams/) using the `XADD` command.\n","name":"Create a stream","position":33,"position-within-course":33,"position-within-extension":2,"primary-extension-slug":"streams","secondary-extension-slugs":[],"slug":"cf6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"176a7596-6719-4a55-9b79-962a2e19724c","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{"c":31,"go":446,"cpp":67,"nim":null,"php":5,"zig":12,"dart":null,"java":115,"mojo":null,"odin":null,"ruby":13,"rust":364,"gleam":18,"ocaml":2,"scala":5,"swift":null,"csharp":37,"elixir":24,"fsharp":null,"kotlin":12,"python":237,"racket":null,"clojure":4,"crystal":3,"haskell":4,"reasonml":null,"commonlisp":null,"javascript":77,"typescript":54},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for sending an empty RDB file as a master. This is part of the \"full resynchronization\" process.\n\n### Full resynchronization\n\nWhen a replica connects to a master for the first time, it sends a `PSYNC ? -1` command. This is the replica's way of\ntelling the master that it doesn't have any data yet, and needs to be fully resynchronized.\n\nThe master acknowledges this by sending a `FULLRESYNC` response to the replica.\n\nAfter sending the `FULLRESYNC` response, the master will then send a RDB file of its current state to the replica. The replica is expected to load the file into memory, replacing its current state.\n\nFor the purposes of this challenge, you don't have to actually construct an RDB file. We'll assume that the master's database is always empty,\nand just hardcode an empty RDB file to send to the replica.\n\nYou can find the hex representation of an empty RDB file [here](https://github.com/codecrafters-io/redis-tester/blob/main/internal/assets/empty_rdb_hex.md).\n\nThe tester will accept any valid RDB file that is empty, you don't need to send the exact file above.\n\nThe file is sent using the following format:\n\n```\n$\u003clength_of_file\u003e\\r\\n\u003ccontents_of_file\u003e\n```\n\n(This is similar to how [Bulk Strings](https://redis.io/topics/protocol#resp-bulk-strings) are encoded, but without the trailing `\\r\\n`)\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port \u003cPORT\u003e\n```\n\nIt'll then connect to your TCP server as a replica and execute the following commands:\n\n1. `PING` (expecting `+PONG\\r\\n` back)\n2. `REPLCONF listening-port \u003cPORT\u003e` (expecting `+OK\\r\\n` back)\n3. `REPLCONF capa eof capa psync2` (expecting `+OK\\r\\n` back)\n4. `PSYNC ? -1` (expecting `+FULLRESYNC \u003cREPL_ID\u003e 0\\r\\n` back)\n\nAfter receiving a response to the last command, the tester will expect to receive an empty RDB file from your server.\n\n### Notes\n\n- The [RDB file link](https://github.com/codecrafters-io/redis-tester/blob/main/internal/assets/empty_rdb_hex.md) contains hex \u0026 base64 representations\n  of the file. You need to decode these into binary contents before sending it to the replica.\n- The RDB file should be sent like this: `$\u003clength\u003e\\r\\n\u003ccontents\u003e`\n  - `\u003clength\u003e` is the length of the file in bytes\n  - `\u003ccontents\u003e` is the contents of the file\n  - Note that this is NOT a RESP bulk string, it doesn't contain a `\\r\\n` at the end\n- If you want to learn more about the RDB file format, read [this blog post](https://rdb.fnordig.de/file_format.html). This challenge\n  has a separate extension dedicated to reading RDB files.\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for sending an empty RDB file to the replica. This is part of the \"full resynchronization\" process.\n","name":"Empty RDB Transfer","position":23,"position-within-course":23,"position-within-extension":10,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"cf8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"ae4bf54a-e94a-4805-b84b-8ccbfdf61b68","type":"course-stages","attributes":{"approved-comments-count":3,"community-solution-counts":{"c":10,"go":183,"cpp":26,"nim":null,"php":1,"zig":5,"dart":null,"java":59,"mojo":null,"odin":null,"ruby":5,"rust":160,"gleam":1,"ocaml":2,"scala":null,"swift":null,"csharp":12,"elixir":6,"fsharp":null,"kotlin":6,"python":105,"racket":null,"clojure":null,"crystal":null,"haskell":2,"reasonml":null,"commonlisp":null,"javascript":35,"typescript":16},"concept-slugs":[],"description-markdown-template":"**🚧 We're still working on instructions for this stage**. You can find notes on how the tester works below.\n\n\u003c!--\nIn the next 3 stages, you will implement the WAIT command on your master.\nThe WAIT command is used to find out how many replicas a write command was propagated to, with the replica ACKing it back. This way we can know how durable the write was. As we haven't implemented periodic ACKs from the replica, in this stage, for WAIT, the master has to send a GETACK to the replica, if the replica replies back with the proper offset, before the WAIT expires, the master can count that replica's write to be a success.\n\nIn this stage you will implement WAIT, when exactly 0 replicas are connected to Master. The Master can just return 0 asap. This way we will gently dive into the implementation.\n--\u003e\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh\n```\n\nA redis client will then connect to your master and send `WAIT 0 60000`:\n\n```bash\n$ redis-cli WAIT 0 60000\n```\n\nIt'll expect to receive `0` back immediately, since no replicas are connected.\n\n### Notes\n\n- You can hardcode `0` as the response for the WAIT command in this stage. We'll get to tracking the number of replicas and responding\n  accordingly in the next stages.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll start implementing the WAIT command on your master.\n","name":"WAIT with no replicas","position":29,"position-within-course":29,"position-within-extension":16,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"my8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"e5d80d93-9ac0-4323-ae7e-cb5cfd608e37","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":7,"go":98,"cpp":10,"nim":null,"php":2,"zig":3,"dart":null,"java":30,"mojo":null,"odin":null,"ruby":6,"rust":85,"gleam":null,"ocaml":1,"scala":null,"swift":null,"csharp":6,"elixir":4,"fsharp":null,"kotlin":4,"python":63,"racket":null,"clojure":null,"crystal":null,"haskell":1,"reasonml":null,"commonlisp":null,"javascript":19,"typescript":10},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for querying data from a stream using the `XRANGE` command.\n\n### The XRANGE command\n\nThe [XRANGE](https://redis.io/commands/xrange/) command retrieves a range of entries from a stream.\n\nIt takes two arguments: `start` and `end`. Both are entry IDs. The command returns all entries in the\nstream with IDs between the `start` and `end` IDs. This range is \"inclusive\", which means that the response\nwill includes entries with IDs that are equal to the `start` and `end` IDs.\n\nHere's an example of how it works:\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\" # (ID of the first added entry)\n$ redis-cli XADD some_key 1526985054079-0 temperature 37 humidity 94\n\"1526985054079-0\"\n$ redis-cli XRANGE some_key 1526985054069 1526985054079\n1) 1) 1526985054069-0\n   2) 1) temperature\n      2) 36\n      3) humidity\n      4) 95\n2) 1) 1526985054079-0\n   2) 1) temperature\n      2) 37\n      3) humidity\n      4) 94\n```\n\nThe sequence number doesn't need to be included in the start and end IDs provided to the command. If not provided,\nXRANGE defaults to a sequence number of 0 for the start and the maximum sequence number for the end.\n\nThe return value of the command is not exactly what is shown in the example above. This is already formatted by redis-cli.\n\nThe actual return value is a [RESP Array](https://redis.io/docs/reference/protocol-spec/#arrays) of arrays.\n\n- Each inner array represents an entry.\n- The first item in the inner array is the ID of the entry.\n- The second item is a list of key value pairs, where the key value pairs are represented as a list of strings.\n  - The key value pairs are in the order they were added to the entry.\n\nThe return value of the example above is actually something like this:\n\n```json\n[\n  [\n    \"1526985054069-0\",\n    [\n      \"temperature\",\n      \"36\",\n      \"humidity\",\n      \"95\"\n    ]\n  ],\n  [\n    \"1526985054079-0\",\n    [\n      \"temperature\",\n      \"37\",\n      \"humidity\",\n      \"94\"\n    ]\n  ],\n]\n```\n\nWhen encoded as a RESP list, it looks like this:\n\n```text\n*2\\r\\n\n*2\\r\\n\n$15\\r\\n1526985054069-0\\r\\n\n*4\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n36\\r\\n\n$8\\r\\nhumidity\\r\\n\n$2\\r\\n95\\r\\n\n*2\\r\\n\n$15\\r\\n1526985054079-0\\r\\n\n*4\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n37\\r\\n\n$8\\r\\nhumidity\\r\\n\n$2\\r\\n94\\r\\n\n```\n\nIn the code block above, the response is separated into multiple lines for readability. The actual\nreturn value doesn't contain any additional newlines.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nFirst, it'll add a few entries.\n\n```bash\n$ redis-cli XADD stream_key 0-1 foo bar\n\"0-1\"\n$ redis-cli XADD stream_key 0-2 bar baz\n\"0-2\"\n$ redis-cli XADD stream_key 0-3 baz foo\n\"0-3\"\n```\n\nThen, it'll send an `XRANGE` command to your server.\n\n```bash\n$ redis-cli XRANGE stream_key 0-2 0-3\n```\n\nYour server should respond with the following (encoded as a RESP Array):\n\n```json\n[\n  [\n    \"0-2\",\n    [\n      \"bar\",\n      \"baz\"\n    ]\n  ],\n  [\n    \"0-3\",\n    [\n      \"baz\",\n      \"foo\"\n    ]\n  ]\n]\n```\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for querying data from a stream using the `XRANGE` command.\n","name":"Query entries from stream","position":37,"position-within-course":37,"position-within-extension":6,"primary-extension-slug":"streams","secondary-extension-slugs":[],"slug":"zx1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"aaa5c4e2-6c0f-476c-85fb-584ed3b8928a","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":2,"go":37,"cpp":2,"nim":null,"php":2,"zig":1,"dart":null,"java":18,"mojo":null,"odin":null,"ruby":1,"rust":40,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":2,"elixir":null,"fsharp":null,"kotlin":1,"python":26,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":15,"typescript":6},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for reading multiple string values from an RDB file.\n\nThe tester will create an RDB file with multiple keys and execute your program like this:\n\n```bash\n$ ./your_program.sh --dir \u003cdir\u003e --dbfilename \u003cfilename\u003e\n```\n\nIt'll then send multiple `GET \u003ckey\u003e` commands to your server.\n\n```bash\n$ redis-cli GET \"foo\"\n$ redis-cli GET \"bar\"\n```\n\nThe response to each `GET \u003ckey\u003e` command should be a RESP bulk string with the value corresponding to the key.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for reading multiple string values from an RDB file.\n","name":"Read multiple string values","position":12,"position-within-course":12,"position-within-extension":5,"primary-extension-slug":"persistence-rdb","secondary-extension-slugs":[],"slug":"dq3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"6ad8431c-23ca-46c4-96f4-1fe4f3a6d4ae","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":3,"go":52,"cpp":4,"nim":null,"php":null,"zig":null,"dart":null,"java":13,"mojo":null,"odin":null,"ruby":5,"rust":29,"gleam":1,"ocaml":null,"scala":null,"swift":null,"csharp":3,"elixir":2,"fsharp":null,"kotlin":2,"python":21,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":11,"typescript":6},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for handling the `INCR` command when a key does not exist.\n\n### Recap\n\nThe implementation of [`INCR`](https://redis.io/docs/latest/commands/incr/) is split into three stages:\n\n- Key exists and has a numerical value (previous stages)\n- Key doesn't exist (**This stage**)\n- Key exists but doesn't have a numerical value (later stages)\n\nWhen a key doesn't exist, `INCR` sets the value to 1. Example:\n\n```bash\n$ redis-cli INCR missing_key\n(integer) 1\n$ redis-cli GET missing_key\n\"1\"\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nThe tester will then connect to your server as a Redis client and run the following commands:\n\n```bash\n$ redis-cli\n\u003e INCR foo (expecting \":1\\r\\n\" as the response)\n\u003e INCR bar (expecting \":1\\r\\n\" as the response)\n```\n\n### Notes\n\n- Your implementation still needs to pass the tests in the previous stage.\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll continue implementing the INCR command.\n","name":"The INCR command (2/3)","position":46,"position-within-course":46,"position-within-extension":2,"primary-extension-slug":"transactions","secondary-extension-slugs":[],"slug":"lz8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"f3de0274-6f5f-40d7-8b58-1333e621688e","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":7,"go":57,"cpp":null,"nim":null,"php":1,"zig":null,"dart":null,"java":15,"mojo":null,"odin":null,"ruby":4,"rust":46,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":2,"elixir":3,"fsharp":null,"kotlin":1,"python":45,"racket":null,"clojure":null,"crystal":null,"haskell":1,"reasonml":null,"commonlisp":null,"javascript":14,"typescript":7},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend support for `XRANGE` to allow querying using `+`.\n\n### Using XRANGE with +\n\nIn the previous stage, we saw that `XRANGE` takes `start` and `end` as arguments.\n\nIn addition to accepting an explicit entry ID, `end` can also be specified as `+`. When `+` is used, `XRANGE` retrieves entries until the end of the stream.\n\nHere's an example of how that works.\n\nWe'll use our previous example for entries existing in a stream.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XADD some_key 1526985054079-0 temperature 37 humidity 94\n\"1526985054079-0\"\n$ redis-cli XRANGE some_key 1526985054069 +\n1) 1) 1526985054069-0\n   2) 1) temperature\n      2) 36\n      3) humidity\n      4) 95\n2) 1) 1526985054079-0\n   2) 1) temperature\n      2) 37\n      3) humidity\n      4) 94\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then create a few entries.\n\n```bash\n$ redis-cli XADD stream_key 0-1 foo bar\n$ redis-cli XADD stream_key 0-2 bar baz\n$ redis-cli XADD stream_key 0-3 baz foo\n```\n\nIt'll then send an `XRANGE` command to your server.\n\n```bash\n$ redis-cli XRANGE stream_key 0-2 +\n```\n\nYour server should respond with the following:\n\n```text\n*2\\r\\n\n*2\\r\\n\n$3\\r\\n0-2\\r\\n\n*2\\r\\n\n$3\\r\\nbar\\r\\n\n$3\\r\\nbaz\\r\\n\n*2\\r\\n\n$3\\r\\n0-3\\r\\n\n*2\\r\\n\n$3\\r\\nbaz\\r\\n\n$3\\r\\nfoo\\r\\n\n```\n\nThis is the RESP encoded representation of the following.\n\n```json\n[\n  [\n    \"0-2\",\n    [\n      \"bar\",\n      \"baz\"\n    ]\n  ],\n  [\n    \"0-3\",\n    [\n      \"baz\",\n      \"foo\"\n    ]\n  ]\n]\n```\n\n### Notes\n- In the response, the items are separated onto new lines for readability. The tester expects all of these to be in one line.\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll extend support for `XRANGE` to allow querying using `+`.\n","name":"Query with +","position":39,"position-within-course":39,"position-within-extension":8,"primary-extension-slug":"streams","secondary-extension-slugs":[],"slug":"fs1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"b9bbe556-b496-4fc3-9f82-907c3a55fb0b","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":9,"go":123,"cpp":13,"nim":null,"php":3,"zig":1,"dart":null,"java":53,"mojo":null,"odin":null,"ruby":4,"rust":89,"gleam":2,"ocaml":null,"scala":1,"swift":null,"csharp":9,"elixir":7,"fsharp":null,"kotlin":4,"python":92,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":35,"typescript":19},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for reading the value corresponding to a key from an RDB file.\n\nJust like with the previous stage, we'll stick to supporting RDB files that contain a single key for now.\n\nThe tester will create an RDB file with a single key and execute your program like this:\n\n```\n./your_program.sh --dir \u003cdir\u003e --dbfilename \u003cfilename\u003e\n```\n\nIt'll then send a `GET \u003ckey\u003e` command to your server.\n\n```bash\n$ redis-cli GET \"foo\"\n```\n\nThe response to `GET \u003ckey\u003e` should be a RESP bulk string with the value of the key.\n\nFor example, let's say the RDB file contains a key called `foo` with the value `bar`. The expected response will be `$3\\r\\nbar\\r\\n`.\n\nStrings can be encoded in three different ways in the RDB file format:\n\n- Length-prefixed strings\n- Integers as strings\n- Compressed strings\n\nIn this stage, you only need to support length-prefixed strings. We won't cover the other two types in this challenge.\n\nWe recommend using [this blog post](https://rdb.fnordig.de/file_format.html) as a reference when working on this stage.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for reading the value of a key from an RDB file that contains a single key-value pair.\n","name":"Read a string value","position":10,"position-within-course":10,"position-within-extension":3,"primary-extension-slug":"persistence-rdb","secondary-extension-slugs":[],"slug":"gc6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"7f3a1ea1-f4fd-4c2f-bf1e-af771ff45853","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":3,"go":69,"cpp":6,"nim":null,"php":2,"zig":1,"dart":null,"java":20,"mojo":null,"odin":null,"ruby":4,"rust":67,"gleam":1,"ocaml":1,"scala":null,"swift":null,"csharp":3,"elixir":4,"fsharp":null,"kotlin":4,"python":49,"racket":null,"clojure":null,"crystal":null,"haskell":1,"reasonml":null,"commonlisp":null,"javascript":12,"typescript":6},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend support for `XRANGE` to allow querying using `-`.\n\n### Using XRANGE with -\n\nIn the previous stage, we saw that `XRANGE` takes `start` and `end` as arguments.\n\nIn addition to accepting an explicit entry ID, `start` can also be specified as `-`. When `-` is used, `XRANGE` retrieves entries from the beginning of the stream.\n\nHere's an example of how that works.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XADD some_key 1526985054079-0 temperature 37 humidity 94\n\"1526985054079-0\"\n$ redis-cli XRANGE some_key - 1526985054079\n1) 1) 1526985054069-0\n   2) 1) temperature\n      2) 36\n      3) humidity\n      4) 95\n2) 1) 1526985054079-0\n   2) 1) temperature\n      2) 37\n      3) humidity\n      4) 94\n```\n\nIn the example above, `XRANGE` retrieves all entries from the beginning of the stream to the entry with ID `1526985054079-0`.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nIt'll then create a few entries.\n\n```bash\n$ redis-cli XADD stream_key 0-1 foo bar\n\"0-1\"\n$ redis-cli XADD stream_key 0-2 bar baz\n\"0-2\"\n$ redis-cli XADD stream_key 0-3 baz foo\n\"0-3\"\n```\n\nIt'll then send an `XRANGE` command to your server.\n\n```bash\n$ redis-cli XRANGE stream_key - 0-2\n1) 1) 0-1\n   2) 1) foo\n      2) bar\n2) 1) 0-2\n   2) 1) bar\n      2) baz\n```\n\nYour server should respond with the following, encoded as a [RESP Array](https://redis.io/docs/reference/protocol-spec/#arrays):\n\n```json\n[\n  [\n    \"0-1\",\n    [\n      \"foo\",\n      \"bar\"\n    ]\n  ],\n  [\n    \"0-2\",\n    [\n      \"bar\",\n      \"baz\"\n    ]\n  ]\n]\n```\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll extend support for `XRANGE` to allow querying using `-`.\n","name":"Query with -","position":38,"position-within-course":38,"position-within-extension":7,"primary-extension-slug":"streams","secondary-extension-slugs":[],"slug":"yp1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"f91822d0-ab03-4403-9268-c9d48a7b6e97","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":6,"go":97,"cpp":10,"nim":null,"php":2,"zig":3,"dart":null,"java":28,"mojo":null,"odin":null,"ruby":6,"rust":81,"gleam":null,"ocaml":1,"scala":null,"swift":null,"csharp":6,"elixir":4,"fsharp":null,"kotlin":4,"python":61,"racket":null,"clojure":null,"crystal":null,"haskell":1,"reasonml":null,"commonlisp":null,"javascript":18,"typescript":10},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support to querying a stream using the `XREAD` command.\n\n### The XREAD command\n\n[XREAD](https://redis.io/commands/xread/) is used to read data from one or more streams, starting from a specified entry ID.\n\nHere's how it works.\n\nLet's use the entries previously shown as an example.\n\n```yaml\nentries:\n  - id: 1526985054069-0 # (ID of the first entry)\n    temperature: 36 # (A key value pair in the first entry)\n    humidity: 95 # (Another key value pair in the first entry)\n\n  - id: 1526985054079-0 # (ID of the second entry)\n    temperature: 37 # (A key value pair in the first entry)\n    humidity: 94 # (Another key value pair in the first entry)\n\n  # ... (and so on)\n```\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XADD some_key 1526985054079-0 temperature 37 humidity 94\n\"1526985054079-0\"\n$ redis-cli XREAD streams some_key 1526985054069-0\n1) 1) \"some_key\"\n   2) 1) 1) 1526985054079-0\n         2) 1) temperature\n            2) 37\n            3) humidity\n            4) 94\n```\n\n`XREAD` is somewhat similar to `XRANGE`. The primary difference is that `XREAD` only takes a single argument and not a start-end pair.\n\nAnother difference is that `XREAD` is exclusive. This means that only entries with the ID greater than what was provided will be included in the response.\n\nAnother difference is the return type. `XREAD` returns an array where each element is an array composed of two elements, which are the ID and the list of fields and values.\n\nHere's what the response in the example above actually looks like:\n\n```json\n[\n  [\n    \"some_key\",\n    [\n      [\n        \"1526985054079-0\",\n        [\n          \"temperature\",\n          \"37\",\n          \"humidity\",\n          \"94\"\n        ]\n      ]\n    ]\n  ]\n]\n```\n\nWhen encoded as RESP, it looks like this:\n\n```text\n*1\\r\\n\n*2\\r\\n\n$8\\r\\nsome_key\\r\\n\n*1\\r\\n\n*2\\r\\n\n$15\\r\\n1526985054079-0\\r\\n\n*4\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n37\\r\\n\n$8\\r\\nhumidity\\r\\n\n$2\\r\\n94\\r\\n\n```\n\nThe lines are separated into new lines for readability. The return value is just one line.\n\n`XREAD` supports other optional arguments, but we won't deal with them right now.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nFirst, an entry will be added.\n\n```bash\n$ redis-cli XADD stream_key 0-1 temperature 96\n```\n\nIt'll then send an `XREAD` command to your server.\n\n```bash\n$ redis-cli XREAD streams stream_key 0-0\n```\n\nYour server should respond with the following:\n\n```text\n*1\\r\\n\n*2\\r\\n\n$10\\r\\nstream_key\\r\\n\n*1\\r\\n\n*2\\r\\n\n$3\\r\\n0-1\\r\\n\n*2\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n96\\r\\n\n```\n\nThis is the RESP encoded representation of the following.\n\n```json\n[\n  [\n    \"stream_key\",\n    [\n      [\n        \"0-1\",\n        [\n          \"temperature\",\n          \"96\"\n        ]\n      ]\n    ]\n  ]\n]\n```\n\n### Notes\n- In the response, the items are separated onto new lines for readability. The tester expects all of these to be in one line.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support to querying a stream using the `XREAD` command.\n","name":"Query single stream using XREAD","position":40,"position-within-course":40,"position-within-extension":9,"primary-extension-slug":"streams","secondary-extension-slugs":[],"slug":"um0","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"25dd9fc7-854b-4315-ae2e-4cc0a8a79236","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":32,"go":488,"cpp":71,"nim":null,"php":6,"zig":12,"dart":null,"java":138,"mojo":null,"odin":null,"ruby":13,"rust":414,"gleam":22,"ocaml":2,"scala":5,"swift":null,"csharp":44,"elixir":27,"fsharp":null,"kotlin":12,"python":259,"racket":null,"clojure":5,"crystal":3,"haskell":6,"reasonml":null,"commonlisp":null,"javascript":91,"typescript":64},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement part 3 of the handshake that happens when a replica connects to master.\n\n### Handshake (continued from previous stage)\n\nAs a recap, there are three parts to the handshake:\n\n- The replica sends a `PING` to the master (Previous stages)\n- The replica sends `REPLCONF` twice to the master (Previous stages)\n- The replica sends `PSYNC` to the master (**This stage**)\n\nAfter receiving a response to the second `REPLCONF`, the replica then sends a [PSYNC](https://redis.io/commands/psync/) command to the master.\n\nThe `PSYNC` command is used to synchronize the state of the replica with the master. The replica will send this command to the master with two arguments:\n\n- The first argument is the replication ID of the master\n  - Since this is the first time the replica is connecting to the master, the replication ID will be `?` (a question mark)\n- The second argument is the offset of the master\n  - Since this is the first time the replica is connecting to the master, the offset will be `-1`\n\nSo the final command sent will be `PSYNC ? -1`.\n\nThis should be sent as a RESP Array, so the exact bytes will look something like this:\n\n```\n*3\\r\\n$5\\r\\nPSYNC\\r\\n$1\\r\\n?\\r\\n$2\\r\\n-1\\r\\n\n```\n\nThe master will respond with a [Simple string](https://redis.io/docs/reference/protocol-spec/#simple-strings) that looks like this:\n\n```\n+FULLRESYNC \u003cREPL_ID\u003e 0\\r\\n\n```\n\nYou can ignore the response for now, we'll get to handling it in later stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port \u003cPORT\u003e --replicaof \"\u003cMASTER_HOST\u003e \u003cMASTER_PORT\u003e\"\n```\n\nIt'll then assert that the replica connects to the master and:\n\n- **(a)** sends `PING` command\n- **(b)** sends `REPLCONF listening-port \u003cPORT\u003e`\n- **(c)** sends `REPLCONF capa eof capa psync2`\n- **(d)** sends `PSYNC ? -1`\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add support for finishing the handshake from the Replica side, by sending PSYNC.\n","name":"Send handshake (3/3)","position":20,"position-within-course":20,"position-within-extension":7,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"ju6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"542dabff-e6cb-4e83-a477-05801529942f","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":37,"go":543,"cpp":79,"nim":null,"php":7,"zig":13,"dart":null,"java":147,"mojo":null,"odin":null,"ruby":14,"rust":455,"gleam":25,"ocaml":2,"scala":6,"swift":null,"csharp":48,"elixir":32,"fsharp":null,"kotlin":13,"python":273,"racket":null,"clojure":5,"crystal":3,"haskell":7,"reasonml":null,"commonlisp":null,"javascript":99,"typescript":85},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement part 1 of the handshake that happens when a replica connects to master.\n\n### Handshake\n\nWhen a replica connects to a master, it needs to go through a handshake process before receiving updates from the master.\n\nThere are three parts to this handshake:\n\n- The replica sends a `PING` to the master (**This stage**)\n- The replica sends `REPLCONF` twice to the master (Next stages)\n- The replica sends `PSYNC` to the master (Next stages)\n\nWe'll learn more about `REPLCONF` and `PSYNC` in later stages. For now, we'll focus on the first part of the handshake: sending `PING` to the master.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port \u003cPORT\u003e --replicaof \"\u003cMASTER_HOST\u003e \u003cMASTER_PORT\u003e\"\n```\n\nIt'll then assert that the replica connects to the master and sends the `PING` command.\n\n### Notes\n\n- The `PING` command should be sent as a RESP Array, like this : `*1\\r\\n$4\\r\\nPING\\r\\n`\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for starting the handshake from the Replica side.\n","name":"Send handshake (1/3)","position":18,"position-within-course":18,"position-within-extension":5,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"gl7","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"88acdf40-bb92-4132-96cb-fedbe932062c","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":11,"go":237,"cpp":28,"nim":null,"php":1,"zig":6,"dart":null,"java":65,"mojo":null,"odin":null,"ruby":8,"rust":179,"gleam":null,"ocaml":2,"scala":1,"swift":null,"csharp":18,"elixir":8,"fsharp":null,"kotlin":7,"python":119,"racket":null,"clojure":1,"crystal":null,"haskell":3,"reasonml":null,"commonlisp":null,"javascript":39,"typescript":22},"concept-slugs":[],"description-markdown-template":"In this stage you'll implement support for responding to the `REPLCONF GETACK` command as a replica.\n\n### ACKs\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  Unlike regular commands, when a master forwards commands to a replica via the replication connection, the replica doesn't\n  respond to each command. It just silently processes the commands and updates its state.\n\n  Since the master doesn't receive a response for each command, it needs another way to keep track of whether a replica is \"in sync\".\n  That's what ACKs are for.\n\n  ACK is short for \"acknowledgement\". Redis masters periodically ask replicas to send ACKs.\n\n  Each ACK contains an \"offset\", which is the number of bytes of commands processed by the replica.\n\n  We'll learn about how this offset is calculated and used in later stages. In this stage, we'll focus on implementing the\n  mechanism through which a master asks for an ACK from a replica: the `REPLCONF GETACK` command.\n\u003c/details\u003e\n\n### The `REPLCONF GETACK` command\n\n\u003cdetails\u003e\n  \u003csummary\u003eClick to expand/collapse\u003c/summary\u003e\n\n  When a master requires an ACK from a replica, it sends a `REPLCONF GETACK *` command to the replica. This is sent over\n  the replication connection (i.e. the connection that remains after the replication handshake is complete).\n\n  When the replica receives this command, it responds with a `REPLCONF ACK \u003coffset\u003e` response. The offset is the\n  number of bytes of commands processed by the replica. It starts at 0 and is incremented for every command processed by the replica.\n\n  In this stage, you'll implement support for receiving the `REPLCONF GETACK *` command and responding with `REPLCONF ACK 0`.\n\n  You can hardcode the offset to 0 for now. We'll implement proper offset tracking in the next stage.\n\n  The exact command received by the replica will look something like this: `*3\\r\\n$8\\r\\nreplconf\\r\\n$6\\r\\ngetack\\r\\n$1\\r\\n*\\r\\n` (that's\n  `[\"replconf\", \"getack\", \"*\"]` encoded as a [RESP Array](https://redis.io/docs/reference/protocol-spec/#arrays)).\n\u003c/details\u003e\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port \u003cPORT\u003e --replicaof \"\u003cHOST\u003e \u003cPORT\u003e\"\n```\n\nJust like in the previous stages, your replica should complete the handshake with the master and receive an empty RDB file.\n\nThe master will then send `REPLCONF GETACK *` to your replica. It'll expect to receive `REPLCONF ACK 0` as a reply.\n\n### Notes\n\n- The response should be encoded as a [RESP Array](https://redis.io/docs/reference/protocol-spec/#arrays), like\n  this: `*3\\r\\n$8\\r\\nREPLCONF\\r\\n$3\\r\\nACK\\r\\n$1\\r\\n0\\r\\n`.\n- We'll implement proper offset tracking in the next stage, for now you can hardcode the offset to 0.\n- After the master-replica handshake is complete, a replica should **only** send responses to `REPLCONF GETACK` commands. All\n  other propagated commands (like `PING`, `SET` etc.) should be read and processed, but a response should not be sent back to the master.\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for returning an ACK back to master as a response to GETACK.\n","name":"ACKs with no commands","position":27,"position-within-course":27,"position-within-extension":14,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"xv6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"bb3515d5-3edb-4622-b506-a81efda09acc","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":39,"go":634,"cpp":96,"nim":null,"php":9,"zig":20,"dart":null,"java":171,"mojo":null,"odin":null,"ruby":20,"rust":495,"gleam":35,"ocaml":5,"scala":6,"swift":null,"csharp":76,"elixir":42,"fsharp":null,"kotlin":16,"python":343,"racket":null,"clojure":5,"crystal":3,"haskell":7,"reasonml":null,"commonlisp":null,"javascript":128,"typescript":119},"concept-slugs":[],"description-markdown-template":"Welcome to the Replication extension!\n\nIn this extension, you'll extend your Redis server to support [leader-follower replication](https://redis.io/docs/management/replication/). You'll be able to run\nmultiple Redis servers with one acting as the \"master\" and the others as \"replicas\". Changes made to the master will be automatically replicated to replicas.\n\nSince we'll need to run multiple instances of your Redis server at once, we can't run all of them on port 6379.\n\nIn this stage, you'll add support for starting the Redis server on a custom port. The port number will be passed to your program via the `--port` flag.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port 6380\n```\n\nIt'll then try to connect to your TCP server on the specified port number (`6380` in the example above). If the connection succeeds, you'll pass this stage.\n\n### Notes\n\n- Your program still needs to pass the previous stages, so if `--port` isn't specified, you should default to port 6379.\n- The tester will pass a random port number to your program, so you can't hardcode the port number from the example above.\n- If your repository was created before 5th Oct 2023, it's possible that your `./your_program.sh` script\nmight not be passing arguments on to your program. You'll need to edit `./your_program.sh` to fix this, check\n[this PR](https://github.com/codecrafters-io/build-your-own-redis/pull/89/files) for details.\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for parsing the `--port` flag and starting Redis on a custom port.\n","name":"Configure listening port","position":14,"position-within-course":14,"position-within-extension":1,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"bw1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"c8a52a4f-a394-472a-ae36-7181a1c57960","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":20,"go":320,"cpp":51,"nim":null,"php":4,"zig":2,"dart":null,"java":106,"mojo":null,"odin":null,"ruby":10,"rust":278,"gleam":13,"ocaml":1,"scala":3,"swift":null,"csharp":25,"elixir":15,"fsharp":null,"kotlin":10,"python":186,"racket":null,"clojure":4,"crystal":2,"haskell":4,"reasonml":null,"commonlisp":null,"javascript":70,"typescript":39},"concept-slugs":[],"description-markdown-template":"In this stage, we'll start implementing support for receiving a replication handshake as a master.\n\n### Handshake (continued from previous stage)\n\nWe'll now implement the same handshake we did in the previous stages, but on the master instead of the replica.\n\nAs a recap, there are three parts to the handshake:\n\n- The master receives a `PING` from the replica\n  - Your Redis server already supports the `PING` command, so there's no additional work to do here\n- The master receives `REPLCONF` twice from the replica (**This stage**)\n- The master receives `PSYNC` from the replica (Next stage)\n\nIn this stage, you'll add support for receiving the `REPLCONF` command from the replica.\n\nYou'll receive `REPLCONF` twice from the replica. For the purposes of this challenge, you can safely ignore the arguments for both commands and just\nrespond with `+OK\\r\\n` (\"OK\" encoded as a RESP Simple String).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```\n./your_program.sh --port \u003cPORT\u003e\n```\n\nIt'll then send the following commands:\n\n1. `PING` (expecting `+PONG\\r\\n` back)\n2. `REPLCONF listening-port \u003cPORT\u003e` (expecting `+OK\\r\\n` back)\n3. `REPLCONF capa psync2` (expecting `+OK\\r\\n` back)\n","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll add support for starting the handshake from the master side, by accepting REPLCONF.\n","name":"Receive handshake (1/2)","position":21,"position-within-course":21,"position-within-extension":8,"primary-extension-slug":"replication","secondary-extension-slugs":[],"slug":"fj0","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"f14b0d2b-795a-4b1d-9fef-9670683ccdae","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":3,"go":79,"cpp":6,"nim":null,"php":2,"zig":2,"dart":null,"java":19,"mojo":null,"odin":null,"ruby":5,"rust":56,"gleam":null,"ocaml":1,"scala":null,"swift":null,"csharp":5,"elixir":2,"fsharp":null,"kotlin":4,"python":47,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":18,"typescript":10},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend support to `XREAD` to allow for the blocking command not timing out.\n\n### Understanding blocking without timeout\n\nHere's how it works.\n\nLet's use the entries previously shown as an example.\n\n```yaml\nentries:\n  - id: 1526985054069-0 # (ID of the first entry)\n    temperature: 36 # (A key value pair in the first entry)\n    humidity: 95 # (Another key value pair in the first entry)\n\n  - id: 1526985054079-0 # (ID of the second entry)\n    temperature: 37 # (A key value pair in the first entry)\n    humidity: 94 # (Another key value pair in the first entry)\n\n  # ... (and so on)\n```\n\nOn one instance of the redis-cli, we'd add an entry and send a blocking `XREAD` command with 0 as the time passed in.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 0 streams some_key 1526985054069-0\n```\n\nThen, on another instance of the redis-cli, we add another entry.\n\n```bash\n$ other-redis-cli XADD some_key 1526985054079-0 temperature 37 humidity 94\n\"1526985054079-0\"\n```\n\nThe difference now is that the first instance of the redis-cli doesn't time out and responds with null no matter how much time passes. It will wait until another entry is added. The return value after an entry is added is similar to the last stage.\n\n```bash\n$ redis-cli XADD some_key 1526985054069-0 temperature 36 humidity 95\n\"1526985054069-0\"\n$ redis-cli XREAD block 0 streams some_key 1526985054069-0\n1) 1) \"some_key\"\n   2) 1) 1) 1526985054079-0\n         2) 1) temperature\n            2) 37\n            3) humidity\n            4) 94\n```\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n$ ./your_program.sh\n```\n\nFirst, an entry will be added to a stream.\n\n```bash\n$ redis-cli XADD stream_key 0-1 temperature 96\n```\n\nIt'll then send an `XREAD` command to your server with the `BLOCK` command with the time passed in being 0.\n\n```bash\n$ redis-cli XREAD block 0 streams stream_key 0-1\n```\n\nIt'll then wait for 1000 milliseconds before checking if there is a response. Your server should not have a new response. It'll then add another entry.\n\n```bash\n$ redis-cli XADD stream_key 0-2 temperature 95\n```\n\nYour server should respond with the following:\n\n```text\n*1\\r\\n\n*2\\r\\n\n$10\\r\\stream_key\\r\\n\n*1\\r\\n\n*2\\r\\n\n$3\\r\\n0-2\\r\\n\n*2\\r\\n\n$11\\r\\ntemperature\\r\\n\n$2\\r\\n95\\r\\n\n```\n\nThis is the RESP encoded representation of the following.\n\n```json\n[\n  [\n    \"stream_key\",\n    [\n      \"0-2\",\n      [\n        \"temperature\",\n        \"95\"\n      ]\n    ]\n  ]\n]\n```\n\n### Notes\n- In the response, the items are separated onto new lines for readability. The tester expects all of these to be in one line.\n","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll add extend support to `XREAD` to allow for the blocking command not timing out.\n","name":"Blocking reads without timeout","position":43,"position-within-course":43,"position-within-extension":12,"primary-extension-slug":"streams","secondary-extension-slugs":[],"slug":"hw1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"339d3d9c-2001-4171-885e-4ded00636e97","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"8ee02441-697a-4e6d-8015-44e472b0c1b8","type":"language"}}}},{"id":"e227e09f-3d4b-4780-9949-9973c191f06b","type":"languages","attributes":{"name":"Clojure","slug":"clojure","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"7809c457-f46c-45bf-aeec-6060e8610c14","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"e227e09f-3d4b-4780-9949-9973c191f06b","type":"language"}}}},{"id":"c2a2a529-66e0-438a-be17-23c157d2b1cd","type":"languages","attributes":{"name":"Crystal","slug":"crystal","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"bd72134a-cacf-4799-9023-9c1c1df56317","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"c2a2a529-66e0-438a-be17-23c157d2b1cd","type":"language"}}}},{"id":"54ba4505-bf29-4c36-aa12-d2e2ada8679a","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"fb72dae0-177a-45cc-a63e-71f9dd3184ac","type":"language"}}}},{"id":"b3256af6-26d4-4c01-8ca1-b801b5d68c7f","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"ae1f5463-4134-470d-90ab-b2568d2a63f6","type":"language"}}}},{"id":"7eb96b36-5398-4087-9091-cbefb4e10330","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"3236a60c-e348-4db7-9e6a-e2826b38d991","type":"language"}}}},{"id":"d9920a3b-5ab2-4edd-856a-d6e509d3dc25","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"6f979cea-d7af-42cf-8e8d-ca44857217c0","type":"language"}}}},{"id":"a490f211-dd7c-4903-8a79-8a4ffb743e5c","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"1dbc76cc-c216-4776-a605-3a5784b801a9","type":"language"}}}},{"id":"12a40418-a766-4d96-b2be-4a77179c3782","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"4cd22891-8eaa-4f67-8b58-30b0403e59aa","type":"language"}}}},{"id":"81c2db43-c1f6-4e48-8022-7b278a27f952","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"0c3ceaee-af5c-44d2-ab88-87acc929944b","type":"language"}}}},{"id":"19ef3456-bfe7-404c-9eec-16e73f18a290","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"a58f0983-d67d-47e6-97e7-c02aec9ec269","type":"language"}}}},{"id":"bd63cab2-328c-4f7e-90aa-329e57cf5f0a","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"63d38ef2-f131-4635-aa66-0cf404826f9b","type":"language"}}}},{"id":"2a2c9244-b1a6-4f47-836e-98fedf8a9d0f","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"5ddd40dd-1539-4214-a40c-cc7a9e5edf35","type":"language"}}}},{"id":"95791516-ce56-4ef5-b771-ff9472461957","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"3ee6502c-281b-480f-a4bf-4a3efd209689","type":"language"}}}},{"id":"3ec8d91c-f853-45fc-819d-baadc9039a9c","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"16121c66-8a81-452d-8c3a-f9fa221e7936","type":"language"}}}},{"id":"3bc1bfd0-8926-48df-8e08-03946c3794e1","type":"languages","attributes":{"name":"Scala","slug":"scala","track-status":"beta"},"relationships":{"primer-concept-group":{}}},{"id":"c029e205-3fcf-4dbe-b876-e15125d08732","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"3bc1bfd0-8926-48df-8e08-03946c3794e1","type":"language"}}}},{"id":"e9df8fbc-d38b-4e11-821c-a3ae1dcd00ef","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"eafb6f56-30a3-49d8-90b1-a2e051db26cf","type":"language"}}}},{"id":"3a7ccdd6-562a-461d-86f9-426b8db67cab","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"7e07ab8f-2bc0-4b20-bc72-1cd9c7e200ed","type":"language"}}}},{"id":"866d9796-9c33-4b7e-895e-f42d5d1bb95c","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"69f3180a-cb86-410e-9d4f-80b3d7b3dc6e","type":"language"}}}},{"id":"ec6e352d-292b-4b2b-b650-f867bc760e9a","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"c9b581c8-6977-4f1b-9c8b-e1ee5fd7a10f","type":"language"}}}},{"id":"df47b7df-f972-4597-8b52-0bee75aed177","type":"course-language-configurations","attributes":{"alpha-tester-usernames":["JWShroyer"],"release-status":"alpha"},"relationships":{"course":{"data":{"id":"a4eb07c8-84ac-4bbf-b9f8-a44cb3481590","type":"course"}},"language":{"data":{"id":"db982ec4-d37d-44c7-abf1-dc76e121daaf","type":"language"}}}},{"id":"c66ddbe5-12ab-4e2c-9353-5de9a7b03160","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension, you'll add redirection support to your shell.\n\nRedirection allows you to redirect the output of a command to a file or another command.\n","name":"Redirection","position":3,"slug":"redirection"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}}}},{"id":"be1f220c-b43a-48cf-b0b0-386bbea71662","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension, you'll add quoting support to your shell.\n\nQuoting allows you to preserve whitespace and special characters in your shell commands.\n","name":"Quoting","position":2,"slug":"quoting"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}}}},{"id":"27b68b47-adce-4f95-acd3-f69808028c20","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension, you'll add directory navigation support by implementing the `cd` and `pwd` commands.\n\nAlong the way, you'll learn about what the \"current working directory\" is, how to change it and more.\n","name":"Navigation","position":1,"slug":"navigation"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}}}},{"id":"716e9542-39ad-4d2e-a33a-1e7aede0329b","type":"course-extensions","attributes":{"description-markdown":"In this challenge extension, you'll add programmable completion support to your shell.\n\nProgrammable completion allows you to autocomplete commands and executable files.\n","name":"Autocompletion","position":4,"slug":"completions"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}}}},{"id":"670e833b-29b8-4dad-a80c-803958f69448","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":8,"go":38,"cpp":22,"nim":null,"php":null,"zig":4,"dart":null,"java":8,"mojo":null,"odin":null,"ruby":1,"rust":47,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":10,"elixir":null,"fsharp":null,"kotlin":3,"python":58,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":7,"typescript":8},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend your shell's tab completion to include external executable files in the user's `PATH`.\n\nYour shell should now be able to complete commands that are not built-ins, but exist as executable files in the directories listed in the `PATH` environment variable.\nWhen the user types the beginning of an external command and presses `\u003cTAB\u003e`, your shell should complete the command to the full executable file name.\nThis means that if you have a command `custom_executable` in the path and type `custom` and press `\u003cTAB\u003e`, the shell should complete that to `custom_executable`.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nBefore executing your shell, the tester will create an executable file named `custom_executable` and add its directory to the `PATH`.\n\nThe test will simulate the user typing the start of the external command and pressing `\u003cTAB\u003e`:\n\n1.  **Input:** `custom`\u003cTAB\u003e\n    *   The tester types \"custom\" and presses `\u003cTAB\u003e`. The tester expects that the prompt line changes to `custom_executable `.\n\nThe tester will verify that your shell correctly completes the command to the external executable file name.\nNote the space at the end of the completion.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for autocompleting external executables.","name":"Executable completion","position":26,"position-within-course":26,"position-within-extension":4,"primary-extension-slug":"completions","secondary-extension-slugs":[],"slug":"gy5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"0f407462-65ab-4b98-bcbf-f6485cec1c0c","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":9,"go":37,"cpp":21,"nim":null,"php":null,"zig":7,"dart":null,"java":11,"mojo":null,"odin":null,"ruby":1,"rust":44,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":10,"elixir":null,"fsharp":null,"kotlin":3,"python":65,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":6,"typescript":7},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement tab completion for executables, specifically when multiple executables share a common prefix.\n\nWhen the user types a command prefix and presses `\u003cTAB\u003e`, your shell should:\n\n- Identify all executables in the `PATH` that match the prefix.\n- If there are multiple matches,\n  - On the first TAB press, just ring a bell. (`\\a` rings the bell)\n  - On the second TAB press, print all the matching executables separated by 2    spaces, on the next line, and follow it with the prompt on a new line.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt will then set up a specific `PATH` and place multiple executables starting with a common prefix into different directories in the `PATH`. Finally, it will type the common prefix, and then press the Tab key twice.\n\n```bash\n$ ./your_program.sh\n$ xyz_\u003cTAB\u003e\u003cTAB\u003e\nxyz_bar  xyz_baz  xyz_quz\n$ xyz_\n```\n\nThe tester will verify that:\n\n1. Your shell displays the prompt with the common prefix after receiving the partial command.\n2. Upon the first Tab key press, your shell prints a bell character.\n3. Upon the second Tab key press, your shell prints the list of matching executables separated by 2 spaces, on the next line, and follow it with the prompt on a new line.","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for handling multiple completions.","name":"Multiple completions","position":27,"position-within-course":27,"position-within-extension":5,"primary-extension-slug":"completions","secondary-extension-slugs":[],"slug":"wh6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"bcdbfaee-0f0b-4b26-bbf4-c8abb56c7d75","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":4,"go":12,"cpp":12,"nim":null,"php":null,"zig":1,"dart":null,"java":3,"mojo":null,"odin":null,"ruby":null,"rust":8,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":4,"elixir":null,"fsharp":null,"kotlin":2,"python":10,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":null,"typescript":3},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend your shell's tab completion to handle commands with arguments. \n\nYour shell should now not only complete the command itself but also correctly handle the subsequent arguments that the user types.\nThis means that after completing the command with `\u003cTAB\u003e`, it should allow the user to continue typing arguments, and those arguments should also be interpreted correctly.\nYou'll need to ensure commands like `echo ` and `type` autocomplete and still function correctly with arguments.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nThe tests will simulate user input with tab presses and will execute builtin commands, similar to the previous stage, with added arguments:\n\n1.  **Input:** `ech`\u003cTAB\u003e `hello`\u003cENTER\u003e\n    *   The tester expects the shell to first complete the `ech` to `echo` after `\u003cTAB\u003e`, then accept the `hello` argument, and after the `\u003cENTER\u003e` key press, execute `echo hello`.\n    *   The shell should output `hello`.\n\n2.  **Input:** `typ`\u003cTAB\u003e `type`\u003cENTER\u003e\n     *   The tester expects the shell to first complete `typ` to `type` after `\u003cTAB\u003e`, then accept the `type` argument, and after the `\u003cENTER\u003e` key press, execute `type type`.\n     *   The shell should output `type is a shell builtin`.\n\nThe tester will verify that your shell properly completes the commands and executes the commands with the given arguments.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for allowing arguments to be used after completion.","name":"Completion with arguments","position":24,"position-within-course":24,"position-within-extension":2,"primary-extension-slug":"completions","secondary-extension-slugs":[],"slug":"gm9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"db1df452-05b2-44af-996b-bce58795e5f5","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":68,"go":238,"cpp":123,"nim":null,"php":10,"zig":40,"dart":null,"java":94,"mojo":null,"odin":null,"ruby":5,"rust":263,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":39,"elixir":null,"fsharp":null,"kotlin":15,"python":133,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":26,"typescript":22},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement support for quoting with backslashes.\n\nA non-quoted backslash `\\` is treated as an escape character. It preserves the literal value of the next character. Read more about quoting with backslashes [here](https://www.gnu.org/software/bash/manual/bash.html#Escape-Character).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of `echo` commands to your shell:\n\n```bash\n$ echo \"before\\   after\"\nbefore\\   after\n$ echo world\\ \\ \\ \\ \\ \\ script\nworld      script\n$\n```\n\nThe tester will check if the `echo` command correctly prints the quoted text.\n\nThen it will also send a `cat` command, with the file name parameters consisting of backslashes inside quotes:\n\n```bash\n$ cat \"/tmp/file\\\\name\" \"/tmp/file\\ name\" \ncontent1 content2\n```\n\nThe tester will check if the `cat` command correctly prints the file content.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for quoting with backslashes only.","name":"Backslash outside quotes","position":15,"position-within-course":15,"position-within-extension":3,"primary-extension-slug":"quoting","secondary-extension-slugs":[],"slug":"yt5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"b4caac0e-67b3-4e61-84b6-945d227757f1","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":9,"go":34,"cpp":19,"nim":null,"php":null,"zig":6,"dart":null,"java":9,"mojo":null,"odin":null,"ruby":1,"rust":36,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":10,"elixir":null,"fsharp":null,"kotlin":3,"python":27,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":6,"typescript":6},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend your shell's tab completion to handle cases with multiple matching executables where one is a prefix of another. \n\nWhen the user types a partial command and presses the Tab key, your shell should attempt to complete the command name. If there are multiple executable files in the PATH that match the prefix, and one of those matches is a prefix of another, then the shell should complete to the longest common prefix of all matching executables. If there is only one match after performing completion, then the shell should complete the command name as in previous stages.\n\nFor example, if `xyz_foo`, `xyz_foo_bar`, and `xyz_foo_bar_baz` are all available executables and the user types `xyz_` and presses tab, then your shell should complete the command to `xyz_foo`. If the user then types `_` and presses tab again, it should complete to `xyz_foo_bar`. If the user then types `_` and presses tab again, it should complete to `xyz_foo_bar_baz`.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt will then set up a specific `PATH` and place executables `xyz_foo`, `xyz_foo_bar`, and `xyz_foo_bar_baz` into different directories in the `PATH`. Finally, it will type `xyz_` and then press Tab, then type `_` and press Tab, then type `_` and press Tab.\n\n```bash\n$ export PATH=/tmp/bar:$PATH\n$ export PATH=/tmp/baz:$PATH\n$ export PATH=/tmp/qux:$PATH\n$ ./your_program.sh\n$ xyz_\u003cTAB\u003e\n$ xyz_foo_\u003cTAB\u003e\n$ xyz_foo_bar_\u003cTAB\u003e\n$ xyz_foo_bar_baz \n```\nNote: The prompt lines above are on the same line.\n\nThe tester will verify that:\n\n1. After typing `xyz_` and pressing Tab, your shell completes to `xyz_foo`.\n2. After typing `_`, the prompt line matches `$ xyz_foo_`.\n3. After typing `_` and pressing Tab, your shell completes to `xyz_foo_bar`.\n4. After typing `_`, the prompt line matches `$ xyz_foo_bar_`.\n5. After typing `_` and pressing Tab, your shell completes to `xyz_foo_bar_baz`.\n6. The prompt line matches `$ xyz_foo_bar_baz ` after the final completion.","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for handling multiple completions with common prefixes.","name":"Partial completions","position":28,"position-within-course":28,"position-within-extension":6,"primary-extension-slug":"completions","secondary-extension-slugs":[],"slug":"wt6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"72003a6a-0bbb-45e9-b9a6-387962e78b77","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":98,"go":380,"cpp":184,"nim":null,"php":12,"zig":46,"dart":null,"java":138,"mojo":null,"odin":null,"ruby":13,"rust":361,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":69,"elixir":null,"fsharp":null,"kotlin":18,"python":387,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":40,"typescript":41},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement support for quoting with single quotes.\n\nEnclosing characters in single quotes preserves the literal value of each character within the quotes. Read more about quoting with single quotes [here](https://www.gnu.org/software/bash/manual/bash.html#Single-Quotes).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of `echo` commands to your shell:\n\n```bash\n$ echo 'shell hello'\nshell hello\n$ echo 'world     test'\nworld     test\n$\n```\n\nThe tester will check if the `echo` command correctly prints the quoted text.\n\nThen it will also send a `cat` command, with the file name parameter enclosed in single quotes:\n\n```bash\n$ cat '/tmp/file name' '/tmp/file name with spaces' \ncontent1 content2\n```\n\nThe tester will check if the `cat` command correctly prints the file content.\n\n### Notes\n\n- The `cat` command is an executable available on most systems, so there’s no need to implement it yourself.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for quoting with single quotes.","name":"Single quotes","position":13,"position-within-course":13,"position-within-extension":1,"primary-extension-slug":"quoting","secondary-extension-slugs":[],"slug":"ni6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"94c73061-dfc0-44c6-9892-969fa122c82b","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":7,"go":38,"cpp":24,"nim":null,"php":null,"zig":6,"dart":null,"java":10,"mojo":null,"odin":null,"ruby":null,"rust":30,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":10,"elixir":null,"fsharp":null,"kotlin":3,"python":15,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":9,"typescript":10},"concept-slugs":[],"description-markdown-template":"In this stage, you'll refine your shell's tab completion behavior to handle cases where the user types an invalid command.\n\nWhen the user types a command that is not a known builtin and presses `\u003cTAB\u003e`, your shell should not attempt to autocomplete it. Instead, it should just keep what the user typed and should ring a bell.\nThis means that if you type \"xyz\" and press `\u003cTAB\u003e`, the command should not change and you should hear a bell indicating that there are no valid completion options for \"xyz\".\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nThe tests will simulate the user typing an invalid command and pressing the `\u003cTAB\u003e` key:\n\n1.  **Input:** `xyz`\u003cTAB\u003e\n    *   The tester will first type `xyz` and then press `\u003cTAB\u003e`. The tester expects that the prompt still shows \"xyz\" and there is a bell sound.\n\nThe tester will verify that your shell does not attempt completion on invalid commands, the bell is sent.\nThe bell is sent by printing the `\\a` character.","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for handling invalid commands gracefully.","name":"Missing completions","position":25,"position-within-course":25,"position-within-extension":3,"primary-extension-slug":"completions","secondary-extension-slugs":[],"slug":"qm8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"0e13a8b0-c81e-4b74-8a27-b07ffb02a464","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":21,"go":96,"cpp":37,"nim":null,"php":1,"zig":18,"dart":null,"java":39,"mojo":null,"odin":null,"ruby":5,"rust":107,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":18,"elixir":null,"fsharp":null,"kotlin":6,"python":125,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":11,"typescript":11},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement support for appending the output of a command to a file.\n\nThe `1\u003e\u003e` operator is used to append the output of a command to a file.\nAs a special case, if the file descriptor is not specified before the operator `\u003e\u003e`, the output is redirected to the standard output by default, so `\u003e\u003e` is equivalent to `1\u003e\u003e`.\n\nLearn more about [Appending Stdout](https://www.gnu.org/software/bash/manual/bash.html#Appending-Redirected-Output).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of commands to your shell, executing commands and appending their output to a file:\n\n```bash\n$ ls /tmp/baz \u003e\u003e /tmp/bar/bar.md\n$ cat /tmp/bar/bar.md\napple\nbanana\nblueberry\n$ echo 'Hello Emily' 1\u003e\u003e /tmp/bar/baz.md\n$ echo 'Hello Maria' 1\u003e\u003e /tmp/bar/baz.md\n$ cat /tmp/bar/baz.md\nHello Emily\nHello Maria\n$ echo \"List of files: \" \u003e /tmp/bar/qux.md\n$ ls /tmp/baz \u003e\u003e /tmp/bar/qux.md\n$ cat /tmp/bar/qux.md\nList of files:\napple\nbanana\nblueberry\n```\n\nThe tester will check if the commands correctly execute commands and append their output to a file as specified.\nThe file contents will also be checked for correctness.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for appending the output of a command to a file.","name":"Append stdout","position":21,"position-within-course":21,"position-within-extension":3,"primary-extension-slug":"redirection","secondary-extension-slugs":[],"slug":"el9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"2200f2b2-65cb-49e2-9a8c-61b60ac27d2b","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":26,"go":106,"cpp":43,"nim":null,"php":1,"zig":19,"dart":null,"java":39,"mojo":null,"odin":null,"ruby":6,"rust":100,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":18,"elixir":null,"fsharp":null,"kotlin":6,"python":130,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":12,"typescript":10},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement support for redirecting the standard error of a command to a file.\n\nThe `2\u003e` operator is used to redirect the standard error of a command to a file.\n\nLearn more about [Redirecting Stderr](https://www.gnu.org/software/bash/manual/bash.html#Redirecting-Output).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of commands to your shell, executing commands and redirecting their output to a file:\n\n```bash\n$ ls nonexistent 2\u003e /tmp/quz/baz.md\n$ cat /tmp/quz/baz.md\nls: cannot access 'nonexistent': No such file or directory\n$ echo 'Maria file cannot be found' 2\u003e /tmp/quz/foo.md\nMaria file cannot be found\n$ cat /tmp/bar/pear nonexistent 2\u003e /tmp/quz/quz.md\npear\n$ cat /tmp/quz/quz.md\ncat: nonexistent: No such file or directory\n```\n\nThe tester will check if the commands correctly execute commands and redirect their error message to a file as specified.\nThe file contents will also be checked for correctness.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for redirecting the standard error of a command to a file.","name":"Redirect stderr","position":20,"position-within-course":20,"position-within-extension":2,"primary-extension-slug":"redirection","secondary-extension-slugs":[],"slug":"vz4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"54b31513-6dd4-4706-b4e4-92c2738b301e","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement printing a shell prompt (`$ `) and waiting for user input.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nThe tester will then check whether your shell prints the `$ ` prompt and waits for user input.\n\n### Notes\n\n- There's a space after the `$` character in the prompt.\n- Your program must not exit after printing `$ `, it should wait for user input.\n- We'll handle reading commands and executing them in later stages, this stage only deals with printing the prompt.","difficulty":"very_easy","is-paid":false,"marketing-markdown":"In this stage, you'll implement printing the shell prompt and waiting for user input.","name":"Print a prompt","position":1,"position-within-course":1,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"oo8","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"81b533cd-cfaf-4583-bca5-5f6032979711","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{"c":1117,"go":1881,"cpp":1387,"nim":null,"php":72,"zig":296,"dart":null,"java":1222,"mojo":null,"odin":null,"ruby":61,"rust":2426,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":402,"elixir":null,"fsharp":null,"kotlin":98,"python":2496,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":368,"typescript":249},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement support for handling invalid commands in your shell.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt will then send the following command to your shell:\n\n```bash\n$ invalid_command\ninvalid_command: command not found\n```\n\nThe tester will check whether your shell prints `\u003ccommand_name\u003e: command not found\\n` for an invalid command.\n\n### Notes\n\n- We're treating every command as \"invalid\" for now, but we'll handle executing \"valid\" commands like `echo`, `cd` etc. in later stages.\n- The command name will be a random string, so the response can't be hardcoded.\n- In this stage it's okay if your program exits soon after printing the `\u003ccommand_name\u003e: command not found\\n` message. In later stages\n  we'll check for a REPL (Read-Eval-Print Loop), i.e. whether the shell prints a new prompt after processing each command.","difficulty":"easy","is-paid":false,"marketing-markdown":"In this stage, you'll implement handling invalid commands in your shell.","name":"Handle invalid commands","position":2,"position-within-course":2,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"cz2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"003b1bac-7f53-4ee4-8b15-5d8787ccd82d","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":733,"go":1544,"cpp":1002,"nim":null,"php":48,"zig":222,"dart":null,"java":816,"mojo":null,"odin":null,"ruby":40,"rust":1917,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":337,"elixir":null,"fsharp":null,"kotlin":79,"python":1834,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":219,"typescript":183},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the [exit](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#exit) builtin.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send an invalid command to your shell, followed by the `exit` command:\n\n```bash\n$ invalid_command_1\ninvalid_command_1: command not found\n$ exit 0\n```\n\nAfter issuing the `exit 0` command, the tester will verify whether your program terminates with [code/status](https://en.wikipedia.org/wiki/Exit_status) 0.\n\n### Notes\n\n- The tester will always pass in `0` as the argument to the `exit` command.","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll implement the `exit` builtin command.","name":"The exit builtin","position":4,"position-within-course":4,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"pn5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"63a827b4-366a-4623-9ae4-b99709064ecf","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{"c":284,"go":1030,"cpp":420,"nim":null,"php":23,"zig":104,"dart":null,"java":400,"mojo":null,"odin":null,"ruby":25,"rust":1115,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":158,"elixir":null,"fsharp":null,"kotlin":45,"python":996,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":83,"typescript":79},"concept-slugs":[],"description-markdown-template":"In this stage, you'll add support for running external programs with arguments.\n\nExternal programs are located using the `PATH` environment variable, as described in previous stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a command that you need to execute:\n\n```bash\n$ custom_exe_1234 alice\nProgram was passed 2 args (including program name).\nArg #0 (program name): custom_exe_1234\nArg #1: alice\nProgram Signature: 5998595441\n```\n\nThe command (`custom_exe_1234`) in the example above will be present in `PATH` and will be an executable file.\n\nThe executable file will print information about the arguments it was passed along with a random \"program signature\". The tester will verify that your program prints output from the executable.\n\n### Notes\n\n- The program name, arguments and the expected output will be random for each test case.\n- The output in the example (\"Program was passed N args...\") comes from the executable. It's not something you need to implement manually.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement the ability for your shell to run external programs with arguments.","name":"Run a program","position":8,"position-within-course":8,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ip1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"f08fc5cb-3e49-4691-a2f8-ce92b137ed60","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":535,"go":1353,"cpp":767,"nim":null,"php":40,"zig":175,"dart":null,"java":693,"mojo":null,"odin":null,"ruby":41,"rust":1618,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":276,"elixir":null,"fsharp":null,"kotlin":67,"python":1557,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":176,"typescript":159},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `type` builtin command for your shell.\n\nThe `type` builtin is used to determine how a command would be interpreted if used. Example:\n\n```bash\n$ type echo\necho is a shell builtin\n$ type exit\nexit is a shell builtin\n$ type invalid_command\ninvalid_command: not found\n```\n\nIn this stage we'll only test two cases: builtin commands and unrecognized commands. We'll handle\nexecutable files in later stages.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of `type` commands to your shell:\n\n```bash\n$ type echo\necho is a shell builtin\n$ type exit\nexit is a shell builtin\n$ type type\ntype is a shell builtin\n$ type invalid_command\ninvalid_command: not found\n$\n```\n\nThe tester will check if the `type` command responds correctly based on the command provided:\n\n- If a command is a shell builtin, the expected output is `\u003ccommand\u003e is a shell builtin`.\n- If a command is not recognized, the expected output is `\u003ccommand\u003e: not found`.\n\n### Notes\n\n- The tester will only check for builtin commands and unrecognized commands in this stage.\n- `type` itself is a shell builtin command, so `$ type type` should print `type is a shell builtin`.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement the `type` builtin command.","name":"The type builtin: builtins","position":6,"position-within-course":6,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ez5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"a0b223d0-9962-49ec-bd19-17bd86668149","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":220,"go":840,"cpp":321,"nim":null,"php":20,"zig":77,"dart":null,"java":301,"mojo":null,"odin":null,"ruby":21,"rust":873,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":125,"elixir":null,"fsharp":null,"kotlin":36,"python":768,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":60,"typescript":64},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `cd` builtin command to handle absolute paths.\n\nThe `cd` command is used to change the current working directory. `cd` can receive multiple\nargument types. In this challenge we'll cover:\n\n- Absolute paths, like `/usr/local/bin`. (**This stage**)\n- Relative paths, like `./`, `../`, `./dir`. (Later stages)\n- The `~` character, which stands for the user's home directory (Later stages)\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of `cd` commands to your shell:\n\n```bash\n$ cd /usr/local/bin\n$ pwd\n/usr/local/bin\n$ cd /does_not_exist\ncd: /does_not_exist: No such file or directory\n$\n```\n\nThe tester will check if the `cd` command correctly changes the directory when a valid path is provided. It'll\nalso check whether the message `cd: \u003cdirectory\u003e: No such file or directory` is printed if the provided path is invalid.\n\n### Notes\n\n- The `cd` command doesn't print anything if the directory is changed successfully. The tester will use `pwd` to verify\n  the current working directory after using `cd`.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement the ability for your shell to run the `cd` builtin command with absolute paths.","name":"The cd builtin: Absolute paths","position":10,"position-within-course":10,"position-within-extension":2,"primary-extension-slug":"navigation","secondary-extension-slugs":[],"slug":"ra6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"2018ba47-6299-44d2-a3ef-cb8eaf6bd944","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":42,"go":221,"cpp":103,"nim":null,"php":4,"zig":19,"dart":null,"java":244,"mojo":null,"odin":null,"ruby":6,"rust":258,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":53,"elixir":null,"fsharp":null,"kotlin":29,"python":232,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":25,"typescript":23},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend your `cd` builtin command to handle relative paths.\n\nAs a recap, `cd` can receive multiple argument types:\n\n- Absolute paths, like `/usr/local/bin`. (Previous stages)\n- Relative paths, like `./`, `../`, `./dir`. (**This stage**)\n- The `~` character, which stands for the user's home directory (Later stages)\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of `cd` commands to your shell:\n\n```bash\n$ cd /usr\n$ pwd\n/usr\n$ cd ./local/bin\n$ pwd\n/usr/local/bin\n$ cd ../../\n$ pwd\n/usr\n$\n```\n\nThe tester will check if the `cd` command correctly changes the directory when a valid path is provided. It'll\nalso check whether the message `cd: \u003cdirectory\u003e: No such file or directory` is printed if the provided path is invalid.\n\n### Notes\n\n- The actual directory names used will be random, so you can't hardcode the expected output.\n- Relative paths like `./`, `../`, and more complex relative paths should be handled correctly.\n- The `cd` command doesn't print anything if the directory is changed successfully. The tester will use `pwd` to verify\n  the current working directory after using `cd`.","difficulty":"hard","is-paid":true,"marketing-markdown":"In this stage, you'll implement the ability for your shell to run the `cd` builtin command with relative paths.","name":"The cd builtin: Relative paths","position":11,"position-within-course":11,"position-within-extension":3,"primary-extension-slug":"navigation","secondary-extension-slugs":[],"slug":"gq9","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"52410c7e-85d8-4225-838c-1e60f3308284","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":16,"go":69,"cpp":45,"nim":null,"php":4,"zig":10,"dart":null,"java":26,"mojo":null,"odin":null,"ruby":null,"rust":67,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":8,"elixir":null,"fsharp":null,"kotlin":2,"python":50,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":6,"typescript":8},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement support for quoting with backslashes within single quotes.\n\nEnclosing characters in single quotes `'` preserves the literal value of each character within the quotes, even backslashes. Read more about quoting with backslashes within single quotes [here](https://www.gnu.org/software/bash/manual/bash.html#Single-Quotes).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of `echo` commands to your shell:\n\n```bash\n$ echo 'shell\\\\\\nscript'\nshell\\\\\\nscript\n$ echo 'example\\\"testhello\\\"shell'\nexample\\\"testhello\\\"shell\n$\n```\n\nThe tester will check if the `echo` command correctly prints the quoted text.\n\n\nThen it will also send a `cat` command, with the file name parameters consisting of backslashes inside single quotes:\n```bash\n$ cat \"/tmp/file/'name'\" \"/tmp/file/'\\name\\'\"  \ncontent1 content2\n```\n\nThe tester will check if the `cat` command correctly prints the file content.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for quoting with backslashes within single quotes.","name":"Backslash within single quotes","position":16,"position-within-course":16,"position-within-extension":4,"primary-extension-slug":"quoting","secondary-extension-slugs":[],"slug":"le5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"c7d8b6b6-079e-4979-a3d9-fe79fd33057e","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":69,"go":262,"cpp":136,"nim":null,"php":9,"zig":35,"dart":null,"java":111,"mojo":null,"odin":null,"ruby":7,"rust":245,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":50,"elixir":null,"fsharp":null,"kotlin":12,"python":178,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":30,"typescript":30},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement support for quoting with double quotes.\n\nEnclosing characters in double quotes preserves the literal value of each character within the quotes except `\\`, the backslash retains its special meaning when followed by `\\`, `$`, `\"` or newline. Read more about quoting with double quotes [here](https://www.gnu.org/software/bash/manual/bash.html#Double-Quotes).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of `echo` commands to your shell:\n\n```bash\n$ echo \"quz  hello\"  \"bar\"\nquz  hello bar\n$ echo \"bar\"  \"shell's\"  \"foo\"\nbar shell's foo\n$\n```\n\nThe tester will check if the `echo` command correctly prints the quoted text.\n\nThen it will also send a `cat` command, with the file name parameter enclosed in double quotes:\n\n```bash\n$ cat \"/tmp/file name\" \"/tmp/'file name' with spaces\" \ncontent1 content2\n```\n\nThe tester will check if the `cat` command correctly prints the file content.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for quoting with double quotes.","name":"Double quotes","position":14,"position-within-course":14,"position-within-extension":2,"primary-extension-slug":"quoting","secondary-extension-slugs":[],"slug":"tg6","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"9a89230a-e05a-40e8-ab53-f8ec47950161","type":"course-stages","attributes":{"approved-comments-count":2,"community-solution-counts":{"c":360,"go":1121,"cpp":554,"nim":null,"php":31,"zig":126,"dart":null,"java":500,"mojo":null,"odin":null,"ruby":31,"rust":1310,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":201,"elixir":null,"fsharp":null,"kotlin":50,"python":1240,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":117,"typescript":108},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend the `type` builtin to search for executable files using [PATH](https://en.wikipedia.org/wiki/PATH_(variable)).\n\n[PATH](https://en.wikipedia.org/wiki/PATH_(variable)) is an environment variable that specifies a set of directories\nwhere executable programs are located. When a command is received, the program should search for the command in the\ndirectories listed in the PATH environment variable. If the command is found, the program should print the path to the command. If the command is not found, the program should print `\u003ccommand\u003e: not found`.\n\n### Tests\n\nThe tester will execute your program with a custom `PATH` like this:\n\n```bash\nPATH=\"/usr/bin:/usr/local/bin\" ./your_program.sh\n```\n\nIt'll then send a series of `type` commands to your shell:\n\n```bash\n$ type ls\nls is /usr/bin/ls\n$ type valid_command\nvalid_command is /usr/local/bin/valid_command\n$ type invalid_command\ninvalid_command: not found\n$\n```\n\nThe tester will check if the `type` command correctly identifies executable files in the PATH.\n\n### Notes\n\n- The actual value of the `PATH` environment variable will be random for each test case.\n- `PATH` can contain multiple directories separated by colons (`:`), your program should\n  search for programs in each directory in order and return the first match.\n- Some commands, such as `echo`, can exist as both builtin commands and executable files. In such cases, the `type` command should identify them as builtins.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement the `type` builtin command for your shell.","name":"The type builtin: executable files","position":7,"position-within-course":7,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"mg5","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"d454c0cd-ee7a-4353-9efd-3805f39c740d","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":232,"go":824,"cpp":342,"nim":null,"php":21,"zig":87,"dart":null,"java":338,"mojo":null,"odin":null,"ruby":23,"rust":884,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":137,"elixir":null,"fsharp":null,"kotlin":42,"python":789,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":66,"typescript":67},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the `pwd` builtin command.\n\n[pwd](https://en.wikipedia.org/wiki/Pwd) stands for \"print working directory\".\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a `pwd` command to your shell:\n\n```bash\n$ pwd\n/path/to/current/directory\n$\n```\n\nThe tester will check if the `pwd` command correctly prints the current working directory.\n\n### Notes\n\n- The `pwd` command must print the full absolute path of the current working directory.","difficulty":"easy","is-paid":true,"marketing-markdown":"In this stage, you'll implement the ability for your shell to print the current working directory.","name":"The pwd builtin","position":9,"position-within-course":9,"position-within-extension":1,"primary-extension-slug":"navigation","secondary-extension-slugs":[],"slug":"ei0","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"98bb4de9-29fe-4314-83eb-36d20f829f0d","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":10,"go":46,"cpp":27,"nim":null,"php":null,"zig":9,"dart":null,"java":14,"mojo":null,"odin":null,"ruby":1,"rust":53,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":10,"elixir":null,"fsharp":null,"kotlin":3,"python":80,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":10,"typescript":11},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement support for autocompleting builtin commands.\n\nYour shell should be able to complete builtin commands when the user presses the `\u003cTAB\u003e` key. Specifically, you'll need to implement completion for the `echo` and `exit` builtins.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt will then send the following inputs, simulating user input and tab presses:\n\n1.  **Input:** `ech`\u003cTAB\u003e\n    * The tester expects the prompt to display `echo ` after the tab press.\n\n2.  **Input:** `exi`\u003cTAB\u003e\n    * The tester expects the prompt to display `exit ` after the tab press.\n\nThe tester checks if the completion works as expected and if your shell outputs the correct output for `echo` and `exit` command.\nNote the space at the end of the completion.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for autocompleting builtin commands.","name":"Builtin completion","position":23,"position-within-course":23,"position-within-extension":1,"primary-extension-slug":"completions","secondary-extension-slugs":[],"slug":"qp2","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"c17ed613-22e9-49bd-a9ab-eac85d62e98f","type":"course-stages","attributes":{"approved-comments-count":1,"community-solution-counts":{"c":205,"go":757,"cpp":287,"nim":null,"php":20,"zig":66,"dart":null,"java":251,"mojo":null,"odin":null,"ruby":19,"rust":778,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":116,"elixir":null,"fsharp":null,"kotlin":28,"python":658,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":51,"typescript":59},"concept-slugs":[],"description-markdown-template":"In this stage, you'll extend your `cd` builtin command to handle the `~` character.\n\nAs a recap, `cd` can receive multiple argument types:\n\n- Absolute paths, like `/usr/local/bin`. (Previous stages)\n- Relative paths, like `./`, `../`, `./dir`. (Previous stages)\n- The `~` character, which stands for the user's home directory (**This stage**)\n\nThe `~` character is shorthand for the user's home directory. When `cd` is received with `~`, your shell should\nchange the current working directory to the user's home directory. The home directory is specified by the\n[`HOME`](https://unix.stackexchange.com/questions/123858/is-the-home-environment-variable-always-set-on-a-linux-system)\nenvironment variable.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of `cd` commands to your shell:\n\n```bash\n$ cd /usr/local/bin\n$ pwd\n/usr/local/bin\n$ cd ~\n$ pwd\n/home/user\n$\n```\n\nThe tester will check if the `cd` command correctly changes the directory to the user's home directory when `~` is used.\n\n### Notes\n\n- The `pwd` command will be used to verify the current working directory after using `cd ~`.\n- The home directory is specified by the `HOME` environment variable.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement the ability for your shell to run the `cd` builtin command with the `HOME` directory.","name":"The cd builtin: Home directory","position":12,"position-within-course":12,"position-within-extension":4,"primary-extension-slug":"navigation","secondary-extension-slugs":[],"slug":"gp4","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"5fbc05a7-b3f7-4f21-b545-899ad57ff15f","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":4,"go":51,"cpp":18,"nim":null,"php":null,"zig":4,"dart":null,"java":17,"mojo":null,"odin":null,"ruby":5,"rust":38,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":11,"elixir":null,"fsharp":null,"kotlin":3,"python":75,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":8,"typescript":7},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement support for appending the standard error of a command to a file.\n\nThe `2\u003e\u003e` operator is used to append the standard error of a command to a file.\n\nLearn more about [Appending Stderr](https://www.gnu.org/software/bash/manual/bash.html#Appending-Redirected-Output).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of commands to your shell, executing commands and appending their standard error to a file:\n\n```bash\n$ ls nonexistent \u003e\u003e /tmp/foo/baz.md\nls: cannot access 'nonexistent': No such file or directory\n$ ls nonexistent 2\u003e\u003e /tmp/foo/qux.md\n$ cat /tmp/foo/qux.md\nls: cannot access 'nonexistent': No such file or directory\n$ echo \"James says Error\" 2\u003e\u003e /tmp/foo/quz.md\nJames says Error\n$ cat nonexistent 2\u003e\u003e /tmp/foo/quz.md\n$ ls nonexistent 2\u003e\u003e /tmp/foo/quz.md\n$ cat /tmp/foo/quz.md\ncat: nonexistent: No such file or directory\nls: cannot access 'nonexistent': No such file or directory\n```\n\nThe tester will check if the commands correctly execute commands and append their standard error to a file as specified.\nThe file contents will also be checked for correctness.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for appending the standard error of a command to a file.","name":"Append stderr","position":22,"position-within-course":22,"position-within-extension":4,"primary-extension-slug":"redirection","secondary-extension-slugs":[],"slug":"un3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"07a51596-9d2a-4372-aa2e-9fac07cad652","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":770,"go":1548,"cpp":1033,"nim":null,"php":53,"zig":238,"dart":null,"java":866,"mojo":null,"odin":null,"ruby":44,"rust":1949,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":349,"elixir":null,"fsharp":null,"kotlin":77,"python":1879,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":250,"typescript":192},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement a [REPL (Read-Eval-Print Loop)](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop).\n\nA REPL is an interactive loop that reads user input, evaluates it, prints the result, and then waits for the next input.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt will then send a series of commands to your shell:\n\n```bash\n$ invalid_command_1\ninvalid_command_1: command not found\n$ invalid_command_2\ninvalid_command_2: command not found\n$ invalid_command_3\ninvalid_command_3: command not found\n$\n```\n\nAfter each command, the tester will check if `\u003ccommand_name\u003e: command not found` is printed, and whether a prompt is printed for the next command.\n\n### Notes\n\n- The exact number of commands sent and the command names will be random.\n- Just like the previous stages, all commands will be invalid commands, so the response will always be `\u003ccommand_name\u003e: command not found`.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement a REPL (Read-Eval-Print Loop) for your shell.","name":"REPL","position":3,"position-within-course":3,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"ff0","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"0f77a688-6add-4000-a0ee-e2f4f67cf13c","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":657,"go":1460,"cpp":876,"nim":null,"php":44,"zig":202,"dart":null,"java":766,"mojo":null,"odin":null,"ruby":41,"rust":1799,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":306,"elixir":null,"fsharp":null,"kotlin":75,"python":1712,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":192,"typescript":175},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement the [echo](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/echo.html) builtin.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of `echo` commands to your shell:\n\n```bash\n$ echo hello world\nhello world\n$ echo pineapple strawberry\npineapple strawberry\n$\n```\n\nAfter each command, the tester will check if the `echo` command correctly prints the provided text back.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement the `echo` builtin command.","name":"The echo builtin","position":5,"position-within-course":5,"position-within-extension":null,"primary-extension-slug":null,"secondary-extension-slugs":[],"slug":"iz3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"04ac6fa4-3772-46b1-b072-d2c1cc0519d2","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":55,"go":164,"cpp":82,"nim":null,"php":4,"zig":30,"dart":null,"java":61,"mojo":null,"odin":null,"ruby":2,"rust":188,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":26,"elixir":null,"fsharp":null,"kotlin":11,"python":72,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":12,"typescript":19},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement support for quoting with backslashes within double quotes.\n\nEnclosing backslashes within double quotes `\"` preserves the special meaning of the backslash, only when it is followed by `\\`, `$`, `\"` or newline. Read more about quoting with backslashes within double quotes [here](https://www.gnu.org/software/bash/manual/bash.html#Double-Quotes).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of `echo` commands to your shell:\n\n```bash\n$ echo \"hello'script'\\\\n'world\"\nhello'script'\\n'world\n$ echo \"hello\\\"insidequotes\"script\\\"\nhello\"insidequotesscript\"\n$\n```\n\nThe tester will check if the `echo` command correctly prints the quoted text.\n\nThen it will also send a `cat` command, with the file name parameters consisting of backslashes inside double quotes:\n\n```bash\n$ cat \"/tmp/\"file\\name\"\" \"/tmp/\"file name\"\" \ncontent1 content2\n```\n\nThe tester will check if the `cat` command correctly prints the file content.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for quoting with backslashes within double quotes.","name":"Backslash within double quotes","position":17,"position-within-course":17,"position-within-extension":5,"primary-extension-slug":"quoting","secondary-extension-slugs":[],"slug":"gu3","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"045bcdf2-424c-4349-ba72-c0bff2496156","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":37,"go":136,"cpp":56,"nim":null,"php":2,"zig":25,"dart":null,"java":56,"mojo":null,"odin":null,"ruby":9,"rust":142,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":20,"elixir":null,"fsharp":null,"kotlin":7,"python":182,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":14,"typescript":13},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement support for redirecting the output of a command to a file.\n\nThe `1\u003e` operator is used to redirect the output of a command to a file.\nBut, as a special case, if the file descriptor is not specified before the operator `\u003e`, the output is redirected to the standard output by default, so `\u003e` is equivalent to `1\u003e`.\n\nLearn more about [Redirecting Output](https://www.gnu.org/software/bash/manual/bash.html#Redirecting-Output).\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of commands to your shell, executing commands and redirecting their output to a file:\n\n```bash\n$ ls /tmp/baz \u003e /tmp/foo/baz.md\n$ cat /tmp/foo/baz.md\napple\nblueberry\n$ echo 'Hello James' 1\u003e /tmp/foo/foo.md\n$ cat /tmp/foo/foo.md\nHello James\n$ cat /tmp/baz/blueberry nonexistent 1\u003e /tmp/foo/quz.md\ncat: nonexistent: No such file or directory\n$ cat /tmp/foo/quz.md\nblueberry\n```\n\nThe tester will check if the commands correctly execute commands and redirect their output to a file as specified.\nThe file contents will also be checked for correctness.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for redirecting the output of a command to a file.","name":"Redirect stdout","position":19,"position-within-course":19,"position-within-extension":1,"primary-extension-slug":"redirection","secondary-extension-slugs":[],"slug":"jv1","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"8567a4b6-35df-48c8-b639-4d2a2175cc17","type":"course-stages","attributes":{"approved-comments-count":0,"community-solution-counts":{"c":29,"go":86,"cpp":77,"nim":null,"php":5,"zig":15,"dart":null,"java":38,"mojo":null,"odin":null,"ruby":3,"rust":101,"gleam":null,"ocaml":null,"scala":null,"swift":null,"csharp":12,"elixir":null,"fsharp":null,"kotlin":4,"python":110,"racket":null,"clojure":null,"crystal":null,"haskell":null,"reasonml":null,"commonlisp":null,"javascript":9,"typescript":18},"concept-slugs":[],"description-markdown-template":"In this stage, you'll implement support for executing a quoted executable.\n\nThe tester will rename the `cat` executable to something containing spaces, quotes and backslashes.\n\n### Tests\n\nThe tester will execute your program like this:\n\n```bash\n./your_program.sh\n```\n\nIt'll then send a series of commands to your shell, executing the renamed `cat` executable:\n\n```bash\n$ 'exe with \"quotes\"' file\ncontent1\n$ \"exe with 'single quotes'\" file\ncontent2\n```\n\nThe tester will check if the commands correctly execute the renamed `cat` executable, and that the output is correct.","difficulty":"medium","is-paid":true,"marketing-markdown":"In this stage, you'll implement support for executing a quoted executable.","name":"Executing a quoted executable","position":18,"position-within-course":18,"position-within-extension":6,"primary-extension-slug":"quoting","secondary-extension-slugs":[],"slug":"qj0","tester-source-code-url":null},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"solutions":{},"screencasts":{}}},{"id":"2457ddab-e004-4bf5-b40c-231fb89528e6","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"language":{"data":{"id":"4cd22891-8eaa-4f67-8b58-30b0403e59aa","type":"language"}}}},{"id":"4120a32a-d7e1-435c-ab9c-6451f659757d","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"language":{"data":{"id":"3ee6502c-281b-480f-a4bf-4a3efd209689","type":"language"}}}},{"id":"22cc0d4e-aa1f-4764-ad38-56c35c4c2373","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"language":{"data":{"id":"c9b581c8-6977-4f1b-9c8b-e1ee5fd7a10f","type":"language"}}}},{"id":"38bdb2b0-37b5-4610-98c7-4d4b6a629d26","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"language":{"data":{"id":"8ee02441-697a-4e6d-8015-44e472b0c1b8","type":"language"}}}},{"id":"9805af12-7bc8-4922-bb64-1adcb9ed4230","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"language":{"data":{"id":"16121c66-8a81-452d-8c3a-f9fa221e7936","type":"language"}}}},{"id":"d670ca66-65d8-4aaf-862f-e8b6fd07ae2d","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"language":{"data":{"id":"1dbc76cc-c216-4776-a605-3a5784b801a9","type":"language"}}}},{"id":"decc7f94-353a-465c-bb1b-4944b806b69f","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"language":{"data":{"id":"3236a60c-e348-4db7-9e6a-e2826b38d991","type":"language"}}}},{"id":"a3fa3032-0652-498f-bc52-a6799be7a748","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"language":{"data":{"id":"a58f0983-d67d-47e6-97e7-c02aec9ec269","type":"language"}}}},{"id":"764cbd43-2b75-4042-9e78-9435de3ca89a","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"language":{"data":{"id":"5ddd40dd-1539-4214-a40c-cc7a9e5edf35","type":"language"}}}},{"id":"2de85223-c682-40ba-875d-87af6738429f","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"language":{"data":{"id":"7e07ab8f-2bc0-4b20-bc72-1cd9c7e200ed","type":"language"}}}},{"id":"98adf547-0520-42da-ab8b-c70ca429c28f","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"language":{"data":{"id":"fb72dae0-177a-45cc-a63e-71f9dd3184ac","type":"language"}}}},{"id":"46c51d10-39ad-454a-be4e-aa7ff241f17a","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"language":{"data":{"id":"0c3ceaee-af5c-44d2-ab88-87acc929944b","type":"language"}}}},{"id":"cae8dbf4-ca7f-4c0c-8f56-11e32304a9ea","type":"course-language-configurations","attributes":{"alpha-tester-usernames":[],"release-status":"live"},"relationships":{"course":{"data":{"id":"cbc0fa1c-2731-42a4-a683-3b8cb7ef91fa","type":"course"}},"language":{"data":{"id":"63d38ef2-f131-4635-aa66-0cf404826f9b","type":"language"}}}}]</script><script type="x/boundary" id="fastboot-body-end"></script>

    
<script src="/assets/vendor.b933e3e186521cb08e4ab8306419c5d9.js"></script>






































































































































































































<script src="/assets/chunk.a2b4bf31aadbb0f9c370.js"></script>
<script src="/assets/chunk.288e69909b30728eb866.js"></script>
</body></html>